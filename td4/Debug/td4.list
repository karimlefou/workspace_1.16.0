
td4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08007c80  08007c80  00008c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f64  08007f64  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007f64  08007f64  00008f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f6c  08007f6c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f6c  08007f6c  00008f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f70  08007f70  00008f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007f74  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  20000068  08007fdc  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000544  08007fdc  00009544  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0e6  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003aec  00000000  00000000  0002517e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00028c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000139c  00000000  00000000  0002a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b9d3  00000000  00000000  0002b934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020474  00000000  00000000  00057307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cda0  00000000  00000000  0007777b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018451b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007234  00000000  00000000  00184560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0018b794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c68 	.word	0x08007c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007c68 	.word	0x08007c68

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005a2:	4b30      	ldr	r3, [pc, #192]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005a4:	4a30      	ldr	r2, [pc, #192]	@ (8000668 <MX_ADC1_Init+0xe8>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c0:	4b28      	ldr	r3, [pc, #160]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c6:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b25      	ldr	r3, [pc, #148]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005d2:	4b24      	ldr	r3, [pc, #144]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80005e0:	4b20      	ldr	r3, [pc, #128]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005e2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80005e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_ADC1_Init+0xe4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000606:	4817      	ldr	r0, [pc, #92]	@ (8000664 <MX_ADC1_Init+0xe4>)
 8000608:	f001 fb6a 	bl	8001ce0 <HAL_ADC_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000612:	f000 fad7 	bl	8000bc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4810      	ldr	r0, [pc, #64]	@ (8000664 <MX_ADC1_Init+0xe4>)
 8000622:	f002 fb2f 	bl	8002c84 <HAL_ADCEx_MultiModeConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800062c:	f000 faca 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000630:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_ADC1_Init+0xec>)
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000634:	2306      	movs	r3, #6
 8000636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800063c:	237f      	movs	r3, #127	@ 0x7f
 800063e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000640:	2304      	movs	r3, #4
 8000642:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_ADC1_Init+0xe4>)
 800064e:	f001 fecf 	bl	80023f0 <HAL_ADC_ConfigChannel>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000658:	f000 fab4 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	@ 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000084 	.word	0x20000084
 8000668:	50040000 	.word	0x50040000
 800066c:	25b00200 	.word	0x25b00200

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0ac      	sub	sp, #176	@ 0xb0
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2288      	movs	r2, #136	@ 0x88
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fcd0 	bl	8007036 <memset>
  if(adcHandle->Instance==ADC1)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <HAL_ADC_MspInit+0xd8>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d14f      	bne.n	8000740 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80006aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80006b6:	2308      	movs	r3, #8
 80006b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006ba:	2307      	movs	r3, #7
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006ca:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 fe2f 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006dc:	f000 fa72 	bl	8000bc4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <HAL_ADC_MspInit+0xdc>)
 80006e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e4:	4a19      	ldr	r2, [pc, #100]	@ (800074c <HAL_ADC_MspInit+0xdc>)
 80006e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <HAL_ADC_MspInit+0xdc>)
 80006ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006f4:	613b      	str	r3, [r7, #16]
 80006f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_ADC_MspInit+0xdc>)
 80006fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fc:	4a13      	ldr	r2, [pc, #76]	@ (800074c <HAL_ADC_MspInit+0xdc>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <HAL_ADC_MspInit+0xdc>)
 8000706:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000710:	2310      	movs	r3, #16
 8000712:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000716:	230b      	movs	r3, #11
 8000718:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000726:	4619      	mov	r1, r3
 8000728:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800072c:	f002 fc3c 	bl	8002fa8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000730:	2200      	movs	r2, #0
 8000732:	2100      	movs	r1, #0
 8000734:	2012      	movs	r0, #18
 8000736:	f002 fc0d 	bl	8002f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800073a:	2012      	movs	r0, #18
 800073c:	f002 fc26 	bl	8002f8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	37b0      	adds	r7, #176	@ 0xb0
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	50040000 	.word	0x50040000
 800074c:	40021000 	.word	0x40021000

08000750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	@ 0x28
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b6d      	ldr	r3, [pc, #436]	@ (800091c <MX_GPIO_Init+0x1cc>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a6c      	ldr	r2, [pc, #432]	@ (800091c <MX_GPIO_Init+0x1cc>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b6a      	ldr	r3, [pc, #424]	@ (800091c <MX_GPIO_Init+0x1cc>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077e:	4b67      	ldr	r3, [pc, #412]	@ (800091c <MX_GPIO_Init+0x1cc>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a66      	ldr	r2, [pc, #408]	@ (800091c <MX_GPIO_Init+0x1cc>)
 8000784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b64      	ldr	r3, [pc, #400]	@ (800091c <MX_GPIO_Init+0x1cc>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b61      	ldr	r3, [pc, #388]	@ (800091c <MX_GPIO_Init+0x1cc>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a60      	ldr	r2, [pc, #384]	@ (800091c <MX_GPIO_Init+0x1cc>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b5e      	ldr	r3, [pc, #376]	@ (800091c <MX_GPIO_Init+0x1cc>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b5b      	ldr	r3, [pc, #364]	@ (800091c <MX_GPIO_Init+0x1cc>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b2:	4a5a      	ldr	r2, [pc, #360]	@ (800091c <MX_GPIO_Init+0x1cc>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ba:	4b58      	ldr	r3, [pc, #352]	@ (800091c <MX_GPIO_Init+0x1cc>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2101      	movs	r1, #1
 80007ca:	4855      	ldr	r0, [pc, #340]	@ (8000920 <MX_GPIO_Init+0x1d0>)
 80007cc:	f002 fdae 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 80007d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007da:	f002 fda7 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 80007de:	2200      	movs	r2, #0
 80007e0:	f24e 0136 	movw	r1, #57398	@ 0xe036
 80007e4:	484f      	ldr	r0, [pc, #316]	@ (8000924 <MX_GPIO_Init+0x1d4>)
 80007e6:	f002 fda1 	bl	800332c <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2180      	movs	r1, #128	@ 0x80
 80007ee:	484c      	ldr	r0, [pc, #304]	@ (8000920 <MX_GPIO_Init+0x1d0>)
 80007f0:	f002 fd9c 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_ENN_GPIO_Port, STEPPER_ENN_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fe:	f002 fd95 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000808:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	4841      	ldr	r0, [pc, #260]	@ (8000920 <MX_GPIO_Init+0x1d0>)
 800081a:	f002 fbc5 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_PIN_13 (entrée avec pull-up) */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;  // Activation du pull-up
 8000828:	2301      	movs	r3, #1
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	483a      	ldr	r0, [pc, #232]	@ (8000920 <MX_GPIO_Init+0x1d0>)
 8000838:	f002 fbb6 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_0_Pin;
 800083c:	2381      	movs	r3, #129	@ 0x81
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4833      	ldr	r0, [pc, #204]	@ (8000920 <MX_GPIO_Init+0x1d0>)
 8000854:	f002 fba8 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAGNETO_STATUS_Pin;
 8000858:	2302      	movs	r3, #2
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAGNETO_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	482d      	ldr	r0, [pc, #180]	@ (8000920 <MX_GPIO_Init+0x1d0>)
 800086c:	f002 fb9c 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin
 8000870:	f44f 53cd 	mov.w	r3, #6560	@ 0x19a0
 8000874:	617b      	str	r3, [r7, #20]
                          |STEPPER_ENN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800088c:	f002 fb8c 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin|BTN_CENTER_Pin|BTN_LEFT_Pin|BTN_TOP_Pin
 8000890:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8000894:	617b      	str	r3, [r7, #20]
                          |BTN_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	4619      	mov	r1, r3
 80008a6:	481e      	ldr	r0, [pc, #120]	@ (8000920 <MX_GPIO_Init+0x1d0>)
 80008a8:	f002 fb7e 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAGNETO_INT_Pin|BTN_BOTTOM_Pin;
 80008ac:	f640 0301 	movw	r3, #2049	@ 0x801
 80008b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4619      	mov	r1, r3
 80008c2:	4818      	ldr	r0, [pc, #96]	@ (8000924 <MX_GPIO_Init+0x1d4>)
 80008c4:	f002 fb70 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 80008c8:	f24e 0336 	movw	r3, #57398	@ 0xe036
 80008cc:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4810      	ldr	r0, [pc, #64]	@ (8000924 <MX_GPIO_Init+0x1d4>)
 80008e2:	f002 fb61 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80008e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f002 fb52 	bl	8002fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2028      	movs	r0, #40	@ 0x28
 800090a:	f002 fb23 	bl	8002f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800090e:	2028      	movs	r0, #40	@ 0x28
 8000910:	f002 fb3c 	bl	8002f8c <HAL_NVIC_EnableIRQ>
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	@ 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000
 8000920:	48000800 	.word	0x48000800
 8000924:	48000400 	.word	0x48000400

08000928 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	@ (800099c <MX_I2C1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	@ (80009a0 <MX_I2C1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000932:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_I2C1_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <MX_I2C1_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_I2C1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	@ (800099c <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	@ (800099c <MX_I2C1_Init+0x74>)
 8000964:	f002 fd1d 	bl	80033a2 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 f929 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <MX_I2C1_Init+0x74>)
 8000976:	f002 fdaf 	bl	80034d8 <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 f920 	bl	8000bc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_I2C1_Init+0x74>)
 8000988:	f002 fdf1 	bl	800356e <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f917 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200000e8 	.word	0x200000e8
 80009a0:	40005400 	.word	0x40005400
 80009a4:	10909cec 	.word	0x10909cec

080009a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0ac      	sub	sp, #176	@ 0xb0
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2288      	movs	r2, #136	@ 0x88
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f006 fb34 	bl	8007036 <memset>
  if(i2cHandle->Instance==I2C1)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <HAL_I2C_MspInit+0xb0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d13a      	bne.n	8000a4e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009d8:	2340      	movs	r3, #64	@ 0x40
 80009da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009dc:	2300      	movs	r3, #0
 80009de:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 fca5 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009f0:	f000 f8e8 	bl	8000bc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b19      	ldr	r3, [pc, #100]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	4a18      	ldr	r2, [pc, #96]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a00:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a0c:	23c0      	movs	r3, #192	@ 0xc0
 8000a0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a12:	2312      	movs	r3, #18
 8000a14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480b      	ldr	r0, [pc, #44]	@ (8000a60 <HAL_I2C_MspInit+0xb8>)
 8000a32:	f002 fab9 	bl	8002fa8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <HAL_I2C_MspInit+0xb4>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a4e:	bf00      	nop
 8000a50:	37b0      	adds	r7, #176	@ 0xb0
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	48000400 	.word	0x48000400

08000a64 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)

{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a6c:	1d39      	adds	r1, r7, #4
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	2201      	movs	r2, #1
 8000a74:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <__io_putchar+0x20>)
 8000a76:	f005 fba1 	bl	80061bc <HAL_UART_Transmit>

return ch;
 8000a7a:	687b      	ldr	r3, [r7, #4]

}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000036c 	.word	0x2000036c

08000a88 <__io_getchar>:



int __io_getchar(void)

{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

uint8_t ch = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	71fb      	strb	r3, [r7, #7]

__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <__io_getchar+0x38>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2208      	movs	r2, #8
 8000a98:	621a      	str	r2, [r3, #32]

HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a9a:	1df9      	adds	r1, r7, #7
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <__io_getchar+0x38>)
 8000aa4:	f005 fc13 	bl	80062ce <HAL_UART_Receive>

HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000aa8:	1df9      	adds	r1, r7, #7
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <__io_getchar+0x38>)
 8000ab2:	f005 fb83 	bl	80061bc <HAL_UART_Transmit>

return ch;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	2000036c 	.word	0x2000036c

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f000 fed8 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f817 	bl	8000afe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad0:	f7ff fe3e 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ad4:	f000 fdd6 	bl	8001684 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ad8:	f7ff ff26 	bl	8000928 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000adc:	f000 f986 	bl	8000dec <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ae0:	f000 fbd6 	bl	8001290 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ae4:	f000 fc28 	bl	8001338 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ae8:	f000 fd9c 	bl	8001624 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000aec:	f7ff fd48 	bl	8000580 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000af0:	f000 fc9a 	bl	8001428 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //setup();
  setup1();
 8000af4:	f000 f86c 	bl	8000bd0 <setup1>
  //setup2();
  while (1)
  {
	  //loop();
	  loop1();
 8000af8:	f000 f874 	bl	8000be4 <loop1>
 8000afc:	e7fc      	b.n	8000af8 <main+0x34>

08000afe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b096      	sub	sp, #88	@ 0x58
 8000b02:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2244      	movs	r2, #68	@ 0x44
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f006 fa92 	bl	8007036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b12:	463b      	mov	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b20:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b24:	f002 fd7e 	bl	8003624 <HAL_PWREx_ControlVoltageScaling>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b2e:	f000 f849 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b44:	2302      	movs	r3, #2
 8000b46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b4c:	230a      	movs	r3, #10
 8000b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b50:	2307      	movs	r3, #7
 8000b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4618      	mov	r0, r3
 8000b62:	f002 fdb5 	bl	80036d0 <HAL_RCC_OscConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b6c:	f000 f82a 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b70:	230f      	movs	r3, #15
 8000b72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2303      	movs	r3, #3
 8000b76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	2104      	movs	r1, #4
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 f97d 	bl	8003e88 <HAL_RCC_ClockConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b94:	f000 f816 	bl	8000bc4 <Error_Handler>
  }
}
 8000b98:	bf00      	nop
 8000b9a:	3758      	adds	r7, #88	@ 0x58
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d101      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb2:	f000 fe83 	bl	80018bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40001000 	.word	0x40001000

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <setup1>:
      } ; // CONST CA VEUT DIRE CONSTANTE / CA NE CHANGE PAS DE VALEUR NUMERIQUE
GPIO_PinState PinState,led;
char morseCode[5]; // Pour enregistrer le code Morse d'une lettre
int morseIndex = 0;
void setup1()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0

	//printf("%c /n/r",lookupInBaseFromCode(".."));
	//printf("%s ",lookupInBaseFromLetter('W'));
    printf("STM32 Morse Decoder Ready\n\r");
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <setup1+0x10>)
 8000bd6:	f006 f9d9 	bl	8006f8c <iprintf>



}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	08007d70 	.word	0x08007d70

08000be4 <loop1>:
void loop1()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
    char d;
    PinState = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000bea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <loop1+0x88>)
 8000bf0:	f002 fb84 	bl	80032fc <HAL_GPIO_ReadPin>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c70 <loop1+0x8c>)
 8000bfa:	701a      	strb	r2, [r3, #0]
    d = waitForInput(decodeappui());
 8000bfc:	f000 f8ba 	bl	8000d74 <decodeappui>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f000 f864 	bl	8000cd0 <waitForInput>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	71fb      	strb	r3, [r7, #7]

    if (d == ' ')
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	d115      	bne.n	8000c3e <loop1+0x5a>
    {
        morseCode[morseIndex] = '\0'; // Fin du code Morse pour une lettre
 8000c12:	4b18      	ldr	r3, [pc, #96]	@ (8000c74 <loop1+0x90>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a18      	ldr	r2, [pc, #96]	@ (8000c78 <loop1+0x94>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	54d1      	strb	r1, [r2, r3]
        char decodedLetter = lookupInBaseFromCode(morseCode);
 8000c1c:	4816      	ldr	r0, [pc, #88]	@ (8000c78 <loop1+0x94>)
 8000c1e:	f000 f831 	bl	8000c84 <lookupInBaseFromCode>
 8000c22:	4603      	mov	r3, r0
 8000c24:	71bb      	strb	r3, [r7, #6]
        if (decodedLetter)
 8000c26:	79bb      	ldrb	r3, [r7, #6]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d004      	beq.n	8000c36 <loop1+0x52>
        {
            printf("Lettre décodée: %c\n\r", decodedLetter); // Afficher la lettre décodée
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4812      	ldr	r0, [pc, #72]	@ (8000c7c <loop1+0x98>)
 8000c32:	f006 f9ab 	bl	8006f8c <iprintf>
        }
        morseIndex = 0; // Réinitialiser pour la prochaine lettre
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <loop1+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	e00f      	b.n	8000c5e <loop1+0x7a>
    }
    else
    {
        if (morseIndex < sizeof(morseCode) - 1)
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <loop1+0x90>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d80b      	bhi.n	8000c5e <loop1+0x7a>
        {
            morseCode[morseIndex++] = d;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <loop1+0x90>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	4909      	ldr	r1, [pc, #36]	@ (8000c74 <loop1+0x90>)
 8000c4e:	600a      	str	r2, [r1, #0]
 8000c50:	4909      	ldr	r1, [pc, #36]	@ (8000c78 <loop1+0x94>)
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	54ca      	strb	r2, [r1, r3]
            printf("Code Morse en cours: %s\n\r", morseCode); // Afficher le code Morse en cours
 8000c56:	4908      	ldr	r1, [pc, #32]	@ (8000c78 <loop1+0x94>)
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <loop1+0x9c>)
 8000c5a:	f006 f997 	bl	8006f8c <iprintf>
        }
    }

    HAL_Delay(100); // Petite pause pour éviter de spammer la détection
 8000c5e:	2064      	movs	r0, #100	@ 0x64
 8000c60:	f000 fe4c 	bl	80018fc <HAL_Delay>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	48000800 	.word	0x48000800
 8000c70:	2000013c 	.word	0x2000013c
 8000c74:	20000148 	.word	0x20000148
 8000c78:	20000140 	.word	0x20000140
 8000c7c:	08007d8c 	.word	0x08007d8c
 8000c80:	08007da4 	.word	0x08007da4

08000c84 <lookupInBaseFromCode>:

char lookupInBaseFromCode (char * code)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	int i;
	for (i=0;i<ALPHABET_SIZE;i++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	e013      	b.n	8000cba <lookupInBaseFromCode+0x36>
	{
		if (strcmp(code,alphabet[i].code)==0)
 8000c92:	4a0e      	ldr	r2, [pc, #56]	@ (8000ccc <lookupInBaseFromCode+0x48>)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f7ff fa96 	bl	80001d0 <strcmp>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d104      	bne.n	8000cb4 <lookupInBaseFromCode+0x30>
			return alphabet[i].letter;
 8000caa:	4a08      	ldr	r2, [pc, #32]	@ (8000ccc <lookupInBaseFromCode+0x48>)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8000cb2:	e006      	b.n	8000cc2 <lookupInBaseFromCode+0x3e>
	for (i=0;i<ALPHABET_SIZE;i++)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b24      	cmp	r3, #36	@ 0x24
 8000cbe:	dde8      	ble.n	8000c92 <lookupInBaseFromCode+0xe>
	}
	return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	08007dc0 	.word	0x08007dc0

08000cd0 <waitForInput>:
			return alphabet[i].code;
	}
	return 0;
}
char waitForInput (char previousInput)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    int  d = 0, f = 0, T = 0, T1 = 0, d1 = 0, f1 = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
    GPIO_PinState cour;

    cour = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13); // Lire l'état du bouton
 8000cf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf6:	481e      	ldr	r0, [pc, #120]	@ (8000d70 <waitForInput+0xa0>)
 8000cf8:	f002 fb00 	bl	80032fc <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]

    if (cour == GPIO_PIN_RESET) // Si le bouton est appuyé
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d121      	bne.n	8000d4a <waitForInput+0x7a>
    {
        d = HAL_GetTick(); // Démarrer le timing
 8000d06:	f000 fded 	bl	80018e4 <HAL_GetTick>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000d0e:	bf00      	nop
 8000d10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d14:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <waitForInput+0xa0>)
 8000d16:	f002 faf1 	bl	80032fc <HAL_GPIO_ReadPin>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f7      	beq.n	8000d10 <waitForInput+0x40>
        {
            // Attendre que le bouton soit relâché
        }
        f = HAL_GetTick(); // Temps lorsque le bouton est relâché
 8000d20:	f000 fde0 	bl	80018e4 <HAL_GetTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	623b      	str	r3, [r7, #32]
        T = f - d; // Calculer la durée de l'appui
 8000d28:	6a3a      	ldr	r2, [r7, #32]
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	61fb      	str	r3, [r7, #28]

        if (T >= 200) // Si l'appui est long
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d34:	dd01      	ble.n	8000d3a <waitForInput+0x6a>
        {
            return '-'; // Retourner un trait
 8000d36:	232d      	movs	r3, #45	@ 0x2d
 8000d38:	e016      	b.n	8000d68 <waitForInput+0x98>
        }
        else if (T > 0 && T < 200) // Si l'appui est court
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	dd12      	ble.n	8000d66 <waitForInput+0x96>
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d44:	dc0f      	bgt.n	8000d66 <waitForInput+0x96>
        {
            return '.'; // Retourner un point
 8000d46:	232e      	movs	r3, #46	@ 0x2e
 8000d48:	e00e      	b.n	8000d68 <waitForInput+0x98>
        }
    }
    else // Si le bouton n'est pas appuyé
    {
        f1 = HAL_GetTick();
 8000d4a:	f000 fdcb 	bl	80018e4 <HAL_GetTick>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	613b      	str	r3, [r7, #16]
        T1 = f1 - d1;
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	61bb      	str	r3, [r7, #24]

        if (T1 >= 1000) // Si l'intervalle dépasse 1 seconde
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d60:	db01      	blt.n	8000d66 <waitForInput+0x96>
        {
            return ' '; // Espacement entre les lettres
 8000d62:	2320      	movs	r3, #32
 8000d64:	e000      	b.n	8000d68 <waitForInput+0x98>
        }
    }

    return previousInput; // Si rien ne change, retourner l'entrée précédente
 8000d66:	79fb      	ldrb	r3, [r7, #7]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3728      	adds	r7, #40	@ 0x28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	48000800 	.word	0x48000800

08000d74 <decodeappui>:

char decodeappui(void) // SOIT UN - un . OU ESPACE
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
	int  d = 0, f = 0,T=0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
	GPIO_PinState  cour;
	cour = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000d86:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d8a:	4817      	ldr	r0, [pc, #92]	@ (8000de8 <decodeappui+0x74>)
 8000d8c:	f002 fab6 	bl	80032fc <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	70fb      	strb	r3, [r7, #3]
	if (cour==0)
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d120      	bne.n	8000ddc <decodeappui+0x68>
		{
		    HAL_Delay(50);
 8000d9a:	2032      	movs	r0, #50	@ 0x32
 8000d9c:	f000 fdae 	bl	80018fc <HAL_Delay>
			d=HAL_GetTick();
 8000da0:	f000 fda0 	bl	80018e4 <HAL_GetTick>
 8000da4:	4603      	mov	r3, r0
 8000da6:	60bb      	str	r3, [r7, #8]
			cour = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000da8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dac:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <decodeappui+0x74>)
 8000dae:	f002 faa5 	bl	80032fc <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	70fb      	strb	r3, [r7, #3]
			while(cour!=1) // PCK T
 8000db6:	e003      	b.n	8000dc0 <decodeappui+0x4c>
			{
				f=HAL_GetTick();
 8000db8:	f000 fd94 	bl	80018e4 <HAL_GetTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60fb      	str	r3, [r7, #12]
			while(cour!=1) // PCK T
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d1f8      	bne.n	8000db8 <decodeappui+0x44>
			}
				T=f-d;
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	607b      	str	r3, [r7, #4]
			if(T >= 200)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8000dd2:	dd01      	ble.n	8000dd8 <decodeappui+0x64>
			{

				return '-';
 8000dd4:	232d      	movs	r3, #45	@ 0x2d
 8000dd6:	e002      	b.n	8000dde <decodeappui+0x6a>
			}
			else
			{
				return '.';
 8000dd8:	232e      	movs	r3, #46	@ 0x2e
 8000dda:	e000      	b.n	8000dde <decodeappui+0x6a>
			}
		}
		else
		{
			return ' ';
 8000ddc:	2320      	movs	r3, #32
		}
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	48000800 	.word	0x48000800

08000dec <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000df2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e64 <MX_SPI2_Init+0x78>)
 8000df4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000df8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e06:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000e0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e12:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e22:	2230      	movs	r2, #48	@ 0x30
 8000e24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e38:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e44:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_SPI2_Init+0x74>)
 8000e4c:	f003 ff2e 	bl	8004cac <HAL_SPI_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f7ff feb5 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000014c 	.word	0x2000014c
 8000e64:	40003800 	.word	0x40003800

08000e68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	@ 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a25      	ldr	r2, [pc, #148]	@ (8000f1c <HAL_SPI_MspInit+0xb4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d144      	bne.n	8000f14 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e8a:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	4a24      	ldr	r2, [pc, #144]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e96:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a18      	ldr	r2, [pc, #96]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ec0:	f043 0302 	orr.w	r3, r3, #2
 8000ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <HAL_SPI_MspInit+0xb8>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ed2:	230c      	movs	r3, #12
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <HAL_SPI_MspInit+0xbc>)
 8000eee:	f002 f85b 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	2303      	movs	r3, #3
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f04:	2305      	movs	r3, #5
 8000f06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <HAL_SPI_MspInit+0xc0>)
 8000f10:	f002 f84a 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	@ 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40003800 	.word	0x40003800
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000400 	.word	0x48000400

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f36:	4a0e      	ldr	r2, [pc, #56]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	@ 0x38
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f82:	4b34      	ldr	r3, [pc, #208]	@ (8001054 <HAL_InitTick+0xe0>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	4a33      	ldr	r2, [pc, #204]	@ (8001054 <HAL_InitTick+0xe0>)
 8000f88:	f043 0310 	orr.w	r3, r3, #16
 8000f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <HAL_InitTick+0xe0>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f9a:	f107 0210 	add.w	r2, r7, #16
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 f933 	bl	8004210 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d103      	bne.n	8000fbc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fb4:	f003 f900 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8000fb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8000fba:	e004      	b.n	8000fc6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fbc:	f003 f8fc 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fc8:	4a23      	ldr	r2, [pc, #140]	@ (8001058 <HAL_InitTick+0xe4>)
 8000fca:	fba2 2303 	umull	r2, r3, r2, r3
 8000fce:	0c9b      	lsrs	r3, r3, #18
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fd4:	4b21      	ldr	r3, [pc, #132]	@ (800105c <HAL_InitTick+0xe8>)
 8000fd6:	4a22      	ldr	r2, [pc, #136]	@ (8001060 <HAL_InitTick+0xec>)
 8000fd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <HAL_InitTick+0xe8>)
 8000fdc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000fe0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800105c <HAL_InitTick+0xe8>)
 8000fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fe6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800105c <HAL_InitTick+0xe8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_InitTick+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	@ (800105c <HAL_InitTick+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ffa:	4818      	ldr	r0, [pc, #96]	@ (800105c <HAL_InitTick+0xe8>)
 8000ffc:	f003 fef9 	bl	8004df2 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001006:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11b      	bne.n	8001046 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800100e:	4813      	ldr	r0, [pc, #76]	@ (800105c <HAL_InitTick+0xe8>)
 8001010:	f003 ff46 	bl	8004ea0 <HAL_TIM_Base_Start_IT>
 8001014:	4603      	mov	r3, r0
 8001016:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800101a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800101e:	2b00      	cmp	r3, #0
 8001020:	d111      	bne.n	8001046 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001022:	2036      	movs	r0, #54	@ 0x36
 8001024:	f001 ffb2 	bl	8002f8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b0f      	cmp	r3, #15
 800102c:	d808      	bhi.n	8001040 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800102e:	2200      	movs	r2, #0
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	2036      	movs	r0, #54	@ 0x36
 8001034:	f001 ff8e 	bl	8002f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001038:	4a0a      	ldr	r2, [pc, #40]	@ (8001064 <HAL_InitTick+0xf0>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	e002      	b.n	8001046 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001046:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800104a:	4618      	mov	r0, r3
 800104c:	3738      	adds	r7, #56	@ 0x38
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	431bde83 	.word	0x431bde83
 800105c:	200001b0 	.word	0x200001b0
 8001060:	40001000 	.word	0x40001000
 8001064:	20000004 	.word	0x20000004

08001068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <NMI_Handler+0x4>

08001070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <MemManage_Handler+0x4>

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <BusFault_Handler+0x4>

08001088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <UsageFault_Handler+0x4>

08001090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <ADC1_2_IRQHandler+0x10>)
 80010ce:	f000 ff57 	bl	8001f80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000084 	.word	0x20000084

080010dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010e0:	4802      	ldr	r0, [pc, #8]	@ (80010ec <TIM4_IRQHandler+0x10>)
 80010e2:	f004 f854 	bl	800518e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000298 	.word	0x20000298

080010f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_BOTTOM_Pin);
 80010f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80010f8:	f002 f930 	bl	800335c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001100:	f002 f92c 	bl	800335c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001104:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001108:	f002 f928 	bl	800335c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}

08001110 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001114:	4802      	ldr	r0, [pc, #8]	@ (8001120 <TIM6_DAC_IRQHandler+0x10>)
 8001116:	f004 f83a 	bl	800518e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001b0 	.word	0x200001b0

08001124 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	60b9      	str	r1, [r7, #8]
 800112e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	e00a      	b.n	800114c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001136:	f7ff fca7 	bl	8000a88 <__io_getchar>
 800113a:	4601      	mov	r1, r0
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	b2ca      	uxtb	r2, r1
 8001144:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3301      	adds	r3, #1
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbf0      	blt.n	8001136 <_read+0x12>
  }

  return len;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b086      	sub	sp, #24
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e009      	b.n	8001184 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	1c5a      	adds	r2, r3, #1
 8001174:	60ba      	str	r2, [r7, #8]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fc73 	bl	8000a64 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	dbf1      	blt.n	8001170 <_write+0x12>
  }
  return len;
 800118c:	687b      	ldr	r3, [r7, #4]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_close>:

int _close(int file)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011be:	605a      	str	r2, [r3, #4]
  return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <_isatty>:

int _isatty(int file)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b083      	sub	sp, #12
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f005 ff50 	bl	80070d4 <__errno>
 8001234:	4603      	mov	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <_sbrk+0x64>)
 8001250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20018000 	.word	0x20018000
 8001260:	00000400 	.word	0x00000400
 8001264:	200001fc 	.word	0x200001fc
 8001268:	20000548 	.word	0x20000548

0800126c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	@ 0x30
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2224      	movs	r2, #36	@ 0x24
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 fec9 	bl	8007036 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012ae:	4b21      	ldr	r3, [pc, #132]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295
 80012c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d0:	4b18      	ldr	r3, [pc, #96]	@ (8001334 <MX_TIM2_Init+0xa4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012de:	2301      	movs	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012ee:	2301      	movs	r3, #1
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <MX_TIM2_Init+0xa4>)
 8001302:	f003 fe9e 	bl	8005042 <HAL_TIM_Encoder_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800130c:	f7ff fc5a 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	@ (8001334 <MX_TIM2_Init+0xa4>)
 800131e:	f004 fe59 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001328:	f7ff fc4c 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	3730      	adds	r7, #48	@ 0x30
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000200 	.word	0x20000200

08001338 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	615a      	str	r2, [r3, #20]
 8001368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800136a:	4b2d      	ldr	r3, [pc, #180]	@ (8001420 <MX_TIM3_Init+0xe8>)
 800136c:	4a2d      	ldr	r2, [pc, #180]	@ (8001424 <MX_TIM3_Init+0xec>)
 800136e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001370:	4b2b      	ldr	r3, [pc, #172]	@ (8001420 <MX_TIM3_Init+0xe8>)
 8001372:	2200      	movs	r2, #0
 8001374:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001376:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <MX_TIM3_Init+0xe8>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800137c:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <MX_TIM3_Init+0xe8>)
 800137e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001382:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <MX_TIM3_Init+0xe8>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <MX_TIM3_Init+0xe8>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001390:	4823      	ldr	r0, [pc, #140]	@ (8001420 <MX_TIM3_Init+0xe8>)
 8001392:	f003 fd2e 	bl	8004df2 <HAL_TIM_Base_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800139c:	f7ff fc12 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013aa:	4619      	mov	r1, r3
 80013ac:	481c      	ldr	r0, [pc, #112]	@ (8001420 <MX_TIM3_Init+0xe8>)
 80013ae:	f004 f909 	bl	80055c4 <HAL_TIM_ConfigClockSource>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80013b8:	f7ff fc04 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013bc:	4818      	ldr	r0, [pc, #96]	@ (8001420 <MX_TIM3_Init+0xe8>)
 80013be:	f003 fddf 	bl	8004f80 <HAL_TIM_PWM_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80013c8:	f7ff fbfc 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	4619      	mov	r1, r3
 80013da:	4811      	ldr	r0, [pc, #68]	@ (8001420 <MX_TIM3_Init+0xe8>)
 80013dc:	f004 fdfa 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80013e6:	f7ff fbed 	bl	8000bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ea:	2360      	movs	r3, #96	@ 0x60
 80013ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM3_Init+0xe8>)
 8001402:	f003 ffcb 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800140c:	f7ff fbda 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM3_Init+0xe8>)
 8001412:	f000 f8d1 	bl	80015b8 <HAL_TIM_MspPostInit>

}
 8001416:	bf00      	nop
 8001418:	3738      	adds	r7, #56	@ 0x38
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000024c 	.word	0x2000024c
 8001424:	40000400 	.word	0x40000400

08001428 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001448:	4a1d      	ldr	r2, [pc, #116]	@ (80014c0 <MX_TIM4_Init+0x98>)
 800144a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_TIM4_Init+0x94>)
 800144e:	224f      	movs	r2, #79	@ 0x4f
 8001450:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_TIM4_Init+0x94>)
 800145a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800145e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	@ (80014bc <MX_TIM4_Init+0x94>)
 800146e:	f003 fcc0 	bl	8004df2 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001478:	f7ff fba4 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	@ (80014bc <MX_TIM4_Init+0x94>)
 800148a:	f004 f89b 	bl	80055c4 <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001494:	f7ff fb96 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001498:	2320      	movs	r3, #32
 800149a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_TIM4_Init+0x94>)
 80014a6:	f004 fd95 	bl	8005fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f7ff fb88 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000298 	.word	0x20000298
 80014c0:	40000800 	.word	0x40000800

080014c4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014e4:	d128      	bne.n	8001538 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e6:	4b16      	ldr	r3, [pc, #88]	@ (8001540 <HAL_TIM_Encoder_MspInit+0x7c>)
 80014e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ea:	4a15      	ldr	r2, [pc, #84]	@ (8001540 <HAL_TIM_Encoder_MspInit+0x7c>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f2:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <HAL_TIM_Encoder_MspInit+0x7c>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001502:	4a0f      	ldr	r2, [pc, #60]	@ (8001540 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <HAL_TIM_Encoder_MspInit+0x7c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001516:	2303      	movs	r3, #3
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001526:	2301      	movs	r3, #1
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001534:	f001 fd38 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	@ 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a16      	ldr	r2, [pc, #88]	@ (80015ac <HAL_TIM_Base_MspInit+0x68>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10c      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	4a15      	ldr	r2, [pc, #84]	@ (80015b0 <HAL_TIM_Base_MspInit+0x6c>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6593      	str	r3, [r2, #88]	@ 0x58
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800156e:	e018      	b.n	80015a2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <HAL_TIM_Base_MspInit+0x70>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d113      	bne.n	80015a2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <HAL_TIM_Base_MspInit+0x6c>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800157e:	4a0c      	ldr	r2, [pc, #48]	@ (80015b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6593      	str	r3, [r2, #88]	@ 0x58
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_TIM_Base_MspInit+0x6c>)
 8001588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	201e      	movs	r0, #30
 8001598:	f001 fcdc 	bl	8002f54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800159c:	201e      	movs	r0, #30
 800159e:	f001 fcf5 	bl	8002f8c <HAL_NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40000400 	.word	0x40000400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40000800 	.word	0x40000800

080015b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a11      	ldr	r2, [pc, #68]	@ (800161c <HAL_TIM_MspPostInit+0x64>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d11c      	bne.n	8001614 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_TIM_MspPostInit+0x68>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4a10      	ldr	r2, [pc, #64]	@ (8001620 <HAL_TIM_MspPostInit+0x68>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001620 <HAL_TIM_MspPostInit+0x68>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f2:	2340      	movs	r3, #64	@ 0x40
 80015f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001602:	2302      	movs	r3, #2
 8001604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 030c 	add.w	r3, r7, #12
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f001 fcca 	bl	8002fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40000400 	.word	0x40000400
 8001620:	40021000 	.word	0x40021000

08001624 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001628:	4b14      	ldr	r3, [pc, #80]	@ (800167c <MX_USART1_UART_Init+0x58>)
 800162a:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <MX_USART1_UART_Init+0x5c>)
 800162c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <MX_USART1_UART_Init+0x58>)
 8001630:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_USART1_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <MX_USART1_UART_Init+0x58>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_USART1_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_USART1_UART_Init+0x58>)
 800164a:	220c      	movs	r2, #12
 800164c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164e:	4b0b      	ldr	r3, [pc, #44]	@ (800167c <MX_USART1_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_USART1_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800165a:	4b08      	ldr	r3, [pc, #32]	@ (800167c <MX_USART1_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001660:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_USART1_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001666:	4805      	ldr	r0, [pc, #20]	@ (800167c <MX_USART1_UART_Init+0x58>)
 8001668:	f004 fd5a 	bl	8006120 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001672:	f7ff faa7 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200002e4 	.word	0x200002e4
 8001680:	40013800 	.word	0x40013800

08001684 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 800168a:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <MX_USART2_UART_Init+0x5c>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USART2_UART_Init+0x58>)
 80016c8:	f004 fd2a 	bl	8006120 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016d2:	f7ff fa77 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000036c 	.word	0x2000036c
 80016e0:	40004400 	.word	0x40004400

080016e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0ae      	sub	sp, #184	@ 0xb8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	2288      	movs	r2, #136	@ 0x88
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f005 fc96 	bl	8007036 <memset>
  if(uartHandle->Instance==USART1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a43      	ldr	r2, [pc, #268]	@ (800181c <HAL_UART_MspInit+0x138>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d13d      	bne.n	8001790 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001714:	2301      	movs	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001718:	2300      	movs	r3, #0
 800171a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fe07 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800172c:	f7ff fa4a 	bl	8000bc4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001730:	4b3b      	ldr	r3, [pc, #236]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 8001732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001734:	4a3a      	ldr	r2, [pc, #232]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 8001736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173a:	6613      	str	r3, [r2, #96]	@ 0x60
 800173c:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 800173e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	4a34      	ldr	r2, [pc, #208]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001754:	4b32      	ldr	r3, [pc, #200]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001760:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001764:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001774:	2303      	movs	r3, #3
 8001776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800177a:	2307      	movs	r3, #7
 800177c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178a:	f001 fc0d 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800178e:	e040      	b.n	8001812 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <HAL_UART_MspInit+0x140>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d13b      	bne.n	8001812 <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800179a:	2302      	movs	r3, #2
 800179c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800179e:	2300      	movs	r3, #0
 80017a0:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 fdc4 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80017b2:	f7ff fa07 	bl	8000bc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d2:	4a13      	ldr	r2, [pc, #76]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <HAL_UART_MspInit+0x13c>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017e6:	230c      	movs	r3, #12
 80017e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f001 fbcb 	bl	8002fa8 <HAL_GPIO_Init>
}
 8001812:	bf00      	nop
 8001814:	37b8      	adds	r7, #184	@ 0xb8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40013800 	.word	0x40013800
 8001820:	40021000 	.word	0x40021000
 8001824:	40004400 	.word	0x40004400

08001828 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001860 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800182c:	f7ff fd1e 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <LoopForever+0x6>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	@ (8001868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <LoopForever+0xe>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	@ (8001874 <LoopForever+0x16>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001856:	f005 fc43 	bl	80070e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800185a:	f7ff f933 	bl	8000ac4 <main>

0800185e <LoopForever>:

LoopForever:
    b LoopForever
 800185e:	e7fe      	b.n	800185e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001860:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800186c:	08007f74 	.word	0x08007f74
  ldr r2, =_sbss
 8001870:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001874:	20000544 	.word	0x20000544

08001878 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC3_IRQHandler>
	...

0800187c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001886:	4b0c      	ldr	r3, [pc, #48]	@ (80018b8 <HAL_Init+0x3c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a0b      	ldr	r2, [pc, #44]	@ (80018b8 <HAL_Init+0x3c>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
 8001894:	f001 fb53 	bl	8002f3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001898:	200f      	movs	r0, #15
 800189a:	f7ff fb6b 	bl	8000f74 <HAL_InitTick>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	e001      	b.n	80018ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018aa:	f7ff fb3f 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018ae:	79fb      	ldrb	r3, [r7, #7]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40022000 	.word	0x40022000

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008
 80018e0:	200003f4 	.word	0x200003f4

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	200003f4 	.word	0x200003f4

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001916:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008

08001944 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	609a      	str	r2, [r3, #8]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3360      	adds	r3, #96	@ 0x60
 80019be:	461a      	mov	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <LL_ADC_SetOffset+0x44>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	4313      	orrs	r3, r2
 80019dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019e4:	bf00      	nop
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	03fff000 	.word	0x03fff000

080019f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3360      	adds	r3, #96	@ 0x60
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3360      	adds	r3, #96	@ 0x60
 8001a30:	461a      	mov	r2, r3
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a4a:	bf00      	nop
 8001a4c:	371c      	adds	r7, #28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3330      	adds	r3, #48	@ 0x30
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	0a1b      	lsrs	r3, r3, #8
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	4413      	add	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	211f      	movs	r1, #31
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	0e9b      	lsrs	r3, r3, #26
 8001ab4:	f003 011f 	and.w	r1, r3, #31
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b087      	sub	sp, #28
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3314      	adds	r3, #20
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0e5b      	lsrs	r3, r3, #25
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0d1b      	lsrs	r3, r3, #20
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2107      	movs	r1, #7
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0d1b      	lsrs	r3, r3, #20
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f003 0318 	and.w	r3, r3, #24
 8001b72:	4908      	ldr	r1, [pc, #32]	@ (8001b94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b74:	40d9      	lsrs	r1, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	400b      	ands	r3, r1
 8001b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	0007ffff 	.word	0x0007ffff

08001b98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001be0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6093      	str	r3, [r2, #8]
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c08:	d101      	bne.n	8001c0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c30:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c58:	d101      	bne.n	8001c5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e000      	b.n	8001c60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <LL_ADC_IsEnabled+0x18>
 8001c80:	2301      	movs	r3, #1
 8001c82:	e000      	b.n	8001c86 <LL_ADC_IsEnabled+0x1a>
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d101      	bne.n	8001caa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d101      	bne.n	8001cd0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e130      	b.n	8001f5c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7fe fcb1 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff67 	bl	8001bf4 <LL_ADC_IsDeepPowerDownEnabled>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff4d 	bl	8001bd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff82 	bl	8001c44 <LL_ADC_IsInternalRegulatorEnabled>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d115      	bne.n	8001d72 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff ff66 	bl	8001c1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d50:	4b84      	ldr	r3, [pc, #528]	@ (8001f64 <HAL_ADC_Init+0x284>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	099b      	lsrs	r3, r3, #6
 8001d56:	4a84      	ldr	r2, [pc, #528]	@ (8001f68 <HAL_ADC_Init+0x288>)
 8001d58:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5c:	099b      	lsrs	r3, r3, #6
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff64 	bl	8001c44 <LL_ADC_IsInternalRegulatorEnabled>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff ff75 	bl	8001c92 <LL_ADC_REG_IsConversionOngoing>
 8001da8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f040 80c9 	bne.w	8001f4a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 80c5 	bne.w	8001f4a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001dc8:	f043 0202 	orr.w	r2, r3, #2
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff49 	bl	8001c6c <LL_ADC_IsEnabled>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d115      	bne.n	8001e0c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de0:	4862      	ldr	r0, [pc, #392]	@ (8001f6c <HAL_ADC_Init+0x28c>)
 8001de2:	f7ff ff43 	bl	8001c6c <LL_ADC_IsEnabled>
 8001de6:	4604      	mov	r4, r0
 8001de8:	4861      	ldr	r0, [pc, #388]	@ (8001f70 <HAL_ADC_Init+0x290>)
 8001dea:	f7ff ff3f 	bl	8001c6c <LL_ADC_IsEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	431c      	orrs	r4, r3
 8001df2:	4860      	ldr	r0, [pc, #384]	@ (8001f74 <HAL_ADC_Init+0x294>)
 8001df4:	f7ff ff3a 	bl	8001c6c <LL_ADC_IsEnabled>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	4323      	orrs	r3, r4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4619      	mov	r1, r3
 8001e06:	485c      	ldr	r0, [pc, #368]	@ (8001f78 <HAL_ADC_Init+0x298>)
 8001e08:	f7ff fd9c 	bl	8001944 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	7e5b      	ldrb	r3, [r3, #25]
 8001e10:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e16:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e1c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e22:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d106      	bne.n	8001e48 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	045b      	lsls	r3, r3, #17
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d009      	beq.n	8001e64 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e54:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	4b44      	ldr	r3, [pc, #272]	@ (8001f7c <HAL_ADC_Init+0x29c>)
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6812      	ldr	r2, [r2, #0]
 8001e72:	69b9      	ldr	r1, [r7, #24]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff1b 	bl	8001cb8 <LL_ADC_INJ_IsConversionOngoing>
 8001e82:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d13d      	bne.n	8001f06 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d13a      	bne.n	8001f06 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e94:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e9c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001eac:	f023 0302 	bic.w	r3, r3, #2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	69b9      	ldr	r1, [r7, #24]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d118      	bne.n	8001ef6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001ece:	f023 0304 	bic.w	r3, r3, #4
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001eda:	4311      	orrs	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001ee0:	4311      	orrs	r1, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	611a      	str	r2, [r3, #16]
 8001ef4:	e007      	b.n	8001f06 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d10c      	bne.n	8001f28 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f14:	f023 010f 	bic.w	r1, r3, #15
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f26:	e007      	b.n	8001f38 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 020f 	bic.w	r2, r2, #15
 8001f36:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	f023 0303 	bic.w	r3, r3, #3
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f48:	e007      	b.n	8001f5a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3724      	adds	r7, #36	@ 0x24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	20000000 	.word	0x20000000
 8001f68:	053e2d63 	.word	0x053e2d63
 8001f6c:	50040000 	.word	0x50040000
 8001f70:	50040100 	.word	0x50040100
 8001f74:	50040200 	.word	0x50040200
 8001f78:	50040300 	.word	0x50040300
 8001f7c:	fff0c007 	.word	0xfff0c007

08001f80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	4882      	ldr	r0, [pc, #520]	@ (80021a8 <HAL_ADC_IRQHandler+0x228>)
 8001f9e:	f7ff fdfb 	bl	8001b98 <LL_ADC_GetMultimode>
 8001fa2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d017      	beq.n	8001fde <HAL_ADC_IRQHandler+0x5e>
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fe4d 	bl	8002c70 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x72>
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8083 	beq.w	8002104 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d07d      	beq.n	8002104 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002018:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fd16 	bl	8001a56 <LL_ADC_REG_IsTriggerSourceSWStart>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d062      	beq.n	80020f6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	@ (80021ac <HAL_ADC_IRQHandler+0x22c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d002      	beq.n	8002040 <HAL_ADC_IRQHandler+0xc0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e000      	b.n	8002042 <HAL_ADC_IRQHandler+0xc2>
 8002040:	4b5b      	ldr	r3, [pc, #364]	@ (80021b0 <HAL_ADC_IRQHandler+0x230>)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4293      	cmp	r3, r2
 8002048:	d008      	beq.n	800205c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d002      	beq.n	800205c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d104      	bne.n	8002066 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	623b      	str	r3, [r7, #32]
 8002064:	e00c      	b.n	8002080 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a50      	ldr	r2, [pc, #320]	@ (80021ac <HAL_ADC_IRQHandler+0x22c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d002      	beq.n	8002076 <HAL_ADC_IRQHandler+0xf6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	e000      	b.n	8002078 <HAL_ADC_IRQHandler+0xf8>
 8002076:	4b4e      	ldr	r3, [pc, #312]	@ (80021b0 <HAL_ADC_IRQHandler+0x230>)
 8002078:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d135      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d12e      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fdf8 	bl	8001c92 <LL_ADC_REG_IsConversionOngoing>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11a      	bne.n	80020de <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020c 	bic.w	r2, r2, #12
 80020b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d112      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	655a      	str	r2, [r3, #84]	@ 0x54
 80020dc:	e00b      	b.n	80020f6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f95c 	bl	80023b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	220c      	movs	r2, #12
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_ADC_IRQHandler+0x198>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 809f 	beq.w	8002262 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8099 	beq.w	8002262 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002140:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fcc1 	bl	8001ad4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002152:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fc7c 	bl	8001a56 <LL_ADC_REG_IsTriggerSourceSWStart>
 800215e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a11      	ldr	r2, [pc, #68]	@ (80021ac <HAL_ADC_IRQHandler+0x22c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d002      	beq.n	8002170 <HAL_ADC_IRQHandler+0x1f0>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e000      	b.n	8002172 <HAL_ADC_IRQHandler+0x1f2>
 8002170:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <HAL_ADC_IRQHandler+0x230>)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	4293      	cmp	r3, r2
 8002178:	d008      	beq.n	800218c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d002      	beq.n	800218c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b07      	cmp	r3, #7
 800218a:	d104      	bne.n	8002196 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	e013      	b.n	80021be <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_ADC_IRQHandler+0x22c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x234>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	e007      	b.n	80021b6 <HAL_ADC_IRQHandler+0x236>
 80021a6:	bf00      	nop
 80021a8:	50040300 	.word	0x50040300
 80021ac:	50040100 	.word	0x50040100
 80021b0:	50040000 	.word	0x50040000
 80021b4:	4b7d      	ldr	r3, [pc, #500]	@ (80023ac <HAL_ADC_IRQHandler+0x42c>)
 80021b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d047      	beq.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_ADC_IRQHandler+0x25e>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d03f      	beq.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d13a      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e8:	2b40      	cmp	r3, #64	@ 0x40
 80021ea:	d133      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d12e      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fd5c 	bl	8001cb8 <LL_ADC_INJ_IsConversionOngoing>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11a      	bne.n	800223c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002214:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d112      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
 800223a:	e00b      	b.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	f043 0210 	orr.w	r2, r3, #16
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fce3 	bl	8002c20 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2260      	movs	r2, #96	@ 0x60
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d011      	beq.n	8002290 <HAL_ADC_IRQHandler+0x310>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8a0 	bl	80023c8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2280      	movs	r2, #128	@ 0x80
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x340>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fcc9 	bl	8002c48 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x370>
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fcbb 	bl	8002c5c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d036      	beq.n	8002368 <HAL_ADC_IRQHandler+0x3e8>
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d031      	beq.n	8002368 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800230c:	2301      	movs	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	e014      	b.n	800233c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002318:	4825      	ldr	r0, [pc, #148]	@ (80023b0 <HAL_ADC_IRQHandler+0x430>)
 800231a:	f7ff fc4b 	bl	8001bb4 <LL_ADC_GetMultiDMATransfer>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	@ 0x24
 8002328:	e008      	b.n	800233c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002338:	2301      	movs	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002346:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	f043 0202 	orr.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f83e 	bl	80023dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d018      	beq.n	80023a4 <HAL_ADC_IRQHandler+0x424>
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002380:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	f043 0208 	orr.w	r2, r3, #8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800239c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fc48 	bl	8002c34 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	@ 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	50040000 	.word	0x50040000
 80023b0:	50040300 	.word	0x50040300

080023b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0b6      	sub	sp, #216	@ 0xd8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x22>
 800240e:	2302      	movs	r3, #2
 8002410:	e3c9      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x7b6>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fc37 	bl	8001c92 <LL_ADC_REG_IsConversionOngoing>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 83aa 	bne.w	8002b80 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b05      	cmp	r3, #5
 800243a:	d824      	bhi.n	8002486 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	3b02      	subs	r3, #2
 8002442:	2b03      	cmp	r3, #3
 8002444:	d81b      	bhi.n	800247e <HAL_ADC_ConfigChannel+0x8e>
 8002446:	a201      	add	r2, pc, #4	@ (adr r2, 800244c <HAL_ADC_ConfigChannel+0x5c>)
 8002448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244c:	0800245d 	.word	0x0800245d
 8002450:	08002465 	.word	0x08002465
 8002454:	0800246d 	.word	0x0800246d
 8002458:	08002475 	.word	0x08002475
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800245c:	230c      	movs	r3, #12
 800245e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002462:	e010      	b.n	8002486 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002464:	2312      	movs	r3, #18
 8002466:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800246a:	e00c      	b.n	8002486 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800246c:	2318      	movs	r3, #24
 800246e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002472:	e008      	b.n	8002486 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800247e:	2306      	movs	r3, #6
 8002480:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002484:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002494:	f7ff faf2 	bl	8001a7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fbf8 	bl	8001c92 <LL_ADC_REG_IsConversionOngoing>
 80024a2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fc04 	bl	8001cb8 <LL_ADC_INJ_IsConversionOngoing>
 80024b0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f040 81a4 	bne.w	8002806 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 819f 	bne.w	8002806 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	461a      	mov	r2, r3
 80024d6:	f7ff fb10 	bl	8001afa <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d00a      	beq.n	8002512 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6919      	ldr	r1, [r3, #16]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800250c:	f7ff fa4e 	bl	80019ac <LL_ADC_SetOffset>
 8002510:	e179      	b.n	8002806 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fa6b 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10a      	bne.n	800253e <HAL_ADC_ConfigChannel+0x14e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fa60 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	e01e      	b.n	800257c <HAL_ADC_ConfigChannel+0x18c>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fa55 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800255c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002560:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002564:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e004      	b.n	800257a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002570:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x1a4>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	0e9b      	lsrs	r3, r3, #26
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	e018      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1d6>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80025a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80025b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e004      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80025bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d106      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fa24 	bl	8001a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fa08 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x214>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff f9fd 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 021f 	and.w	r2, r3, #31
 8002602:	e01e      	b.n	8002642 <HAL_ADC_ConfigChannel+0x252>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f9f2 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002616:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800261a:	fa93 f3a3 	rbit	r3, r3
 800261e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002622:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002626:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800262a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002632:	2320      	movs	r3, #32
 8002634:	e004      	b.n	8002640 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_ADC_ConfigChannel+0x26a>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	e018      	b.n	800268c <HAL_ADC_ConfigChannel+0x29c>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002666:	fa93 f3a3 	rbit	r3, r3
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800266e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002672:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002676:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800267e:	2320      	movs	r3, #32
 8002680:	e004      	b.n	800268c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002682:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800268c:	429a      	cmp	r2, r3
 800268e:	d106      	bne.n	800269e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f9c1 	bl	8001a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2102      	movs	r1, #2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff f9a5 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x2da>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2102      	movs	r1, #2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f99a 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	e01e      	b.n	8002708 <HAL_ADC_ConfigChannel+0x318>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2102      	movs	r1, #2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f98f 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026e0:	fa93 f3a3 	rbit	r3, r3
 80026e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80026e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80026f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80026f8:	2320      	movs	r3, #32
 80026fa:	e004      	b.n	8002706 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80026fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x330>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0e9b      	lsrs	r3, r3, #26
 800271a:	f003 031f 	and.w	r3, r3, #31
 800271e:	e014      	b.n	800274a <HAL_ADC_ConfigChannel+0x35a>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800272e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002734:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e004      	b.n	800274a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002740:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800274a:	429a      	cmp	r2, r3
 800274c:	d106      	bne.n	800275c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	2102      	movs	r1, #2
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f962 	bl	8001a20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2103      	movs	r1, #3
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f946 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002768:	4603      	mov	r3, r0
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x398>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2103      	movs	r1, #3
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f93b 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	0e9b      	lsrs	r3, r3, #26
 8002782:	f003 021f 	and.w	r2, r3, #31
 8002786:	e017      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x3c8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2103      	movs	r1, #3
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff f930 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80027a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027a2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80027a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80027ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x3e0>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	0e9b      	lsrs	r3, r3, #26
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	e011      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x404>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80027de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80027e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e003      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80027ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d106      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2200      	movs	r2, #0
 80027fe:	2103      	movs	r1, #3
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff f90d 	bl	8001a20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fa2e 	bl	8001c6c <LL_ADC_IsEnabled>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 8140 	bne.w	8002a98 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6819      	ldr	r1, [r3, #0]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	461a      	mov	r2, r3
 8002826:	f7ff f993 	bl	8001b50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	4a8f      	ldr	r2, [pc, #572]	@ (8002a6c <HAL_ADC_ConfigChannel+0x67c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	f040 8131 	bne.w	8002a98 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10b      	bne.n	800285e <HAL_ADC_ConfigChannel+0x46e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0e9b      	lsrs	r3, r3, #26
 800284c:	3301      	adds	r3, #1
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2b09      	cmp	r3, #9
 8002854:	bf94      	ite	ls
 8002856:	2301      	movls	r3, #1
 8002858:	2300      	movhi	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	e019      	b.n	8002892 <HAL_ADC_ConfigChannel+0x4a2>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002864:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002866:	fa93 f3a3 	rbit	r3, r3
 800286a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800286c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002876:	2320      	movs	r3, #32
 8002878:	e003      	b.n	8002882 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800287a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	b2db      	uxtb	r3, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	2b09      	cmp	r3, #9
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002892:	2b00      	cmp	r3, #0
 8002894:	d079      	beq.n	800298a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x4c2>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	069b      	lsls	r3, r3, #26
 80028ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028b0:	e015      	b.n	80028de <HAL_ADC_ConfigChannel+0x4ee>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80028c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028c2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80028c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80028ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	069b      	lsls	r3, r3, #26
 80028da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x50e>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0e9b      	lsrs	r3, r3, #26
 80028f0:	3301      	adds	r3, #1
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	e017      	b.n	800292e <HAL_ADC_ConfigChannel+0x53e>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800290c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800290e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e003      	b.n	8002922 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800291a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	ea42 0103 	orr.w	r1, r2, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x564>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0e9b      	lsrs	r3, r3, #26
 8002944:	3301      	adds	r3, #1
 8002946:	f003 021f 	and.w	r2, r3, #31
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	051b      	lsls	r3, r3, #20
 8002952:	e018      	b.n	8002986 <HAL_ADC_ConfigChannel+0x596>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e003      	b.n	8002978 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3301      	adds	r3, #1
 800297a:	f003 021f 	and.w	r2, r3, #31
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002986:	430b      	orrs	r3, r1
 8002988:	e081      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002992:	2b00      	cmp	r3, #0
 8002994:	d107      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x5b6>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0e9b      	lsrs	r3, r3, #26
 800299c:	3301      	adds	r3, #1
 800299e:	069b      	lsls	r3, r3, #26
 80029a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029a4:	e015      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x5e2>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e003      	b.n	80029ca <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80029c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	3301      	adds	r3, #1
 80029cc:	069b      	lsls	r3, r3, #26
 80029ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x602>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	0e9b      	lsrs	r3, r3, #26
 80029e4:	3301      	adds	r3, #1
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	e017      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x632>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	61bb      	str	r3, [r7, #24]
  return result;
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e003      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f003 031f 	and.w	r3, r3, #31
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a22:	ea42 0103 	orr.w	r1, r2, r3
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x65e>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	3301      	adds	r3, #1
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	3b1e      	subs	r3, #30
 8002a46:	051b      	lsls	r3, r3, #20
 8002a48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a4c:	e01e      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x69c>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	60fb      	str	r3, [r7, #12]
  return result;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d104      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e006      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x688>
 8002a6a:	bf00      	nop
 8002a6c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f003 021f 	and.w	r2, r3, #31
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	3b1e      	subs	r3, #30
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7ff f831 	bl	8001afa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d07a      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa4:	4843      	ldr	r0, [pc, #268]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002aa6:	f7fe ff73 	bl	8001990 <LL_ADC_GetCommonPathInternalCh>
 8002aaa:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a41      	ldr	r2, [pc, #260]	@ (8002bb8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d12c      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002abc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d126      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7cc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x6e8>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d15d      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002adc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4834      	ldr	r0, [pc, #208]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ae4:	f7fe ff41 	bl	800196a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ae8:	4b36      	ldr	r3, [pc, #216]	@ (8002bc4 <HAL_ADC_ConfigChannel+0x7d4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	4a36      	ldr	r2, [pc, #216]	@ (8002bc8 <HAL_ADC_ConfigChannel+0x7d8>)
 8002af0:	fba2 2303 	umull	r2, r3, r2, r3
 8002af4:	099b      	lsrs	r3, r3, #6
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b02:	e002      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f9      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b10:	e040      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2d      	ldr	r2, [pc, #180]	@ (8002bcc <HAL_ADC_ConfigChannel+0x7dc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d118      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d112      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a23      	ldr	r2, [pc, #140]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7cc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d004      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0x74c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d12d      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b44:	4619      	mov	r1, r3
 8002b46:	481b      	ldr	r0, [pc, #108]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b48:	f7fe ff0f 	bl	800196a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b4c:	e024      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1f      	ldr	r2, [pc, #124]	@ (8002bd0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d120      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11a      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <HAL_ADC_ConfigChannel+0x7cc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d115      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b76:	4619      	mov	r1, r3
 8002b78:	480e      	ldr	r0, [pc, #56]	@ (8002bb4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b7a:	f7fe fef6 	bl	800196a <LL_ADC_SetCommonPathInternalCh>
 8002b7e:	e00c      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b92:	e002      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b94:	bf00      	nop
 8002b96:	e000      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ba2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	37d8      	adds	r7, #216	@ 0xd8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	80080000 	.word	0x80080000
 8002bb4:	50040300 	.word	0x50040300
 8002bb8:	c7520000 	.word	0xc7520000
 8002bbc:	50040000 	.word	0x50040000
 8002bc0:	50040200 	.word	0x50040200
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	053e2d63 	.word	0x053e2d63
 8002bcc:	cb840000 	.word	0xcb840000
 8002bd0:	80000001 	.word	0x80000001

08002bd4 <LL_ADC_IsEnabled>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <LL_ADC_IsEnabled+0x18>
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <LL_ADC_IsEnabled+0x1a>
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <LL_ADC_REG_IsConversionOngoing>:
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d101      	bne.n	8002c12 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b09f      	sub	sp, #124	@ 0x7c
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e093      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002caa:	2300      	movs	r3, #0
 8002cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a47      	ldr	r2, [pc, #284]	@ (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d102      	bne.n	8002cc2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002cbc:	4b46      	ldr	r3, [pc, #280]	@ (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cbe:	60bb      	str	r3, [r7, #8]
 8002cc0:	e001      	b.n	8002cc6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	f043 0220 	orr.w	r2, r3, #32
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e072      	b.n	8002dca <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff87 	bl	8002bfa <LL_ADC_REG_IsConversionOngoing>
 8002cec:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff81 	bl	8002bfa <LL_ADC_REG_IsConversionOngoing>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d154      	bne.n	8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d151      	bne.n	8002da8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d04:	4b35      	ldr	r3, [pc, #212]	@ (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002d06:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d02c      	beq.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d22:	035b      	lsls	r3, r3, #13
 8002d24:	430b      	orrs	r3, r1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d2c:	4829      	ldr	r0, [pc, #164]	@ (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d2e:	f7ff ff51 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d32:	4604      	mov	r4, r0
 8002d34:	4828      	ldr	r0, [pc, #160]	@ (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d36:	f7ff ff4d 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	431c      	orrs	r4, r3
 8002d3e:	4828      	ldr	r0, [pc, #160]	@ (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d40:	f7ff ff48 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4323      	orrs	r3, r4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d137      	bne.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d54:	f023 030f 	bic.w	r3, r3, #15
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	6811      	ldr	r1, [r2, #0]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	6892      	ldr	r2, [r2, #8]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	431a      	orrs	r2, r3
 8002d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d66:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	e028      	b.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d74:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d76:	4817      	ldr	r0, [pc, #92]	@ (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d78:	f7ff ff2c 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d7c:	4604      	mov	r4, r0
 8002d7e:	4816      	ldr	r0, [pc, #88]	@ (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d80:	f7ff ff28 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d84:	4603      	mov	r3, r0
 8002d86:	431c      	orrs	r4, r3
 8002d88:	4815      	ldr	r0, [pc, #84]	@ (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d8a:	f7ff ff23 	bl	8002bd4 <LL_ADC_IsEnabled>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4323      	orrs	r3, r4
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d112      	bne.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d9e:	f023 030f 	bic.w	r3, r3, #15
 8002da2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002da4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002da6:	e009      	b.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002dba:	e000      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dbc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dc6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	377c      	adds	r7, #124	@ 0x7c
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	50040000 	.word	0x50040000
 8002dd8:	50040100 	.word	0x50040100
 8002ddc:	50040300 	.word	0x50040300
 8002de0:	50040200 	.word	0x50040200

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e16:	4a04      	ldr	r2, [pc, #16]	@ (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	@ (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	@ (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	@ (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	@ 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	@ 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff ff4c 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f66:	f7ff ff61 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002f6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	6978      	ldr	r0, [r7, #20]
 8002f72:	f7ff ffb1 	bl	8002ed8 <NVIC_EncodePriority>
 8002f76:	4602      	mov	r2, r0
 8002f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff80 	bl	8002e84 <__NVIC_SetPriority>
}
 8002f84:	bf00      	nop
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff ff54 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb6:	e17f      	b.n	80032b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8171 	beq.w	80032b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d005      	beq.n	8002fe8 <HAL_GPIO_Init+0x40>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d130      	bne.n	800304a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800301e:	2201      	movs	r2, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	f003 0201 	and.w	r2, r3, #1
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b03      	cmp	r3, #3
 8003054:	d118      	bne.n	8003088 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800305c:	2201      	movs	r2, #1
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	f003 0201 	and.w	r2, r3, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b03      	cmp	r3, #3
 8003092:	d017      	beq.n	80030c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d123      	bne.n	8003118 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4013      	ands	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	08da      	lsrs	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3208      	adds	r2, #8
 8003112:	6939      	ldr	r1, [r7, #16]
 8003114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2203      	movs	r2, #3
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 0203 	and.w	r2, r3, #3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	693a      	ldr	r2, [r7, #16]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80ac 	beq.w	80032b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315a:	4b5f      	ldr	r3, [pc, #380]	@ (80032d8 <HAL_GPIO_Init+0x330>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315e:	4a5e      	ldr	r2, [pc, #376]	@ (80032d8 <HAL_GPIO_Init+0x330>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6613      	str	r3, [r2, #96]	@ 0x60
 8003166:	4b5c      	ldr	r3, [pc, #368]	@ (80032d8 <HAL_GPIO_Init+0x330>)
 8003168:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003172:	4a5a      	ldr	r2, [pc, #360]	@ (80032dc <HAL_GPIO_Init+0x334>)
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800319c:	d025      	beq.n	80031ea <HAL_GPIO_Init+0x242>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4f      	ldr	r2, [pc, #316]	@ (80032e0 <HAL_GPIO_Init+0x338>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01f      	beq.n	80031e6 <HAL_GPIO_Init+0x23e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4e      	ldr	r2, [pc, #312]	@ (80032e4 <HAL_GPIO_Init+0x33c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d019      	beq.n	80031e2 <HAL_GPIO_Init+0x23a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4d      	ldr	r2, [pc, #308]	@ (80032e8 <HAL_GPIO_Init+0x340>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_GPIO_Init+0x236>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4c      	ldr	r2, [pc, #304]	@ (80032ec <HAL_GPIO_Init+0x344>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00d      	beq.n	80031da <HAL_GPIO_Init+0x232>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4b      	ldr	r2, [pc, #300]	@ (80032f0 <HAL_GPIO_Init+0x348>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <HAL_GPIO_Init+0x22e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4a      	ldr	r2, [pc, #296]	@ (80032f4 <HAL_GPIO_Init+0x34c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_GPIO_Init+0x22a>
 80031ce:	2306      	movs	r3, #6
 80031d0:	e00c      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031d2:	2307      	movs	r3, #7
 80031d4:	e00a      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031d6:	2305      	movs	r3, #5
 80031d8:	e008      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031da:	2304      	movs	r3, #4
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031de:	2303      	movs	r3, #3
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x244>
 80031ea:	2300      	movs	r3, #0
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031fc:	4937      	ldr	r1, [pc, #220]	@ (80032dc <HAL_GPIO_Init+0x334>)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800320a:	4b3b      	ldr	r3, [pc, #236]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43db      	mvns	r3, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4013      	ands	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800322e:	4a32      	ldr	r2, [pc, #200]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003234:	4b30      	ldr	r3, [pc, #192]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003258:	4a27      	ldr	r2, [pc, #156]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800325e:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003282:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ac:	4a12      	ldr	r2, [pc, #72]	@ (80032f8 <HAL_GPIO_Init+0x350>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3301      	adds	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	fa22 f303 	lsr.w	r3, r2, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f47f ae78 	bne.w	8002fb8 <HAL_GPIO_Init+0x10>
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010000 	.word	0x40010000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	48000800 	.word	0x48000800
 80032e8:	48000c00 	.word	0x48000c00
 80032ec:	48001000 	.word	0x48001000
 80032f0:	48001400 	.word	0x48001400
 80032f4:	48001800 	.word	0x48001800
 80032f8:	40010400 	.word	0x40010400

080032fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	4013      	ands	r3, r2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d002      	beq.n	800331a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e001      	b.n	800331e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003348:	e002      	b.n	8003350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003366:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003368:	695a      	ldr	r2, [r3, #20]
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	4013      	ands	r3, r2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003372:	4a05      	ldr	r2, [pc, #20]	@ (8003388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f806 	bl	800338c <HAL_GPIO_EXTI_Callback>
  }
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	40010400 	.word	0x40010400

0800338c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e08d      	b.n	80034d0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7fd faed 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2224      	movs	r2, #36	@ 0x24
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003402:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d107      	bne.n	800341c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	e006      	b.n	800342a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003428:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d108      	bne.n	8003444 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	e007      	b.n	8003454 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003452:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003466:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003476:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	69d9      	ldr	r1, [r3, #28]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1a      	ldr	r2, [r3, #32]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d138      	bne.n	8003560 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e032      	b.n	8003562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	@ 0x24
 8003508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800352a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6819      	ldr	r1, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	e000      	b.n	8003562 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003560:	2302      	movs	r3, #2
  }
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800356e:	b480      	push	{r7}
 8003570:	b085      	sub	sp, #20
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b20      	cmp	r3, #32
 8003582:	d139      	bne.n	80035f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800358e:	2302      	movs	r3, #2
 8003590:	e033      	b.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2224      	movs	r2, #36	@ 0x24
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800360c:	4b04      	ldr	r3, [pc, #16]	@ (8003620 <HAL_PWREx_GetVoltageRange+0x18>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40007000 	.word	0x40007000

08003624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003632:	d130      	bne.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003634:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800363c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003640:	d038      	beq.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800364a:	4a1e      	ldr	r2, [pc, #120]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800364c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003650:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003652:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2232      	movs	r2, #50	@ 0x32
 8003658:	fb02 f303 	mul.w	r3, r2, r3
 800365c:	4a1b      	ldr	r2, [pc, #108]	@ (80036cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	0c9b      	lsrs	r3, r3, #18
 8003664:	3301      	adds	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003668:	e002      	b.n	8003670 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3b01      	subs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367c:	d102      	bne.n	8003684 <HAL_PWREx_ControlVoltageScaling+0x60>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f2      	bne.n	800366a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003684:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003690:	d110      	bne.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e00f      	b.n	80036b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003696:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a2:	d007      	beq.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036a4:	4b07      	ldr	r3, [pc, #28]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036ac:	4a05      	ldr	r2, [pc, #20]	@ (80036c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	40007000 	.word	0x40007000
 80036c8:	20000000 	.word	0x20000000
 80036cc:	431bde83 	.word	0x431bde83

080036d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e3ca      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e2:	4b97      	ldr	r3, [pc, #604]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036ec:	4b94      	ldr	r3, [pc, #592]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0310 	and.w	r3, r3, #16
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80e4 	beq.w	80038cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_RCC_OscConfig+0x4a>
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b0c      	cmp	r3, #12
 800370e:	f040 808b 	bne.w	8003828 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b01      	cmp	r3, #1
 8003716:	f040 8087 	bne.w	8003828 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800371a:	4b89      	ldr	r3, [pc, #548]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e3a2      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1a      	ldr	r2, [r3, #32]
 8003736:	4b82      	ldr	r3, [pc, #520]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d004      	beq.n	800374c <HAL_RCC_OscConfig+0x7c>
 8003742:	4b7f      	ldr	r3, [pc, #508]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800374a:	e005      	b.n	8003758 <HAL_RCC_OscConfig+0x88>
 800374c:	4b7c      	ldr	r3, [pc, #496]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800374e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003752:	091b      	lsrs	r3, r3, #4
 8003754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003758:	4293      	cmp	r3, r2
 800375a:	d223      	bcs.n	80037a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd87 	bl	8004274 <RCC_SetFlashLatencyFromMSIRange>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e383      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003770:	4b73      	ldr	r3, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a72      	ldr	r2, [pc, #456]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003776:	f043 0308 	orr.w	r3, r3, #8
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	4b70      	ldr	r3, [pc, #448]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	496d      	ldr	r1, [pc, #436]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800378a:	4313      	orrs	r3, r2
 800378c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800378e:	4b6c      	ldr	r3, [pc, #432]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	4968      	ldr	r1, [pc, #416]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
 80037a2:	e025      	b.n	80037f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a4:	4b66      	ldr	r3, [pc, #408]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a65      	ldr	r2, [pc, #404]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037aa:	f043 0308 	orr.w	r3, r3, #8
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4960      	ldr	r1, [pc, #384]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	495b      	ldr	r1, [pc, #364]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d109      	bne.n	80037f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f000 fd47 	bl	8004274 <RCC_SetFlashLatencyFromMSIRange>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e343      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f0:	f000 fc4a 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b52      	ldr	r3, [pc, #328]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	091b      	lsrs	r3, r3, #4
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	4950      	ldr	r1, [pc, #320]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	4a4e      	ldr	r2, [pc, #312]	@ (8003948 <HAL_RCC_OscConfig+0x278>)
 800380e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003810:	4b4e      	ldr	r3, [pc, #312]	@ (800394c <HAL_RCC_OscConfig+0x27c>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fd fbad 	bl	8000f74 <HAL_InitTick>
 800381a:	4603      	mov	r3, r0
 800381c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d052      	beq.n	80038ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	e327      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d032      	beq.n	8003896 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003830:	4b43      	ldr	r3, [pc, #268]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a42      	ldr	r2, [pc, #264]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800383c:	f7fe f852 	bl	80018e4 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003844:	f7fe f84e 	bl	80018e4 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e310      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003856:	4b3a      	ldr	r3, [pc, #232]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003862:	4b37      	ldr	r3, [pc, #220]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a36      	ldr	r2, [pc, #216]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003868:	f043 0308 	orr.w	r3, r3, #8
 800386c:	6013      	str	r3, [r2, #0]
 800386e:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	4931      	ldr	r1, [pc, #196]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800387c:	4313      	orrs	r3, r2
 800387e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003880:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	492c      	ldr	r1, [pc, #176]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
 8003894:	e01a      	b.n	80038cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003896:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a29      	ldr	r2, [pc, #164]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038a2:	f7fe f81f 	bl	80018e4 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038aa:	f7fe f81b 	bl	80018e4 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e2dd      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038bc:	4b20      	ldr	r3, [pc, #128]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x1da>
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d074      	beq.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d005      	beq.n	80038ea <HAL_RCC_OscConfig+0x21a>
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d10e      	bne.n	8003902 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	d10b      	bne.n	8003902 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ea:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d064      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d160      	bne.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e2ba      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390a:	d106      	bne.n	800391a <HAL_RCC_OscConfig+0x24a>
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0b      	ldr	r2, [pc, #44]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	e026      	b.n	8003968 <HAL_RCC_OscConfig+0x298>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003922:	d115      	bne.n	8003950 <HAL_RCC_OscConfig+0x280>
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 800392a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b03      	ldr	r3, [pc, #12]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a02      	ldr	r2, [pc, #8]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	e014      	b.n	8003968 <HAL_RCC_OscConfig+0x298>
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000
 8003944:	08007ee8 	.word	0x08007ee8
 8003948:	20000000 	.word	0x20000000
 800394c:	20000004 	.word	0x20000004
 8003950:	4ba0      	ldr	r3, [pc, #640]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a9f      	ldr	r2, [pc, #636]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b9d      	ldr	r3, [pc, #628]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a9c      	ldr	r2, [pc, #624]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d013      	beq.n	8003998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003970:	f7fd ffb8 	bl	80018e4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003978:	f7fd ffb4 	bl	80018e4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b64      	cmp	r3, #100	@ 0x64
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e276      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800398a:	4b92      	ldr	r3, [pc, #584]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0f0      	beq.n	8003978 <HAL_RCC_OscConfig+0x2a8>
 8003996:	e014      	b.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd ffa4 	bl	80018e4 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a0:	f7fd ffa0 	bl	80018e4 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b64      	cmp	r3, #100	@ 0x64
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e262      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039b2:	4b88      	ldr	r3, [pc, #544]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x2d0>
 80039be:	e000      	b.n	80039c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d060      	beq.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d005      	beq.n	80039e0 <HAL_RCC_OscConfig+0x310>
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d119      	bne.n	8003a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d116      	bne.n	8003a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e0:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_RCC_OscConfig+0x328>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e23f      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039f8:	4b76      	ldr	r3, [pc, #472]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	061b      	lsls	r3, r3, #24
 8003a06:	4973      	ldr	r1, [pc, #460]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0c:	e040      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d023      	beq.n	8003a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a16:	4b6f      	ldr	r3, [pc, #444]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd ff5f 	bl	80018e4 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd ff5b 	bl	80018e4 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e21d      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a3c:	4b65      	ldr	r3, [pc, #404]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b62      	ldr	r3, [pc, #392]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	061b      	lsls	r3, r3, #24
 8003a56:	495f      	ldr	r1, [pc, #380]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
 8003a5c:	e018      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd ff3b 	bl	80018e4 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd ff37 	bl	80018e4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1f9      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a84:	4b53      	ldr	r3, [pc, #332]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f0      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d03c      	beq.n	8003b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01c      	beq.n	8003ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fd ff16 	bl	80018e4 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003abc:	f7fd ff12 	bl	80018e4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1d4      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ace:	4b41      	ldr	r3, [pc, #260]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ef      	beq.n	8003abc <HAL_RCC_OscConfig+0x3ec>
 8003adc:	e01b      	b.n	8003b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ade:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aee:	f7fd fef9 	bl	80018e4 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af6:	f7fd fef5 	bl	80018e4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1b7      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b08:	4b32      	ldr	r3, [pc, #200]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1ef      	bne.n	8003af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 80a6 	beq.w	8003c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10d      	bne.n	8003b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b38:	4a26      	ldr	r2, [pc, #152]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b40:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b50:	4b21      	ldr	r3, [pc, #132]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d118      	bne.n	8003b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b68:	f7fd febc 	bl	80018e4 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b70:	f7fd feb8 	bl	80018e4 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e17a      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <HAL_RCC_OscConfig+0x508>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d108      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x4d8>
 8003b96:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ba6:	e029      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d115      	bne.n	8003bdc <HAL_RCC_OscConfig+0x50c>
 8003bb0:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	4a07      	ldr	r2, [pc, #28]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc6:	4a03      	ldr	r2, [pc, #12]	@ (8003bd4 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bd0:	e014      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	4a9b      	ldr	r2, [pc, #620]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003be4:	f023 0301 	bic.w	r3, r3, #1
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bec:	4b98      	ldr	r3, [pc, #608]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	4a97      	ldr	r2, [pc, #604]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fd fe6e 	bl	80018e4 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7fd fe6a 	bl	80018e4 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e12a      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c22:	4b8b      	ldr	r3, [pc, #556]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ed      	beq.n	8003c0c <HAL_RCC_OscConfig+0x53c>
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c32:	f7fd fe57 	bl	80018e4 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c38:	e00a      	b.n	8003c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c3a:	f7fd fe53 	bl	80018e4 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e113      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c50:	4b7f      	ldr	r3, [pc, #508]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1ed      	bne.n	8003c3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c5e:	7ffb      	ldrb	r3, [r7, #31]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c64:	4b7a      	ldr	r3, [pc, #488]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c68:	4a79      	ldr	r2, [pc, #484]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80fe 	beq.w	8003e76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	f040 80d0 	bne.w	8003e24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003c84:	4b72      	ldr	r3, [pc, #456]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d130      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d127      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d11f      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cc4:	2a07      	cmp	r2, #7
 8003cc6:	bf14      	ite	ne
 8003cc8:	2201      	movne	r2, #1
 8003cca:	2200      	moveq	r2, #0
 8003ccc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	085b      	lsrs	r3, r3, #1
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d06e      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b0c      	cmp	r3, #12
 8003cfe:	d069      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d00:	4b53      	ldr	r3, [pc, #332]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d0c:	4b50      	ldr	r3, [pc, #320]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0ad      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a4b      	ldr	r2, [pc, #300]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d28:	f7fd fddc 	bl	80018e4 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fd fdd8 	bl	80018e4 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e09a      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d42:	4b43      	ldr	r3, [pc, #268]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4e:	4b40      	ldr	r3, [pc, #256]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	4b40      	ldr	r3, [pc, #256]	@ (8003e54 <HAL_RCC_OscConfig+0x784>)
 8003d54:	4013      	ands	r3, r2
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003d5e:	3a01      	subs	r2, #1
 8003d60:	0112      	lsls	r2, r2, #4
 8003d62:	4311      	orrs	r1, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d68:	0212      	lsls	r2, r2, #8
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d70:	0852      	lsrs	r2, r2, #1
 8003d72:	3a01      	subs	r2, #1
 8003d74:	0552      	lsls	r2, r2, #21
 8003d76:	4311      	orrs	r1, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003d7c:	0852      	lsrs	r2, r2, #1
 8003d7e:	3a01      	subs	r2, #1
 8003d80:	0652      	lsls	r2, r2, #25
 8003d82:	4311      	orrs	r1, r2
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d88:	0912      	lsrs	r2, r2, #4
 8003d8a:	0452      	lsls	r2, r2, #17
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	4930      	ldr	r1, [pc, #192]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d94:	4b2e      	ldr	r3, [pc, #184]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003da0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dac:	f7fd fd9a 	bl	80018e4 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db4:	f7fd fd96 	bl	80018e4 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e058      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc6:	4b22      	ldr	r3, [pc, #136]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dd2:	e050      	b.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04f      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d148      	bne.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003de4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a19      	ldr	r2, [pc, #100]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df0:	4b17      	ldr	r3, [pc, #92]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a16      	ldr	r2, [pc, #88]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dfc:	f7fd fd72 	bl	80018e4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fd fd6e 	bl	80018e4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e030      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e16:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x734>
 8003e22:	e028      	b.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b0c      	cmp	r3, #12
 8003e28:	d023      	beq.n	8003e72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2a:	4b09      	ldr	r3, [pc, #36]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a08      	ldr	r2, [pc, #32]	@ (8003e50 <HAL_RCC_OscConfig+0x780>)
 8003e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fd fd55 	bl	80018e4 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e3e:	f7fd fd51 	bl	80018e4 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d905      	bls.n	8003e58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e013      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
 8003e50:	40021000 	.word	0x40021000
 8003e54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e58:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_RCC_OscConfig+0x7b0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ec      	bne.n	8003e3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003e64:	4b06      	ldr	r3, [pc, #24]	@ (8003e80 <HAL_RCC_OscConfig+0x7b0>)
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	4905      	ldr	r1, [pc, #20]	@ (8003e80 <HAL_RCC_OscConfig+0x7b0>)
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <HAL_RCC_OscConfig+0x7b4>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60cb      	str	r3, [r1, #12]
 8003e70:	e001      	b.n	8003e76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	feeefffc 	.word	0xfeeefffc

08003e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0e7      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e9c:	4b75      	ldr	r3, [pc, #468]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d910      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eaa:	4b72      	ldr	r3, [pc, #456]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 0207 	bic.w	r2, r3, #7
 8003eb2:	4970      	ldr	r1, [pc, #448]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b6e      	ldr	r3, [pc, #440]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0cf      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d010      	beq.n	8003efa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	4b66      	ldr	r3, [pc, #408]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d908      	bls.n	8003efa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee8:	4b63      	ldr	r3, [pc, #396]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	4960      	ldr	r1, [pc, #384]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d04c      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d121      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e0a6      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	4b54      	ldr	r3, [pc, #336]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d115      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e09a      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e08e      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e086      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b46      	ldr	r3, [pc, #280]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4943      	ldr	r1, [pc, #268]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f70:	f7fd fcb8 	bl	80018e4 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fd fcb4 	bl	80018e4 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e06e      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d010      	beq.n	8003fce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	4b31      	ldr	r3, [pc, #196]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d208      	bcs.n	8003fce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	492b      	ldr	r1, [pc, #172]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d210      	bcs.n	8003ffe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fdc:	4b25      	ldr	r3, [pc, #148]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 0207 	bic.w	r2, r3, #7
 8003fe4:	4923      	ldr	r1, [pc, #140]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fec:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <HAL_RCC_ClockConfig+0x1ec>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d001      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e036      	b.n	800406c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400a:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	4918      	ldr	r1, [pc, #96]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004028:	4b13      	ldr	r3, [pc, #76]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4910      	ldr	r1, [pc, #64]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800403c:	f000 f824 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b0d      	ldr	r3, [pc, #52]	@ (8004078 <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	490b      	ldr	r1, [pc, #44]	@ (800407c <HAL_RCC_ClockConfig+0x1f4>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	f003 031f 	and.w	r3, r3, #31
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
 8004058:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <HAL_RCC_ClockConfig+0x1f8>)
 800405a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800405c:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_RCC_ClockConfig+0x1fc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fc ff87 	bl	8000f74 <HAL_InitTick>
 8004066:	4603      	mov	r3, r0
 8004068:	72fb      	strb	r3, [r7, #11]

  return status;
 800406a:	7afb      	ldrb	r3, [r7, #11]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40022000 	.word	0x40022000
 8004078:	40021000 	.word	0x40021000
 800407c:	08007ee8 	.word	0x08007ee8
 8004080:	20000000 	.word	0x20000000
 8004084:	20000004 	.word	0x20000004

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	b480      	push	{r7}
 800408a:	b089      	sub	sp, #36	@ 0x24
 800408c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004096:	4b3e      	ldr	r3, [pc, #248]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d121      	bne.n	80040fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d11e      	bne.n	80040fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040bc:	4b34      	ldr	r3, [pc, #208]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040c8:	4b31      	ldr	r3, [pc, #196]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	e005      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	091b      	lsrs	r3, r3, #4
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80040e4:	4a2b      	ldr	r2, [pc, #172]	@ (8004194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10d      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d102      	bne.n	8004106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004100:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x110>)
 8004102:	61bb      	str	r3, [r7, #24]
 8004104:	e004      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d101      	bne.n	8004110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800410c:	4b23      	ldr	r3, [pc, #140]	@ (800419c <HAL_RCC_GetSysClockFreq+0x114>)
 800410e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d134      	bne.n	8004180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004116:	4b1e      	ldr	r3, [pc, #120]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d003      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0xa6>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b03      	cmp	r3, #3
 800412a:	d003      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0xac>
 800412c:	e005      	b.n	800413a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800412e:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <HAL_RCC_GetSysClockFreq+0x110>)
 8004130:	617b      	str	r3, [r7, #20]
      break;
 8004132:	e005      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004134:	4b19      	ldr	r3, [pc, #100]	@ (800419c <HAL_RCC_GetSysClockFreq+0x114>)
 8004136:	617b      	str	r3, [r7, #20]
      break;
 8004138:	e002      	b.n	8004140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	617b      	str	r3, [r7, #20]
      break;
 800413e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004140:	4b13      	ldr	r3, [pc, #76]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	091b      	lsrs	r3, r3, #4
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	3301      	adds	r3, #1
 800414c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	fb03 f202 	mul.w	r2, r3, r2
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004166:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <HAL_RCC_GetSysClockFreq+0x108>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	0e5b      	lsrs	r3, r3, #25
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	3301      	adds	r3, #1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004180:	69bb      	ldr	r3, [r7, #24]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3724      	adds	r7, #36	@ 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40021000 	.word	0x40021000
 8004194:	08007f00 	.word	0x08007f00
 8004198:	00f42400 	.word	0x00f42400
 800419c:	007a1200 	.word	0x007a1200

080041a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a4:	4b03      	ldr	r3, [pc, #12]	@ (80041b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041a6:	681b      	ldr	r3, [r3, #0]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000000 	.word	0x20000000

080041b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80041bc:	f7ff fff0 	bl	80041a0 <HAL_RCC_GetHCLKFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4904      	ldr	r1, [pc, #16]	@ (80041e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	f003 031f 	and.w	r3, r3, #31
 80041d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40021000 	.word	0x40021000
 80041e0:	08007ef8 	.word	0x08007ef8

080041e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80041e8:	f7ff ffda 	bl	80041a0 <HAL_RCC_GetHCLKFreq>
 80041ec:	4602      	mov	r2, r0
 80041ee:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	0adb      	lsrs	r3, r3, #11
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	4904      	ldr	r1, [pc, #16]	@ (800420c <HAL_RCC_GetPCLK2Freq+0x28>)
 80041fa:	5ccb      	ldrb	r3, [r1, r3]
 80041fc:	f003 031f 	and.w	r3, r3, #31
 8004200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004204:	4618      	mov	r0, r3
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	08007ef8 	.word	0x08007ef8

08004210 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	220f      	movs	r2, #15
 800421e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004220:	4b12      	ldr	r3, [pc, #72]	@ (800426c <HAL_RCC_GetClockConfig+0x5c>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 0203 	and.w	r2, r3, #3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800422c:	4b0f      	ldr	r3, [pc, #60]	@ (800426c <HAL_RCC_GetClockConfig+0x5c>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004238:	4b0c      	ldr	r3, [pc, #48]	@ (800426c <HAL_RCC_GetClockConfig+0x5c>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004244:	4b09      	ldr	r3, [pc, #36]	@ (800426c <HAL_RCC_GetClockConfig+0x5c>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	08db      	lsrs	r3, r3, #3
 800424a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004252:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <HAL_RCC_GetClockConfig+0x60>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0207 	and.w	r2, r3, #7
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40021000 	.word	0x40021000
 8004270:	40022000 	.word	0x40022000

08004274 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800427c:	2300      	movs	r3, #0
 800427e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004280:	4b2a      	ldr	r3, [pc, #168]	@ (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800428c:	f7ff f9bc 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 8004290:	6178      	str	r0, [r7, #20]
 8004292:	e014      	b.n	80042be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004294:	4b25      	ldr	r3, [pc, #148]	@ (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004298:	4a24      	ldr	r2, [pc, #144]	@ (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800429e:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a0:	4b22      	ldr	r3, [pc, #136]	@ (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042ac:	f7ff f9ac 	bl	8003608 <HAL_PWREx_GetVoltageRange>
 80042b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80042b2:	4b1e      	ldr	r3, [pc, #120]	@ (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	4a1d      	ldr	r2, [pc, #116]	@ (800432c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c4:	d10b      	bne.n	80042de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b80      	cmp	r3, #128	@ 0x80
 80042ca:	d919      	bls.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2ba0      	cmp	r3, #160	@ 0xa0
 80042d0:	d902      	bls.n	80042d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d2:	2302      	movs	r3, #2
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	e013      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042d8:	2301      	movs	r3, #1
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	e010      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b80      	cmp	r3, #128	@ 0x80
 80042e2:	d902      	bls.n	80042ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042e4:	2303      	movs	r3, #3
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	e00a      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b80      	cmp	r3, #128	@ 0x80
 80042ee:	d102      	bne.n	80042f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042f0:	2302      	movs	r3, #2
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	e004      	b.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2b70      	cmp	r3, #112	@ 0x70
 80042fa:	d101      	bne.n	8004300 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042fc:	2301      	movs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004300:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 0207 	bic.w	r2, r3, #7
 8004308:	4909      	ldr	r1, [pc, #36]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004310:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	429a      	cmp	r2, r3
 800431c:	d001      	beq.n	8004322 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	40021000 	.word	0x40021000
 8004330:	40022000 	.word	0x40022000

08004334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800433c:	2300      	movs	r3, #0
 800433e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004340:	2300      	movs	r3, #0
 8004342:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800434c:	2b00      	cmp	r3, #0
 800434e:	d041      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004354:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004358:	d02a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800435a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800435e:	d824      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004360:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004364:	d008      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004366:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800436a:	d81e      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004370:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004374:	d010      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004376:	e018      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004378:	4b86      	ldr	r3, [pc, #536]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a85      	ldr	r2, [pc, #532]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004382:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004384:	e015      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fabb 	bl	8004908 <RCCEx_PLLSAI1_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004396:	e00c      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3320      	adds	r3, #32
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fba6 	bl	8004af0 <RCCEx_PLLSAI2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	74fb      	strb	r3, [r7, #19]
      break;
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b2:	7cfb      	ldrb	r3, [r7, #19]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b8:	4b76      	ldr	r3, [pc, #472]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c6:	4973      	ldr	r1, [pc, #460]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043ce:	e001      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	7cfb      	ldrb	r3, [r7, #19]
 80043d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d041      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043e8:	d02a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043ee:	d824      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043fa:	d81e      	bhi.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004404:	d010      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004406:	e018      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004408:	4b62      	ldr	r3, [pc, #392]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a61      	ldr	r2, [pc, #388]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004412:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004414:	e015      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fa73 	bl	8004908 <RCCEx_PLLSAI1_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004426:	e00c      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3320      	adds	r3, #32
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fb5e 	bl	8004af0 <RCCEx_PLLSAI2_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004438:	e003      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	74fb      	strb	r3, [r7, #19]
      break;
 800443e:	e000      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004448:	4b52      	ldr	r3, [pc, #328]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004456:	494f      	ldr	r1, [pc, #316]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800445e:	e001      	b.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	7cfb      	ldrb	r3, [r7, #19]
 8004462:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a0 	beq.w	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004476:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800448c:	4b41      	ldr	r3, [pc, #260]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004490:	4a40      	ldr	r2, [pc, #256]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004492:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004496:	6593      	str	r3, [r2, #88]	@ 0x58
 8004498:	4b3e      	ldr	r3, [pc, #248]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a4:	2301      	movs	r3, #1
 80044a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044a8:	4b3b      	ldr	r3, [pc, #236]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a3a      	ldr	r2, [pc, #232]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044b4:	f7fd fa16 	bl	80018e4 <HAL_GetTick>
 80044b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ba:	e009      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044bc:	f7fd fa12 	bl	80018e4 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d902      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	74fb      	strb	r3, [r7, #19]
        break;
 80044ce:	e005      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044d0:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ef      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d15c      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d01f      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d019      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004500:	4b24      	ldr	r3, [pc, #144]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800450c:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004512:	4a20      	ldr	r2, [pc, #128]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800451c:	4b1d      	ldr	r3, [pc, #116]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004522:	4a1c      	ldr	r2, [pc, #112]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800452c:	4a19      	ldr	r2, [pc, #100]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453e:	f7fd f9d1 	bl	80018e4 <HAL_GetTick>
 8004542:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004544:	e00b      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fd f9cd 	bl	80018e4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d902      	bls.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	74fb      	strb	r3, [r7, #19]
            break;
 800455c:	e006      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800455e:	4b0d      	ldr	r3, [pc, #52]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ec      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10c      	bne.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004582:	4904      	ldr	r1, [pc, #16]	@ (8004594 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800458a:	e009      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	74bb      	strb	r3, [r7, #18]
 8004590:	e006      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
 8004598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	7cfb      	ldrb	r3, [r7, #19]
 800459e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a0:	7c7b      	ldrb	r3, [r7, #17]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a6:	4b9e      	ldr	r3, [pc, #632]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045aa:	4a9d      	ldr	r2, [pc, #628]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045be:	4b98      	ldr	r3, [pc, #608]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f023 0203 	bic.w	r2, r3, #3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045cc:	4994      	ldr	r1, [pc, #592]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e0:	4b8f      	ldr	r3, [pc, #572]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f023 020c 	bic.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ee:	498c      	ldr	r1, [pc, #560]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004602:	4b87      	ldr	r3, [pc, #540]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	4983      	ldr	r1, [pc, #524]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004624:	4b7e      	ldr	r3, [pc, #504]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	497b      	ldr	r1, [pc, #492]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004646:	4b76      	ldr	r3, [pc, #472]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004654:	4972      	ldr	r1, [pc, #456]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004668:	4b6d      	ldr	r3, [pc, #436]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004676:	496a      	ldr	r1, [pc, #424]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468a:	4b65      	ldr	r3, [pc, #404]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004690:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004698:	4961      	ldr	r1, [pc, #388]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046ac:	4b5c      	ldr	r3, [pc, #368]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ba:	4959      	ldr	r1, [pc, #356]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ce:	4b54      	ldr	r3, [pc, #336]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046dc:	4950      	ldr	r1, [pc, #320]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fe:	4948      	ldr	r1, [pc, #288]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004712:	4b43      	ldr	r3, [pc, #268]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004718:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004720:	493f      	ldr	r1, [pc, #252]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d028      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004734:	4b3a      	ldr	r3, [pc, #232]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004742:	4937      	ldr	r1, [pc, #220]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004744:	4313      	orrs	r3, r2
 8004746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004752:	d106      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004754:	4b32      	ldr	r3, [pc, #200]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	4a31      	ldr	r2, [pc, #196]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800475e:	60d3      	str	r3, [r2, #12]
 8004760:	e011      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004766:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800476a:	d10c      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3304      	adds	r3, #4
 8004770:	2101      	movs	r1, #1
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f8c8 	bl	8004908 <RCCEx_PLLSAI1_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004782:	7cfb      	ldrb	r3, [r7, #19]
 8004784:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d028      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004792:	4b23      	ldr	r3, [pc, #140]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004798:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	491f      	ldr	r1, [pc, #124]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047b0:	d106      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047bc:	60d3      	str	r3, [r2, #12]
 80047be:	e011      	b.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	3304      	adds	r3, #4
 80047ce:	2101      	movs	r1, #1
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 f899 	bl	8004908 <RCCEx_PLLSAI1_Config>
 80047d6:	4603      	mov	r3, r0
 80047d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047da:	7cfb      	ldrb	r3, [r7, #19]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02b      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047fe:	4908      	ldr	r1, [pc, #32]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800480e:	d109      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a02      	ldr	r2, [pc, #8]	@ (8004820 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
 800481c:	e014      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800481e:	bf00      	nop
 8004820:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004828:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800482c:	d10c      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3304      	adds	r3, #4
 8004832:	2101      	movs	r1, #1
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f867 	bl	8004908 <RCCEx_PLLSAI1_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d02f      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004854:	4b2b      	ldr	r3, [pc, #172]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004862:	4928      	ldr	r1, [pc, #160]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800486e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004872:	d10d      	bne.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	2102      	movs	r1, #2
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f844 	bl	8004908 <RCCEx_PLLSAI1_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d014      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	74bb      	strb	r3, [r7, #18]
 800488e:	e011      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004898:	d10c      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3320      	adds	r3, #32
 800489e:	2102      	movs	r1, #2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f925 	bl	8004af0 <RCCEx_PLLSAI2_Config>
 80048a6:	4603      	mov	r3, r0
 80048a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048aa:	7cfb      	ldrb	r3, [r7, #19]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048b0:	7cfb      	ldrb	r3, [r7, #19]
 80048b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048c0:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ce:	490d      	ldr	r1, [pc, #52]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048e2:	4b08      	ldr	r3, [pc, #32]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048f2:	4904      	ldr	r1, [pc, #16]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048fa:	7cbb      	ldrb	r3, [r7, #18]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40021000 	.word	0x40021000

08004908 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004916:	4b75      	ldr	r3, [pc, #468]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d018      	beq.n	8004954 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004922:	4b72      	ldr	r3, [pc, #456]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0203 	and.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d10d      	bne.n	800494e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
       ||
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800493a:	4b6c      	ldr	r3, [pc, #432]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
       ||
 800494a:	429a      	cmp	r2, r3
 800494c:	d047      	beq.n	80049de <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
 8004952:	e044      	b.n	80049de <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b03      	cmp	r3, #3
 800495a:	d018      	beq.n	800498e <RCCEx_PLLSAI1_Config+0x86>
 800495c:	2b03      	cmp	r3, #3
 800495e:	d825      	bhi.n	80049ac <RCCEx_PLLSAI1_Config+0xa4>
 8004960:	2b01      	cmp	r3, #1
 8004962:	d002      	beq.n	800496a <RCCEx_PLLSAI1_Config+0x62>
 8004964:	2b02      	cmp	r3, #2
 8004966:	d009      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x74>
 8004968:	e020      	b.n	80049ac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800496a:	4b60      	ldr	r3, [pc, #384]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11d      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497a:	e01a      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800497c:	4b5b      	ldr	r3, [pc, #364]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498c:	e013      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800498e:	4b57      	ldr	r3, [pc, #348]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800499a:	4b54      	ldr	r3, [pc, #336]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049aa:	e006      	b.n	80049ba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      break;
 80049b0:	e004      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80049ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10d      	bne.n	80049de <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049c2:	4b4a      	ldr	r3, [pc, #296]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6819      	ldr	r1, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	430b      	orrs	r3, r1
 80049d8:	4944      	ldr	r1, [pc, #272]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049de:	7bfb      	ldrb	r3, [r7, #15]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d17d      	bne.n	8004ae0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049e4:	4b41      	ldr	r3, [pc, #260]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a40      	ldr	r2, [pc, #256]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f0:	f7fc ff78 	bl	80018e4 <HAL_GetTick>
 80049f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f6:	e009      	b.n	8004a0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f8:	f7fc ff74 	bl	80018e4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d902      	bls.n	8004a0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	73fb      	strb	r3, [r7, #15]
        break;
 8004a0a:	e005      	b.n	8004a18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a0c:	4b37      	ldr	r3, [pc, #220]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ef      	bne.n	80049f8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d160      	bne.n	8004ae0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d111      	bne.n	8004a48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a24:	4b31      	ldr	r3, [pc, #196]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6892      	ldr	r2, [r2, #8]
 8004a34:	0211      	lsls	r1, r2, #8
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68d2      	ldr	r2, [r2, #12]
 8004a3a:	0912      	lsrs	r2, r2, #4
 8004a3c:	0452      	lsls	r2, r2, #17
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	492a      	ldr	r1, [pc, #168]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	610b      	str	r3, [r1, #16]
 8004a46:	e027      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d112      	bne.n	8004a74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a4e:	4b27      	ldr	r3, [pc, #156]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	0211      	lsls	r1, r2, #8
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6912      	ldr	r2, [r2, #16]
 8004a64:	0852      	lsrs	r2, r2, #1
 8004a66:	3a01      	subs	r2, #1
 8004a68:	0552      	lsls	r2, r2, #21
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	491f      	ldr	r1, [pc, #124]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	610b      	str	r3, [r1, #16]
 8004a72:	e011      	b.n	8004a98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a74:	4b1d      	ldr	r3, [pc, #116]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a7c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6892      	ldr	r2, [r2, #8]
 8004a84:	0211      	lsls	r1, r2, #8
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6952      	ldr	r2, [r2, #20]
 8004a8a:	0852      	lsrs	r2, r2, #1
 8004a8c:	3a01      	subs	r2, #1
 8004a8e:	0652      	lsls	r2, r2, #25
 8004a90:	430a      	orrs	r2, r1
 8004a92:	4916      	ldr	r1, [pc, #88]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a98:	4b14      	ldr	r3, [pc, #80]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a13      	ldr	r2, [pc, #76]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fc ff1e 	bl	80018e4 <HAL_GetTick>
 8004aa8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aaa:	e009      	b.n	8004ac0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004aac:	f7fc ff1a 	bl	80018e4 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d902      	bls.n	8004ac0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	73fb      	strb	r3, [r7, #15]
          break;
 8004abe:	e005      	b.n	8004acc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ef      	beq.n	8004aac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	4904      	ldr	r1, [pc, #16]	@ (8004aec <RCCEx_PLLSAI1_Config+0x1e4>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	40021000 	.word	0x40021000

08004af0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004afe:	4b6a      	ldr	r3, [pc, #424]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d018      	beq.n	8004b3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f003 0203 	and.w	r2, r3, #3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d10d      	bne.n	8004b36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d009      	beq.n	8004b36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b22:	4b61      	ldr	r3, [pc, #388]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
       ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d047      	beq.n	8004bc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
 8004b3a:	e044      	b.n	8004bc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d018      	beq.n	8004b76 <RCCEx_PLLSAI2_Config+0x86>
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d825      	bhi.n	8004b94 <RCCEx_PLLSAI2_Config+0xa4>
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d002      	beq.n	8004b52 <RCCEx_PLLSAI2_Config+0x62>
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d009      	beq.n	8004b64 <RCCEx_PLLSAI2_Config+0x74>
 8004b50:	e020      	b.n	8004b94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b52:	4b55      	ldr	r3, [pc, #340]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11d      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b62:	e01a      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b64:	4b50      	ldr	r3, [pc, #320]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b74:	e013      	b.n	8004b9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b76:	4b4c      	ldr	r3, [pc, #304]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b82:	4b49      	ldr	r3, [pc, #292]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b92:	e006      	b.n	8004ba2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      break;
 8004b98:	e004      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10d      	bne.n	8004bc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004baa:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	4939      	ldr	r1, [pc, #228]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d167      	bne.n	8004c9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bcc:	4b36      	ldr	r3, [pc, #216]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a35      	ldr	r2, [pc, #212]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd8:	f7fc fe84 	bl	80018e4 <HAL_GetTick>
 8004bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bde:	e009      	b.n	8004bf4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004be0:	f7fc fe80 	bl	80018e4 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d902      	bls.n	8004bf4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bf2:	e005      	b.n	8004c00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1ef      	bne.n	8004be0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c00:	7bfb      	ldrb	r3, [r7, #15]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d14a      	bne.n	8004c9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d111      	bne.n	8004c30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c0c:	4b26      	ldr	r3, [pc, #152]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004c14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6892      	ldr	r2, [r2, #8]
 8004c1c:	0211      	lsls	r1, r2, #8
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68d2      	ldr	r2, [r2, #12]
 8004c22:	0912      	lsrs	r2, r2, #4
 8004c24:	0452      	lsls	r2, r2, #17
 8004c26:	430a      	orrs	r2, r1
 8004c28:	491f      	ldr	r1, [pc, #124]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	614b      	str	r3, [r1, #20]
 8004c2e:	e011      	b.n	8004c54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c38:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6892      	ldr	r2, [r2, #8]
 8004c40:	0211      	lsls	r1, r2, #8
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6912      	ldr	r2, [r2, #16]
 8004c46:	0852      	lsrs	r2, r2, #1
 8004c48:	3a01      	subs	r2, #1
 8004c4a:	0652      	lsls	r2, r2, #25
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	4916      	ldr	r1, [pc, #88]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c54:	4b14      	ldr	r3, [pc, #80]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a13      	ldr	r2, [pc, #76]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fc fe40 	bl	80018e4 <HAL_GetTick>
 8004c64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c66:	e009      	b.n	8004c7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c68:	f7fc fe3c 	bl	80018e4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d902      	bls.n	8004c7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	73fb      	strb	r3, [r7, #15]
          break;
 8004c7a:	e005      	b.n	8004c88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0ef      	beq.n	8004c68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	4904      	ldr	r1, [pc, #16]	@ (8004ca8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000

08004cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e095      	b.n	8004dea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d108      	bne.n	8004cd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cce:	d009      	beq.n	8004ce4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	61da      	str	r2, [r3, #28]
 8004cd6:	e005      	b.n	8004ce4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc f8b2 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d24:	d902      	bls.n	8004d2c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	e002      	b.n	8004d32 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d30:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004d3a:	d007      	beq.n	8004d4c <HAL_SPI_Init+0xa0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004d44:	d002      	beq.n	8004d4c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d84:	431a      	orrs	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d8e:	ea42 0103 	orr.w	r1, r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	f003 0204 	and.w	r2, r3, #4
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004dc8:	ea42 0103 	orr.w	r1, r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e049      	b.n	8004e98 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fc fb93 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2202      	movs	r2, #2
 8004e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f000 fcb9 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d001      	beq.n	8004eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e04f      	b.n	8004f58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a23      	ldr	r2, [pc, #140]	@ (8004f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01d      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x76>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee2:	d018      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x76>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8004f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d013      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x76>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8004f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d00e      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x76>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d009      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x76>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_TIM_Base_Start_IT+0x76>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d115      	bne.n	8004f42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d015      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0xb4>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2e:	d011      	beq.n	8004f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f40:	e008      	b.n	8004f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0201 	orr.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e000      	b.n	8004f56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40012c00 	.word	0x40012c00
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40013400 	.word	0x40013400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	00010007 	.word	0x00010007

08004f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e049      	b.n	8005026 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f841 	bl	800502e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 fbf2 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b086      	sub	sp, #24
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e097      	b.n	8005186 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d106      	bne.n	8005070 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7fc fa2a 	bl	80014c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 fb86 	bl	80057a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c4:	f023 0303 	bic.w	r3, r3, #3
 80050c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	689a      	ldr	r2, [r3, #8]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	4313      	orrs	r3, r2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80050e2:	f023 030c 	bic.w	r3, r3, #12
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	4313      	orrs	r3, r2
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	031b      	lsls	r3, r3, #12
 8005112:	4313      	orrs	r3, r2
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005120:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005128:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	4313      	orrs	r3, r2
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d020      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d01b      	beq.n	80051f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f06f 0202 	mvn.w	r2, #2
 80051c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fac6 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 80051de:	e005      	b.n	80051ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 fab8 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fac9 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d020      	beq.n	800523e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01b      	beq.n	800523e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0204 	mvn.w	r2, #4
 800520e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 faa0 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 800522a:	e005      	b.n	8005238 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa92 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 faa3 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d01b      	beq.n	800528a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0208 	mvn.w	r2, #8
 800525a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2204      	movs	r2, #4
 8005260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f003 0303 	and.w	r3, r3, #3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 fa7a 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 8005276:	e005      	b.n	8005284 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fa6c 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fa7d 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f003 0310 	and.w	r3, r3, #16
 8005290:	2b00      	cmp	r3, #0
 8005292:	d020      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01b      	beq.n	80052d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f06f 0210 	mvn.w	r2, #16
 80052a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2208      	movs	r2, #8
 80052ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fa54 	bl	800576a <HAL_TIM_IC_CaptureCallback>
 80052c2:	e005      	b.n	80052d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa46 	bl	8005756 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa57 	bl	800577e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00c      	beq.n	80052fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d007      	beq.n	80052fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f06f 0201 	mvn.w	r2, #1
 80052f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fb fc53 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00c      	beq.n	8005328 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fee8 	bl	80060f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00c      	beq.n	800534c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fee0 	bl	800610c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa11 	bl	8005792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0320 	and.w	r3, r3, #32
 8005380:	2b00      	cmp	r3, #0
 8005382:	d007      	beq.n	8005394 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0220 	mvn.w	r2, #32
 800538c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fea8 	bl	80060e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0ff      	b.n	80055ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b14      	cmp	r3, #20
 80053c6:	f200 80f0 	bhi.w	80055aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053ca:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005425 	.word	0x08005425
 80053d4:	080055ab 	.word	0x080055ab
 80053d8:	080055ab 	.word	0x080055ab
 80053dc:	080055ab 	.word	0x080055ab
 80053e0:	08005465 	.word	0x08005465
 80053e4:	080055ab 	.word	0x080055ab
 80053e8:	080055ab 	.word	0x080055ab
 80053ec:	080055ab 	.word	0x080055ab
 80053f0:	080054a7 	.word	0x080054a7
 80053f4:	080055ab 	.word	0x080055ab
 80053f8:	080055ab 	.word	0x080055ab
 80053fc:	080055ab 	.word	0x080055ab
 8005400:	080054e7 	.word	0x080054e7
 8005404:	080055ab 	.word	0x080055ab
 8005408:	080055ab 	.word	0x080055ab
 800540c:	080055ab 	.word	0x080055ab
 8005410:	08005529 	.word	0x08005529
 8005414:	080055ab 	.word	0x080055ab
 8005418:	080055ab 	.word	0x080055ab
 800541c:	080055ab 	.word	0x080055ab
 8005420:	08005569 	.word	0x08005569
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fa62 	bl	80058f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0208 	orr.w	r2, r2, #8
 800543e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0204 	bic.w	r2, r2, #4
 800544e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6999      	ldr	r1, [r3, #24]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	619a      	str	r2, [r3, #24]
      break;
 8005462:	e0a5      	b.n	80055b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fad2 	bl	8005a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800547e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800548e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6999      	ldr	r1, [r3, #24]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	021a      	lsls	r2, r3, #8
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	619a      	str	r2, [r3, #24]
      break;
 80054a4:	e084      	b.n	80055b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 fb3b 	bl	8005b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69da      	ldr	r2, [r3, #28]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0208 	orr.w	r2, r2, #8
 80054c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0204 	bic.w	r2, r2, #4
 80054d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69d9      	ldr	r1, [r3, #28]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	61da      	str	r2, [r3, #28]
      break;
 80054e4:	e064      	b.n	80055b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fba3 	bl	8005c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69d9      	ldr	r1, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	691b      	ldr	r3, [r3, #16]
 800551c:	021a      	lsls	r2, r3, #8
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	61da      	str	r2, [r3, #28]
      break;
 8005526:	e043      	b.n	80055b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fbec 	bl	8005d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0208 	orr.w	r2, r2, #8
 8005542:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0204 	bic.w	r2, r2, #4
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005566:	e023      	b.n	80055b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fc30 	bl	8005dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005582:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005592:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80055a8:	e002      	b.n	80055b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	75fb      	strb	r3, [r7, #23]
      break;
 80055ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop

080055c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055ce:	2300      	movs	r3, #0
 80055d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_TIM_ConfigClockSource+0x1c>
 80055dc:	2302      	movs	r3, #2
 80055de:	e0b6      	b.n	800574e <HAL_TIM_ConfigClockSource+0x18a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800560a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800561c:	d03e      	beq.n	800569c <HAL_TIM_ConfigClockSource+0xd8>
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005622:	f200 8087 	bhi.w	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800562a:	f000 8086 	beq.w	800573a <HAL_TIM_ConfigClockSource+0x176>
 800562e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005632:	d87f      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005634:	2b70      	cmp	r3, #112	@ 0x70
 8005636:	d01a      	beq.n	800566e <HAL_TIM_ConfigClockSource+0xaa>
 8005638:	2b70      	cmp	r3, #112	@ 0x70
 800563a:	d87b      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 800563c:	2b60      	cmp	r3, #96	@ 0x60
 800563e:	d050      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x11e>
 8005640:	2b60      	cmp	r3, #96	@ 0x60
 8005642:	d877      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005644:	2b50      	cmp	r3, #80	@ 0x50
 8005646:	d03c      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0xfe>
 8005648:	2b50      	cmp	r3, #80	@ 0x50
 800564a:	d873      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 800564c:	2b40      	cmp	r3, #64	@ 0x40
 800564e:	d058      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x13e>
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d86f      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005654:	2b30      	cmp	r3, #48	@ 0x30
 8005656:	d064      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 8005658:	2b30      	cmp	r3, #48	@ 0x30
 800565a:	d86b      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 800565c:	2b20      	cmp	r3, #32
 800565e:	d060      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 8005660:	2b20      	cmp	r3, #32
 8005662:	d867      	bhi.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d05c      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 8005668:	2b10      	cmp	r3, #16
 800566a:	d05a      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x15e>
 800566c:	e062      	b.n	8005734 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800567e:	f000 fc89 	bl	8005f94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005690:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	609a      	str	r2, [r3, #8]
      break;
 800569a:	e04f      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ac:	f000 fc72 	bl	8005f94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056be:	609a      	str	r2, [r3, #8]
      break;
 80056c0:	e03c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fbe6 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2150      	movs	r1, #80	@ 0x50
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fc3f 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 80056e0:	e02c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056ee:	461a      	mov	r2, r3
 80056f0:	f000 fc05 	bl	8005efe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2160      	movs	r1, #96	@ 0x60
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fc2f 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005700:	e01c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800570e:	461a      	mov	r2, r3
 8005710:	f000 fbc6 	bl	8005ea0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2140      	movs	r1, #64	@ 0x40
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fc1f 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005720:	e00c      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f000 fc16 	bl	8005f5e <TIM_ITRx_SetConfig>
      break;
 8005732:	e003      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e000      	b.n	800573c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800573a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
	...

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a46      	ldr	r2, [pc, #280]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c6:	d00f      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a43      	ldr	r2, [pc, #268]	@ (80058d8 <TIM_Base_SetConfig+0x130>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a42      	ldr	r2, [pc, #264]	@ (80058dc <TIM_Base_SetConfig+0x134>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a41      	ldr	r2, [pc, #260]	@ (80058e0 <TIM_Base_SetConfig+0x138>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a40      	ldr	r2, [pc, #256]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d108      	bne.n	80057fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a35      	ldr	r2, [pc, #212]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01f      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005808:	d01b      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a32      	ldr	r2, [pc, #200]	@ (80058d8 <TIM_Base_SetConfig+0x130>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d017      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a31      	ldr	r2, [pc, #196]	@ (80058dc <TIM_Base_SetConfig+0x134>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d013      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a30      	ldr	r2, [pc, #192]	@ (80058e0 <TIM_Base_SetConfig+0x138>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00f      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a2f      	ldr	r2, [pc, #188]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00b      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a2e      	ldr	r2, [pc, #184]	@ (80058e8 <TIM_Base_SetConfig+0x140>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d007      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a2d      	ldr	r2, [pc, #180]	@ (80058ec <TIM_Base_SetConfig+0x144>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_Base_SetConfig+0x9a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2c      	ldr	r2, [pc, #176]	@ (80058f0 <TIM_Base_SetConfig+0x148>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d108      	bne.n	8005854 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a16      	ldr	r2, [pc, #88]	@ (80058d4 <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00f      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <TIM_Base_SetConfig+0x13c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00b      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <TIM_Base_SetConfig+0x140>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d007      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a16      	ldr	r2, [pc, #88]	@ (80058ec <TIM_Base_SetConfig+0x144>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <TIM_Base_SetConfig+0x148>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d105      	bne.n	80058c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	f023 0201 	bic.w	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	611a      	str	r2, [r3, #16]
  }
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40013400 	.word	0x40013400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40014400 	.word	0x40014400
 80058f0:	40014800 	.word	0x40014800

080058f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	f023 0201 	bic.w	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f023 0302 	bic.w	r3, r3, #2
 8005940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4313      	orrs	r3, r2
 800594a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2c      	ldr	r2, [pc, #176]	@ (8005a00 <TIM_OC1_SetConfig+0x10c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00f      	beq.n	8005974 <TIM_OC1_SetConfig+0x80>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a2b      	ldr	r2, [pc, #172]	@ (8005a04 <TIM_OC1_SetConfig+0x110>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00b      	beq.n	8005974 <TIM_OC1_SetConfig+0x80>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a2a      	ldr	r2, [pc, #168]	@ (8005a08 <TIM_OC1_SetConfig+0x114>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_OC1_SetConfig+0x80>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <TIM_OC1_SetConfig+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_OC1_SetConfig+0x80>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a28      	ldr	r2, [pc, #160]	@ (8005a10 <TIM_OC1_SetConfig+0x11c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d10c      	bne.n	800598e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f023 0308 	bic.w	r3, r3, #8
 800597a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4313      	orrs	r3, r2
 8005984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f023 0304 	bic.w	r3, r3, #4
 800598c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1b      	ldr	r2, [pc, #108]	@ (8005a00 <TIM_OC1_SetConfig+0x10c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00f      	beq.n	80059b6 <TIM_OC1_SetConfig+0xc2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1a      	ldr	r2, [pc, #104]	@ (8005a04 <TIM_OC1_SetConfig+0x110>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00b      	beq.n	80059b6 <TIM_OC1_SetConfig+0xc2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a19      	ldr	r2, [pc, #100]	@ (8005a08 <TIM_OC1_SetConfig+0x114>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d007      	beq.n	80059b6 <TIM_OC1_SetConfig+0xc2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a18      	ldr	r2, [pc, #96]	@ (8005a0c <TIM_OC1_SetConfig+0x118>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d003      	beq.n	80059b6 <TIM_OC1_SetConfig+0xc2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <TIM_OC1_SetConfig+0x11c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d111      	bne.n	80059da <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80059bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	621a      	str	r2, [r3, #32]
}
 80059f4:	bf00      	nop
 80059f6:	371c      	adds	r7, #28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40013400 	.word	0x40013400
 8005a08:	40014000 	.word	0x40014000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f023 0210 	bic.w	r2, r3, #16
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	f023 0320 	bic.w	r3, r3, #32
 8005a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a28      	ldr	r2, [pc, #160]	@ (8005b14 <TIM_OC2_SetConfig+0x100>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d003      	beq.n	8005a80 <TIM_OC2_SetConfig+0x6c>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a27      	ldr	r2, [pc, #156]	@ (8005b18 <TIM_OC2_SetConfig+0x104>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10d      	bne.n	8005a9c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	011b      	lsls	r3, r3, #4
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8005b14 <TIM_OC2_SetConfig+0x100>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00f      	beq.n	8005ac4 <TIM_OC2_SetConfig+0xb0>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b18 <TIM_OC2_SetConfig+0x104>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <TIM_OC2_SetConfig+0xb0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a1b      	ldr	r2, [pc, #108]	@ (8005b1c <TIM_OC2_SetConfig+0x108>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d007      	beq.n	8005ac4 <TIM_OC2_SetConfig+0xb0>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b20 <TIM_OC2_SetConfig+0x10c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC2_SetConfig+0xb0>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a19      	ldr	r2, [pc, #100]	@ (8005b24 <TIM_OC2_SetConfig+0x110>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d113      	bne.n	8005aec <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005aca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40013400 	.word	0x40013400
 8005b1c:	40014000 	.word	0x40014000
 8005b20:	40014400 	.word	0x40014400
 8005b24:	40014800 	.word	0x40014800

08005b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	021b      	lsls	r3, r3, #8
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a27      	ldr	r2, [pc, #156]	@ (8005c24 <TIM_OC3_SetConfig+0xfc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_OC3_SetConfig+0x6a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a26      	ldr	r2, [pc, #152]	@ (8005c28 <TIM_OC3_SetConfig+0x100>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d10d      	bne.n	8005bae <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1c      	ldr	r2, [pc, #112]	@ (8005c24 <TIM_OC3_SetConfig+0xfc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00f      	beq.n	8005bd6 <TIM_OC3_SetConfig+0xae>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8005c28 <TIM_OC3_SetConfig+0x100>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00b      	beq.n	8005bd6 <TIM_OC3_SetConfig+0xae>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8005c2c <TIM_OC3_SetConfig+0x104>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <TIM_OC3_SetConfig+0xae>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	@ (8005c30 <TIM_OC3_SetConfig+0x108>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_OC3_SetConfig+0xae>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a18      	ldr	r2, [pc, #96]	@ (8005c34 <TIM_OC3_SetConfig+0x10c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d113      	bne.n	8005bfe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005be4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	011b      	lsls	r3, r3, #4
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	40012c00 	.word	0x40012c00
 8005c28:	40013400 	.word	0x40013400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40014400 	.word	0x40014400
 8005c34:	40014800 	.word	0x40014800

08005c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	031b      	lsls	r3, r3, #12
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a18      	ldr	r2, [pc, #96]	@ (8005cf8 <TIM_OC4_SetConfig+0xc0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d00f      	beq.n	8005cbc <TIM_OC4_SetConfig+0x84>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	@ (8005cfc <TIM_OC4_SetConfig+0xc4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00b      	beq.n	8005cbc <TIM_OC4_SetConfig+0x84>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a16      	ldr	r2, [pc, #88]	@ (8005d00 <TIM_OC4_SetConfig+0xc8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d007      	beq.n	8005cbc <TIM_OC4_SetConfig+0x84>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a15      	ldr	r2, [pc, #84]	@ (8005d04 <TIM_OC4_SetConfig+0xcc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d003      	beq.n	8005cbc <TIM_OC4_SetConfig+0x84>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a14      	ldr	r2, [pc, #80]	@ (8005d08 <TIM_OC4_SetConfig+0xd0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d109      	bne.n	8005cd0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800

08005d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	041b      	lsls	r3, r3, #16
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <TIM_OC5_SetConfig+0xb4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <TIM_OC5_SetConfig+0x7a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a16      	ldr	r2, [pc, #88]	@ (8005dc4 <TIM_OC5_SetConfig+0xb8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_OC5_SetConfig+0x7a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a15      	ldr	r2, [pc, #84]	@ (8005dc8 <TIM_OC5_SetConfig+0xbc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_OC5_SetConfig+0x7a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a14      	ldr	r2, [pc, #80]	@ (8005dcc <TIM_OC5_SetConfig+0xc0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC5_SetConfig+0x7a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a13      	ldr	r2, [pc, #76]	@ (8005dd0 <TIM_OC5_SetConfig+0xc4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d109      	bne.n	8005d9a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	621a      	str	r2, [r3, #32]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40013400 	.word	0x40013400
 8005dc8:	40014000 	.word	0x40014000
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	40014800 	.word	0x40014800

08005dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	051b      	lsls	r3, r3, #20
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a18      	ldr	r2, [pc, #96]	@ (8005e8c <TIM_OC6_SetConfig+0xb8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00f      	beq.n	8005e50 <TIM_OC6_SetConfig+0x7c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a17      	ldr	r2, [pc, #92]	@ (8005e90 <TIM_OC6_SetConfig+0xbc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d00b      	beq.n	8005e50 <TIM_OC6_SetConfig+0x7c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a16      	ldr	r2, [pc, #88]	@ (8005e94 <TIM_OC6_SetConfig+0xc0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <TIM_OC6_SetConfig+0x7c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a15      	ldr	r2, [pc, #84]	@ (8005e98 <TIM_OC6_SetConfig+0xc4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_OC6_SetConfig+0x7c>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a14      	ldr	r2, [pc, #80]	@ (8005e9c <TIM_OC6_SetConfig+0xc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d109      	bne.n	8005e64 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	029b      	lsls	r3, r3, #10
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40013400 	.word	0x40013400
 8005e94:	40014000 	.word	0x40014000
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800

08005ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0201 	bic.w	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f023 030a 	bic.w	r3, r3, #10
 8005edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	f023 0210 	bic.w	r2, r3, #16
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	031b      	lsls	r3, r3, #12
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b085      	sub	sp, #20
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f043 0307 	orr.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	609a      	str	r2, [r3, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	3714      	adds	r7, #20
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	021a      	lsls	r2, r3, #8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	371c      	adds	r7, #28
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d101      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e068      	b.n	80060be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2e      	ldr	r2, [pc, #184]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d004      	beq.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a2d      	ldr	r2, [pc, #180]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d108      	bne.n	8006032 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006026:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006038:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1e      	ldr	r2, [pc, #120]	@ (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01d      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605e:	d018      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d013      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1a      	ldr	r2, [pc, #104]	@ (80060d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d00e      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a18      	ldr	r2, [pc, #96]	@ (80060dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a13      	ldr	r2, [pc, #76]	@ (80060d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d004      	beq.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a14      	ldr	r2, [pc, #80]	@ (80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d10c      	bne.n	80060ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40000400 	.word	0x40000400
 80060d8:	40000800 	.word	0x40000800
 80060dc:	40000c00 	.word	0x40000c00
 80060e0:	40014000 	.word	0x40014000

080060e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e040      	b.n	80061b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fb face 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	@ 0x24
 800614c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0201 	bic.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fc32 	bl	80069d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f977 	bl	8006460 <UART_SetConfig>
 8006172:	4603      	mov	r3, r0
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e01b      	b.n	80061b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800618a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689a      	ldr	r2, [r3, #8]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800619a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 fcb1 	bl	8006b14 <UART_CheckIdleState>
 80061b2:	4603      	mov	r3, r0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	@ 0x28
 80061c0:	af02      	add	r7, sp, #8
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d177      	bne.n	80062c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_UART_Transmit+0x24>
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e070      	b.n	80062c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2221      	movs	r2, #33	@ 0x21
 80061f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061f2:	f7fb fb77 	bl	80018e4 <HAL_GetTick>
 80061f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	88fa      	ldrh	r2, [r7, #6]
 80061fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006210:	d108      	bne.n	8006224 <HAL_UART_Transmit+0x68>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d104      	bne.n	8006224 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	61bb      	str	r3, [r7, #24]
 8006222:	e003      	b.n	800622c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006228:	2300      	movs	r3, #0
 800622a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800622c:	e02f      	b.n	800628e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2200      	movs	r2, #0
 8006236:	2180      	movs	r1, #128	@ 0x80
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fd13 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2220      	movs	r2, #32
 8006248:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e03b      	b.n	80062c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d10b      	bne.n	800626c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	881a      	ldrh	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006260:	b292      	uxth	r2, r2
 8006262:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	3302      	adds	r3, #2
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e007      	b.n	800627c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	781a      	ldrb	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006282:	b29b      	uxth	r3, r3
 8006284:	3b01      	subs	r3, #1
 8006286:	b29a      	uxth	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1c9      	bne.n	800622e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2200      	movs	r2, #0
 80062a2:	2140      	movs	r1, #64	@ 0x40
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fcdd 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2220      	movs	r2, #32
 80062b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e005      	b.n	80062c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e000      	b.n	80062c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b08a      	sub	sp, #40	@ 0x28
 80062d2:	af02      	add	r7, sp, #8
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	603b      	str	r3, [r7, #0]
 80062da:	4613      	mov	r3, r2
 80062dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	f040 80b6 	bne.w	8006456 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <HAL_UART_Receive+0x28>
 80062f0:	88fb      	ldrh	r3, [r7, #6]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e0ae      	b.n	8006458 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2222      	movs	r2, #34	@ 0x22
 8006306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006310:	f7fb fae8 	bl	80018e4 <HAL_GetTick>
 8006314:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	88fa      	ldrh	r2, [r7, #6]
 800631a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800632e:	d10e      	bne.n	800634e <HAL_UART_Receive+0x80>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d105      	bne.n	8006344 <HAL_UART_Receive+0x76>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800633e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006342:	e02d      	b.n	80063a0 <HAL_UART_Receive+0xd2>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	22ff      	movs	r2, #255	@ 0xff
 8006348:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800634c:	e028      	b.n	80063a0 <HAL_UART_Receive+0xd2>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10d      	bne.n	8006372 <HAL_UART_Receive+0xa4>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <HAL_UART_Receive+0x9a>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	22ff      	movs	r2, #255	@ 0xff
 8006362:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006366:	e01b      	b.n	80063a0 <HAL_UART_Receive+0xd2>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	227f      	movs	r2, #127	@ 0x7f
 800636c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006370:	e016      	b.n	80063a0 <HAL_UART_Receive+0xd2>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800637a:	d10d      	bne.n	8006398 <HAL_UART_Receive+0xca>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d104      	bne.n	800638e <HAL_UART_Receive+0xc0>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	227f      	movs	r2, #127	@ 0x7f
 8006388:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800638c:	e008      	b.n	80063a0 <HAL_UART_Receive+0xd2>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	223f      	movs	r2, #63	@ 0x3f
 8006392:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006396:	e003      	b.n	80063a0 <HAL_UART_Receive+0xd2>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80063a6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063b0:	d108      	bne.n	80063c4 <HAL_UART_Receive+0xf6>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d104      	bne.n	80063c4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	61bb      	str	r3, [r7, #24]
 80063c2:	e003      	b.n	80063cc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80063cc:	e037      	b.n	800643e <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	9300      	str	r3, [sp, #0]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2120      	movs	r1, #32
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fc43 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e033      	b.n	8006458 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	8a7b      	ldrh	r3, [r7, #18]
 8006400:	4013      	ands	r3, r2
 8006402:	b29a      	uxth	r2, r3
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	3302      	adds	r3, #2
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	e00d      	b.n	800642c <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006416:	b29b      	uxth	r3, r3
 8006418:	b2da      	uxtb	r2, r3
 800641a:	8a7b      	ldrh	r3, [r7, #18]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	4013      	ands	r3, r2
 8006420:	b2da      	uxtb	r2, r3
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	3301      	adds	r3, #1
 800642a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006432:	b29b      	uxth	r3, r3
 8006434:	3b01      	subs	r3, #1
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1c1      	bne.n	80063ce <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	e000      	b.n	8006458 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006456:	2302      	movs	r3, #2
  }
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006464:	b08a      	sub	sp, #40	@ 0x28
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	431a      	orrs	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	69db      	ldr	r3, [r3, #28]
 8006484:	4313      	orrs	r3, r2
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4ba4      	ldr	r3, [pc, #656]	@ (8006720 <UART_SetConfig+0x2c0>)
 8006490:	4013      	ands	r3, r2
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006498:	430b      	orrs	r3, r1
 800649a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	430a      	orrs	r2, r1
 80064b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a99      	ldr	r2, [pc, #612]	@ (8006724 <UART_SetConfig+0x2c4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d004      	beq.n	80064cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064c8:	4313      	orrs	r3, r2
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064dc:	430a      	orrs	r2, r1
 80064de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a90      	ldr	r2, [pc, #576]	@ (8006728 <UART_SetConfig+0x2c8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d126      	bne.n	8006538 <UART_SetConfig+0xd8>
 80064ea:	4b90      	ldr	r3, [pc, #576]	@ (800672c <UART_SetConfig+0x2cc>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	2b03      	cmp	r3, #3
 80064f6:	d81b      	bhi.n	8006530 <UART_SetConfig+0xd0>
 80064f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006500 <UART_SetConfig+0xa0>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006511 	.word	0x08006511
 8006504:	08006521 	.word	0x08006521
 8006508:	08006519 	.word	0x08006519
 800650c:	08006529 	.word	0x08006529
 8006510:	2301      	movs	r3, #1
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e116      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006518:	2302      	movs	r3, #2
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e112      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006520:	2304      	movs	r3, #4
 8006522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006526:	e10e      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006528:	2308      	movs	r3, #8
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652e:	e10a      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006530:	2310      	movs	r3, #16
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006536:	e106      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a7c      	ldr	r2, [pc, #496]	@ (8006730 <UART_SetConfig+0x2d0>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d138      	bne.n	80065b4 <UART_SetConfig+0x154>
 8006542:	4b7a      	ldr	r3, [pc, #488]	@ (800672c <UART_SetConfig+0x2cc>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006548:	f003 030c 	and.w	r3, r3, #12
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d82d      	bhi.n	80065ac <UART_SetConfig+0x14c>
 8006550:	a201      	add	r2, pc, #4	@ (adr r2, 8006558 <UART_SetConfig+0xf8>)
 8006552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006556:	bf00      	nop
 8006558:	0800658d 	.word	0x0800658d
 800655c:	080065ad 	.word	0x080065ad
 8006560:	080065ad 	.word	0x080065ad
 8006564:	080065ad 	.word	0x080065ad
 8006568:	0800659d 	.word	0x0800659d
 800656c:	080065ad 	.word	0x080065ad
 8006570:	080065ad 	.word	0x080065ad
 8006574:	080065ad 	.word	0x080065ad
 8006578:	08006595 	.word	0x08006595
 800657c:	080065ad 	.word	0x080065ad
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065ad 	.word	0x080065ad
 8006588:	080065a5 	.word	0x080065a5
 800658c:	2300      	movs	r3, #0
 800658e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006592:	e0d8      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006594:	2302      	movs	r3, #2
 8006596:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659a:	e0d4      	b.n	8006746 <UART_SetConfig+0x2e6>
 800659c:	2304      	movs	r3, #4
 800659e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a2:	e0d0      	b.n	8006746 <UART_SetConfig+0x2e6>
 80065a4:	2308      	movs	r3, #8
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065aa:	e0cc      	b.n	8006746 <UART_SetConfig+0x2e6>
 80065ac:	2310      	movs	r3, #16
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b2:	e0c8      	b.n	8006746 <UART_SetConfig+0x2e6>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a5e      	ldr	r2, [pc, #376]	@ (8006734 <UART_SetConfig+0x2d4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d125      	bne.n	800660a <UART_SetConfig+0x1aa>
 80065be:	4b5b      	ldr	r3, [pc, #364]	@ (800672c <UART_SetConfig+0x2cc>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80065c8:	2b30      	cmp	r3, #48	@ 0x30
 80065ca:	d016      	beq.n	80065fa <UART_SetConfig+0x19a>
 80065cc:	2b30      	cmp	r3, #48	@ 0x30
 80065ce:	d818      	bhi.n	8006602 <UART_SetConfig+0x1a2>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d00a      	beq.n	80065ea <UART_SetConfig+0x18a>
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d814      	bhi.n	8006602 <UART_SetConfig+0x1a2>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <UART_SetConfig+0x182>
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d008      	beq.n	80065f2 <UART_SetConfig+0x192>
 80065e0:	e00f      	b.n	8006602 <UART_SetConfig+0x1a2>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e8:	e0ad      	b.n	8006746 <UART_SetConfig+0x2e6>
 80065ea:	2302      	movs	r3, #2
 80065ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f0:	e0a9      	b.n	8006746 <UART_SetConfig+0x2e6>
 80065f2:	2304      	movs	r3, #4
 80065f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f8:	e0a5      	b.n	8006746 <UART_SetConfig+0x2e6>
 80065fa:	2308      	movs	r3, #8
 80065fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006600:	e0a1      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006602:	2310      	movs	r3, #16
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006608:	e09d      	b.n	8006746 <UART_SetConfig+0x2e6>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a4a      	ldr	r2, [pc, #296]	@ (8006738 <UART_SetConfig+0x2d8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d125      	bne.n	8006660 <UART_SetConfig+0x200>
 8006614:	4b45      	ldr	r3, [pc, #276]	@ (800672c <UART_SetConfig+0x2cc>)
 8006616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800661a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800661e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006620:	d016      	beq.n	8006650 <UART_SetConfig+0x1f0>
 8006622:	2bc0      	cmp	r3, #192	@ 0xc0
 8006624:	d818      	bhi.n	8006658 <UART_SetConfig+0x1f8>
 8006626:	2b80      	cmp	r3, #128	@ 0x80
 8006628:	d00a      	beq.n	8006640 <UART_SetConfig+0x1e0>
 800662a:	2b80      	cmp	r3, #128	@ 0x80
 800662c:	d814      	bhi.n	8006658 <UART_SetConfig+0x1f8>
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <UART_SetConfig+0x1d8>
 8006632:	2b40      	cmp	r3, #64	@ 0x40
 8006634:	d008      	beq.n	8006648 <UART_SetConfig+0x1e8>
 8006636:	e00f      	b.n	8006658 <UART_SetConfig+0x1f8>
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663e:	e082      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e07e      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664e:	e07a      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006656:	e076      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e072      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a35      	ldr	r2, [pc, #212]	@ (800673c <UART_SetConfig+0x2dc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d12a      	bne.n	80066c0 <UART_SetConfig+0x260>
 800666a:	4b30      	ldr	r3, [pc, #192]	@ (800672c <UART_SetConfig+0x2cc>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006674:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006678:	d01a      	beq.n	80066b0 <UART_SetConfig+0x250>
 800667a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800667e:	d81b      	bhi.n	80066b8 <UART_SetConfig+0x258>
 8006680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006684:	d00c      	beq.n	80066a0 <UART_SetConfig+0x240>
 8006686:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800668a:	d815      	bhi.n	80066b8 <UART_SetConfig+0x258>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <UART_SetConfig+0x238>
 8006690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006694:	d008      	beq.n	80066a8 <UART_SetConfig+0x248>
 8006696:	e00f      	b.n	80066b8 <UART_SetConfig+0x258>
 8006698:	2300      	movs	r3, #0
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800669e:	e052      	b.n	8006746 <UART_SetConfig+0x2e6>
 80066a0:	2302      	movs	r3, #2
 80066a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066a6:	e04e      	b.n	8006746 <UART_SetConfig+0x2e6>
 80066a8:	2304      	movs	r3, #4
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ae:	e04a      	b.n	8006746 <UART_SetConfig+0x2e6>
 80066b0:	2308      	movs	r3, #8
 80066b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066b6:	e046      	b.n	8006746 <UART_SetConfig+0x2e6>
 80066b8:	2310      	movs	r3, #16
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066be:	e042      	b.n	8006746 <UART_SetConfig+0x2e6>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a17      	ldr	r2, [pc, #92]	@ (8006724 <UART_SetConfig+0x2c4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d13a      	bne.n	8006740 <UART_SetConfig+0x2e0>
 80066ca:	4b18      	ldr	r3, [pc, #96]	@ (800672c <UART_SetConfig+0x2cc>)
 80066cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80066d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066d8:	d01a      	beq.n	8006710 <UART_SetConfig+0x2b0>
 80066da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066de:	d81b      	bhi.n	8006718 <UART_SetConfig+0x2b8>
 80066e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066e4:	d00c      	beq.n	8006700 <UART_SetConfig+0x2a0>
 80066e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ea:	d815      	bhi.n	8006718 <UART_SetConfig+0x2b8>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d003      	beq.n	80066f8 <UART_SetConfig+0x298>
 80066f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066f4:	d008      	beq.n	8006708 <UART_SetConfig+0x2a8>
 80066f6:	e00f      	b.n	8006718 <UART_SetConfig+0x2b8>
 80066f8:	2300      	movs	r3, #0
 80066fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066fe:	e022      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006700:	2302      	movs	r3, #2
 8006702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006706:	e01e      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006708:	2304      	movs	r3, #4
 800670a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800670e:	e01a      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006710:	2308      	movs	r3, #8
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006716:	e016      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006718:	2310      	movs	r3, #16
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800671e:	e012      	b.n	8006746 <UART_SetConfig+0x2e6>
 8006720:	efff69f3 	.word	0xefff69f3
 8006724:	40008000 	.word	0x40008000
 8006728:	40013800 	.word	0x40013800
 800672c:	40021000 	.word	0x40021000
 8006730:	40004400 	.word	0x40004400
 8006734:	40004800 	.word	0x40004800
 8006738:	40004c00 	.word	0x40004c00
 800673c:	40005000 	.word	0x40005000
 8006740:	2310      	movs	r3, #16
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a9f      	ldr	r2, [pc, #636]	@ (80069c8 <UART_SetConfig+0x568>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d17a      	bne.n	8006846 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006750:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006754:	2b08      	cmp	r3, #8
 8006756:	d824      	bhi.n	80067a2 <UART_SetConfig+0x342>
 8006758:	a201      	add	r2, pc, #4	@ (adr r2, 8006760 <UART_SetConfig+0x300>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006785 	.word	0x08006785
 8006764:	080067a3 	.word	0x080067a3
 8006768:	0800678d 	.word	0x0800678d
 800676c:	080067a3 	.word	0x080067a3
 8006770:	08006793 	.word	0x08006793
 8006774:	080067a3 	.word	0x080067a3
 8006778:	080067a3 	.word	0x080067a3
 800677c:	080067a3 	.word	0x080067a3
 8006780:	0800679b 	.word	0x0800679b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006784:	f7fd fd18 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8006788:	61f8      	str	r0, [r7, #28]
        break;
 800678a:	e010      	b.n	80067ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4b8f      	ldr	r3, [pc, #572]	@ (80069cc <UART_SetConfig+0x56c>)
 800678e:	61fb      	str	r3, [r7, #28]
        break;
 8006790:	e00d      	b.n	80067ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fd fc79 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8006796:	61f8      	str	r0, [r7, #28]
        break;
 8006798:	e009      	b.n	80067ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679e:	61fb      	str	r3, [r7, #28]
        break;
 80067a0:	e005      	b.n	80067ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 80fb 	beq.w	80069ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685a      	ldr	r2, [r3, #4]
 80067ba:	4613      	mov	r3, r2
 80067bc:	005b      	lsls	r3, r3, #1
 80067be:	4413      	add	r3, r2
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d305      	bcc.n	80067d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067cc:	69fa      	ldr	r2, [r7, #28]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d903      	bls.n	80067da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067d8:	e0e8      	b.n	80069ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	2200      	movs	r2, #0
 80067de:	461c      	mov	r4, r3
 80067e0:	4615      	mov	r5, r2
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	022b      	lsls	r3, r5, #8
 80067ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80067f0:	0222      	lsls	r2, r4, #8
 80067f2:	68f9      	ldr	r1, [r7, #12]
 80067f4:	6849      	ldr	r1, [r1, #4]
 80067f6:	0849      	lsrs	r1, r1, #1
 80067f8:	2000      	movs	r0, #0
 80067fa:	4688      	mov	r8, r1
 80067fc:	4681      	mov	r9, r0
 80067fe:	eb12 0a08 	adds.w	sl, r2, r8
 8006802:	eb43 0b09 	adc.w	fp, r3, r9
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006814:	4650      	mov	r0, sl
 8006816:	4659      	mov	r1, fp
 8006818:	f7f9 fd3a 	bl	8000290 <__aeabi_uldivmod>
 800681c:	4602      	mov	r2, r0
 800681e:	460b      	mov	r3, r1
 8006820:	4613      	mov	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800682a:	d308      	bcc.n	800683e <UART_SetConfig+0x3de>
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006832:	d204      	bcs.n	800683e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	60da      	str	r2, [r3, #12]
 800683c:	e0b6      	b.n	80069ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006844:	e0b2      	b.n	80069ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800684e:	d15e      	bne.n	800690e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006850:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006854:	2b08      	cmp	r3, #8
 8006856:	d828      	bhi.n	80068aa <UART_SetConfig+0x44a>
 8006858:	a201      	add	r2, pc, #4	@ (adr r2, 8006860 <UART_SetConfig+0x400>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006885 	.word	0x08006885
 8006864:	0800688d 	.word	0x0800688d
 8006868:	08006895 	.word	0x08006895
 800686c:	080068ab 	.word	0x080068ab
 8006870:	0800689b 	.word	0x0800689b
 8006874:	080068ab 	.word	0x080068ab
 8006878:	080068ab 	.word	0x080068ab
 800687c:	080068ab 	.word	0x080068ab
 8006880:	080068a3 	.word	0x080068a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006884:	f7fd fc98 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8006888:	61f8      	str	r0, [r7, #28]
        break;
 800688a:	e014      	b.n	80068b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800688c:	f7fd fcaa 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 8006890:	61f8      	str	r0, [r7, #28]
        break;
 8006892:	e010      	b.n	80068b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006894:	4b4d      	ldr	r3, [pc, #308]	@ (80069cc <UART_SetConfig+0x56c>)
 8006896:	61fb      	str	r3, [r7, #28]
        break;
 8006898:	e00d      	b.n	80068b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800689a:	f7fd fbf5 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 800689e:	61f8      	str	r0, [r7, #28]
        break;
 80068a0:	e009      	b.n	80068b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a6:	61fb      	str	r3, [r7, #28]
        break;
 80068a8:	e005      	b.n	80068b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d077      	beq.n	80069ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	005a      	lsls	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	085b      	lsrs	r3, r3, #1
 80068c6:	441a      	add	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	2b0f      	cmp	r3, #15
 80068d6:	d916      	bls.n	8006906 <UART_SetConfig+0x4a6>
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068de:	d212      	bcs.n	8006906 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	f023 030f 	bic.w	r3, r3, #15
 80068e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	8afb      	ldrh	r3, [r7, #22]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	8afa      	ldrh	r2, [r7, #22]
 8006902:	60da      	str	r2, [r3, #12]
 8006904:	e052      	b.n	80069ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800690c:	e04e      	b.n	80069ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800690e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006912:	2b08      	cmp	r3, #8
 8006914:	d827      	bhi.n	8006966 <UART_SetConfig+0x506>
 8006916:	a201      	add	r2, pc, #4	@ (adr r2, 800691c <UART_SetConfig+0x4bc>)
 8006918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691c:	08006941 	.word	0x08006941
 8006920:	08006949 	.word	0x08006949
 8006924:	08006951 	.word	0x08006951
 8006928:	08006967 	.word	0x08006967
 800692c:	08006957 	.word	0x08006957
 8006930:	08006967 	.word	0x08006967
 8006934:	08006967 	.word	0x08006967
 8006938:	08006967 	.word	0x08006967
 800693c:	0800695f 	.word	0x0800695f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006940:	f7fd fc3a 	bl	80041b8 <HAL_RCC_GetPCLK1Freq>
 8006944:	61f8      	str	r0, [r7, #28]
        break;
 8006946:	e014      	b.n	8006972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006948:	f7fd fc4c 	bl	80041e4 <HAL_RCC_GetPCLK2Freq>
 800694c:	61f8      	str	r0, [r7, #28]
        break;
 800694e:	e010      	b.n	8006972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006950:	4b1e      	ldr	r3, [pc, #120]	@ (80069cc <UART_SetConfig+0x56c>)
 8006952:	61fb      	str	r3, [r7, #28]
        break;
 8006954:	e00d      	b.n	8006972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006956:	f7fd fb97 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 800695a:	61f8      	str	r0, [r7, #28]
        break;
 800695c:	e009      	b.n	8006972 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800695e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006962:	61fb      	str	r3, [r7, #28]
        break;
 8006964:	e005      	b.n	8006972 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006970:	bf00      	nop
    }

    if (pclk != 0U)
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d019      	beq.n	80069ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	085a      	lsrs	r2, r3, #1
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	441a      	add	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	fbb2 f3f3 	udiv	r3, r2, r3
 800698a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b0f      	cmp	r3, #15
 8006990:	d909      	bls.n	80069a6 <UART_SetConfig+0x546>
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006998:	d205      	bcs.n	80069a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	b29a      	uxth	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	60da      	str	r2, [r3, #12]
 80069a4:	e002      	b.n	80069ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3728      	adds	r7, #40	@ 0x28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069c6:	bf00      	nop
 80069c8:	40008000 	.word	0x40008000
 80069cc:	00f42400 	.word	0x00f42400

080069d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	f003 0301 	and.w	r3, r3, #1
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d00a      	beq.n	8006a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00a      	beq.n	8006a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	f003 0310 	and.w	r3, r3, #16
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00a      	beq.n	8006a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a86:	f003 0320 	and.w	r3, r3, #32
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00a      	beq.n	8006aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d01a      	beq.n	8006ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ace:	d10a      	bne.n	8006ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	605a      	str	r2, [r3, #4]
  }
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b098      	sub	sp, #96	@ 0x60
 8006b18:	af02      	add	r7, sp, #8
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b24:	f7fa fede 	bl	80018e4 <HAL_GetTick>
 8006b28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0308 	and.w	r3, r3, #8
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d12e      	bne.n	8006b96 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b40:	2200      	movs	r2, #0
 8006b42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f88c 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d021      	beq.n	8006b96 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e6      	bne.n	8006b52 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e062      	b.n	8006c5c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d149      	bne.n	8006c38 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ba4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bac:	2200      	movs	r2, #0
 8006bae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f856 	bl	8006c64 <UART_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d03c      	beq.n	8006c38 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	623b      	str	r3, [r7, #32]
   return(result);
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e6      	bne.n	8006bbe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0301 	bic.w	r3, r3, #1
 8006c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c10:	61fa      	str	r2, [r7, #28]
 8006c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	69b9      	ldr	r1, [r7, #24]
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e5      	bne.n	8006bf0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e011      	b.n	8006c5c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3758      	adds	r7, #88	@ 0x58
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	4613      	mov	r3, r2
 8006c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c74:	e04f      	b.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d04b      	beq.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7e:	f7fa fe31 	bl	80018e4 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d302      	bcc.n	8006c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d101      	bne.n	8006c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e04e      	b.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d037      	beq.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b80      	cmp	r3, #128	@ 0x80
 8006caa:	d034      	beq.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	2b40      	cmp	r3, #64	@ 0x40
 8006cb0:	d031      	beq.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f003 0308 	and.w	r3, r3, #8
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d110      	bne.n	8006ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f838 	bl	8006d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2208      	movs	r2, #8
 8006cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e029      	b.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf0:	d111      	bne.n	8006d16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f81e 	bl	8006d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e00f      	b.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	bf0c      	ite	eq
 8006d26:	2301      	moveq	r3, #1
 8006d28:	2300      	movne	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d0a0      	beq.n	8006c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b095      	sub	sp, #84	@ 0x54
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e6      	bne.n	8006d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	f023 0301 	bic.w	r3, r3, #1
 8006d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3308      	adds	r3, #8
 8006d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e5      	bne.n	8006d78 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d118      	bne.n	8006de6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f023 0310 	bic.w	r3, r3, #16
 8006dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6979      	ldr	r1, [r7, #20]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	613b      	str	r3, [r7, #16]
   return(result);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e6      	bne.n	8006db4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006dfa:	bf00      	nop
 8006dfc:	3754      	adds	r7, #84	@ 0x54
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <std>:
 8006e08:	2300      	movs	r3, #0
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e16:	6083      	str	r3, [r0, #8]
 8006e18:	8181      	strh	r1, [r0, #12]
 8006e1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e1c:	81c2      	strh	r2, [r0, #14]
 8006e1e:	6183      	str	r3, [r0, #24]
 8006e20:	4619      	mov	r1, r3
 8006e22:	2208      	movs	r2, #8
 8006e24:	305c      	adds	r0, #92	@ 0x5c
 8006e26:	f000 f906 	bl	8007036 <memset>
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <std+0x58>)
 8006e2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e64 <std+0x5c>)
 8006e30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <std+0x60>)
 8006e34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <std+0x64>)
 8006e38:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <std+0x68>)
 8006e3c:	6224      	str	r4, [r4, #32]
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d006      	beq.n	8006e50 <std+0x48>
 8006e42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e46:	4294      	cmp	r4, r2
 8006e48:	d002      	beq.n	8006e50 <std+0x48>
 8006e4a:	33d0      	adds	r3, #208	@ 0xd0
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	d105      	bne.n	8006e5c <std+0x54>
 8006e50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e58:	f000 b966 	b.w	8007128 <__retarget_lock_init_recursive>
 8006e5c:	bd10      	pop	{r4, pc}
 8006e5e:	bf00      	nop
 8006e60:	08006fb1 	.word	0x08006fb1
 8006e64:	08006fd3 	.word	0x08006fd3
 8006e68:	0800700b 	.word	0x0800700b
 8006e6c:	0800702f 	.word	0x0800702f
 8006e70:	200003f8 	.word	0x200003f8

08006e74 <stdio_exit_handler>:
 8006e74:	4a02      	ldr	r2, [pc, #8]	@ (8006e80 <stdio_exit_handler+0xc>)
 8006e76:	4903      	ldr	r1, [pc, #12]	@ (8006e84 <stdio_exit_handler+0x10>)
 8006e78:	4803      	ldr	r0, [pc, #12]	@ (8006e88 <stdio_exit_handler+0x14>)
 8006e7a:	f000 b869 	b.w	8006f50 <_fwalk_sglue>
 8006e7e:	bf00      	nop
 8006e80:	2000000c 	.word	0x2000000c
 8006e84:	080079c9 	.word	0x080079c9
 8006e88:	2000001c 	.word	0x2000001c

08006e8c <cleanup_stdio>:
 8006e8c:	6841      	ldr	r1, [r0, #4]
 8006e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec0 <cleanup_stdio+0x34>)
 8006e90:	4299      	cmp	r1, r3
 8006e92:	b510      	push	{r4, lr}
 8006e94:	4604      	mov	r4, r0
 8006e96:	d001      	beq.n	8006e9c <cleanup_stdio+0x10>
 8006e98:	f000 fd96 	bl	80079c8 <_fflush_r>
 8006e9c:	68a1      	ldr	r1, [r4, #8]
 8006e9e:	4b09      	ldr	r3, [pc, #36]	@ (8006ec4 <cleanup_stdio+0x38>)
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	d002      	beq.n	8006eaa <cleanup_stdio+0x1e>
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 fd8f 	bl	80079c8 <_fflush_r>
 8006eaa:	68e1      	ldr	r1, [r4, #12]
 8006eac:	4b06      	ldr	r3, [pc, #24]	@ (8006ec8 <cleanup_stdio+0x3c>)
 8006eae:	4299      	cmp	r1, r3
 8006eb0:	d004      	beq.n	8006ebc <cleanup_stdio+0x30>
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb8:	f000 bd86 	b.w	80079c8 <_fflush_r>
 8006ebc:	bd10      	pop	{r4, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200003f8 	.word	0x200003f8
 8006ec4:	20000460 	.word	0x20000460
 8006ec8:	200004c8 	.word	0x200004c8

08006ecc <global_stdio_init.part.0>:
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	4b0b      	ldr	r3, [pc, #44]	@ (8006efc <global_stdio_init.part.0+0x30>)
 8006ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8006f00 <global_stdio_init.part.0+0x34>)
 8006ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8006f04 <global_stdio_init.part.0+0x38>)
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2104      	movs	r1, #4
 8006edc:	f7ff ff94 	bl	8006e08 <std>
 8006ee0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	2109      	movs	r1, #9
 8006ee8:	f7ff ff8e 	bl	8006e08 <std>
 8006eec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ef0:	2202      	movs	r2, #2
 8006ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef6:	2112      	movs	r1, #18
 8006ef8:	f7ff bf86 	b.w	8006e08 <std>
 8006efc:	20000530 	.word	0x20000530
 8006f00:	200003f8 	.word	0x200003f8
 8006f04:	08006e75 	.word	0x08006e75

08006f08 <__sfp_lock_acquire>:
 8006f08:	4801      	ldr	r0, [pc, #4]	@ (8006f10 <__sfp_lock_acquire+0x8>)
 8006f0a:	f000 b90e 	b.w	800712a <__retarget_lock_acquire_recursive>
 8006f0e:	bf00      	nop
 8006f10:	20000539 	.word	0x20000539

08006f14 <__sfp_lock_release>:
 8006f14:	4801      	ldr	r0, [pc, #4]	@ (8006f1c <__sfp_lock_release+0x8>)
 8006f16:	f000 b909 	b.w	800712c <__retarget_lock_release_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	20000539 	.word	0x20000539

08006f20 <__sinit>:
 8006f20:	b510      	push	{r4, lr}
 8006f22:	4604      	mov	r4, r0
 8006f24:	f7ff fff0 	bl	8006f08 <__sfp_lock_acquire>
 8006f28:	6a23      	ldr	r3, [r4, #32]
 8006f2a:	b11b      	cbz	r3, 8006f34 <__sinit+0x14>
 8006f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f30:	f7ff bff0 	b.w	8006f14 <__sfp_lock_release>
 8006f34:	4b04      	ldr	r3, [pc, #16]	@ (8006f48 <__sinit+0x28>)
 8006f36:	6223      	str	r3, [r4, #32]
 8006f38:	4b04      	ldr	r3, [pc, #16]	@ (8006f4c <__sinit+0x2c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1f5      	bne.n	8006f2c <__sinit+0xc>
 8006f40:	f7ff ffc4 	bl	8006ecc <global_stdio_init.part.0>
 8006f44:	e7f2      	b.n	8006f2c <__sinit+0xc>
 8006f46:	bf00      	nop
 8006f48:	08006e8d 	.word	0x08006e8d
 8006f4c:	20000530 	.word	0x20000530

08006f50 <_fwalk_sglue>:
 8006f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f54:	4607      	mov	r7, r0
 8006f56:	4688      	mov	r8, r1
 8006f58:	4614      	mov	r4, r2
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f60:	f1b9 0901 	subs.w	r9, r9, #1
 8006f64:	d505      	bpl.n	8006f72 <_fwalk_sglue+0x22>
 8006f66:	6824      	ldr	r4, [r4, #0]
 8006f68:	2c00      	cmp	r4, #0
 8006f6a:	d1f7      	bne.n	8006f5c <_fwalk_sglue+0xc>
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f72:	89ab      	ldrh	r3, [r5, #12]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d907      	bls.n	8006f88 <_fwalk_sglue+0x38>
 8006f78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	d003      	beq.n	8006f88 <_fwalk_sglue+0x38>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4638      	mov	r0, r7
 8006f84:	47c0      	blx	r8
 8006f86:	4306      	orrs	r6, r0
 8006f88:	3568      	adds	r5, #104	@ 0x68
 8006f8a:	e7e9      	b.n	8006f60 <_fwalk_sglue+0x10>

08006f8c <iprintf>:
 8006f8c:	b40f      	push	{r0, r1, r2, r3}
 8006f8e:	b507      	push	{r0, r1, r2, lr}
 8006f90:	4906      	ldr	r1, [pc, #24]	@ (8006fac <iprintf+0x20>)
 8006f92:	ab04      	add	r3, sp, #16
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f9a:	6881      	ldr	r1, [r0, #8]
 8006f9c:	9301      	str	r3, [sp, #4]
 8006f9e:	f000 f9e9 	bl	8007374 <_vfiprintf_r>
 8006fa2:	b003      	add	sp, #12
 8006fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa8:	b004      	add	sp, #16
 8006faa:	4770      	bx	lr
 8006fac:	20000018 	.word	0x20000018

08006fb0 <__sread>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fb8:	f000 f868 	bl	800708c <_read_r>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	bfab      	itete	ge
 8006fc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fc4:	181b      	addge	r3, r3, r0
 8006fc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fca:	bfac      	ite	ge
 8006fcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fce:	81a3      	strhlt	r3, [r4, #12]
 8006fd0:	bd10      	pop	{r4, pc}

08006fd2 <__swrite>:
 8006fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd6:	461f      	mov	r7, r3
 8006fd8:	898b      	ldrh	r3, [r1, #12]
 8006fda:	05db      	lsls	r3, r3, #23
 8006fdc:	4605      	mov	r5, r0
 8006fde:	460c      	mov	r4, r1
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	d505      	bpl.n	8006ff0 <__swrite+0x1e>
 8006fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe8:	2302      	movs	r3, #2
 8006fea:	2200      	movs	r2, #0
 8006fec:	f000 f83c 	bl	8007068 <_lseek_r>
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	4632      	mov	r2, r6
 8006ffe:	463b      	mov	r3, r7
 8007000:	4628      	mov	r0, r5
 8007002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	f000 b853 	b.w	80070b0 <_write_r>

0800700a <__sseek>:
 800700a:	b510      	push	{r4, lr}
 800700c:	460c      	mov	r4, r1
 800700e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007012:	f000 f829 	bl	8007068 <_lseek_r>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	bf15      	itete	ne
 800701c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800701e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007026:	81a3      	strheq	r3, [r4, #12]
 8007028:	bf18      	it	ne
 800702a:	81a3      	strhne	r3, [r4, #12]
 800702c:	bd10      	pop	{r4, pc}

0800702e <__sclose>:
 800702e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007032:	f000 b809 	b.w	8007048 <_close_r>

08007036 <memset>:
 8007036:	4402      	add	r2, r0
 8007038:	4603      	mov	r3, r0
 800703a:	4293      	cmp	r3, r2
 800703c:	d100      	bne.n	8007040 <memset+0xa>
 800703e:	4770      	bx	lr
 8007040:	f803 1b01 	strb.w	r1, [r3], #1
 8007044:	e7f9      	b.n	800703a <memset+0x4>
	...

08007048 <_close_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	@ (8007064 <_close_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fa f89f 	bl	8001196 <_close>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_close_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_close_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	20000534 	.word	0x20000534

08007068 <_lseek_r>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	@ (8007088 <_lseek_r+0x20>)
 800706c:	4604      	mov	r4, r0
 800706e:	4608      	mov	r0, r1
 8007070:	4611      	mov	r1, r2
 8007072:	2200      	movs	r2, #0
 8007074:	602a      	str	r2, [r5, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f7fa f8b4 	bl	80011e4 <_lseek>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d102      	bne.n	8007086 <_lseek_r+0x1e>
 8007080:	682b      	ldr	r3, [r5, #0]
 8007082:	b103      	cbz	r3, 8007086 <_lseek_r+0x1e>
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	20000534 	.word	0x20000534

0800708c <_read_r>:
 800708c:	b538      	push	{r3, r4, r5, lr}
 800708e:	4d07      	ldr	r5, [pc, #28]	@ (80070ac <_read_r+0x20>)
 8007090:	4604      	mov	r4, r0
 8007092:	4608      	mov	r0, r1
 8007094:	4611      	mov	r1, r2
 8007096:	2200      	movs	r2, #0
 8007098:	602a      	str	r2, [r5, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	f7fa f842 	bl	8001124 <_read>
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d102      	bne.n	80070aa <_read_r+0x1e>
 80070a4:	682b      	ldr	r3, [r5, #0]
 80070a6:	b103      	cbz	r3, 80070aa <_read_r+0x1e>
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	bd38      	pop	{r3, r4, r5, pc}
 80070ac:	20000534 	.word	0x20000534

080070b0 <_write_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d07      	ldr	r5, [pc, #28]	@ (80070d0 <_write_r+0x20>)
 80070b4:	4604      	mov	r4, r0
 80070b6:	4608      	mov	r0, r1
 80070b8:	4611      	mov	r1, r2
 80070ba:	2200      	movs	r2, #0
 80070bc:	602a      	str	r2, [r5, #0]
 80070be:	461a      	mov	r2, r3
 80070c0:	f7fa f84d 	bl	800115e <_write>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_write_r+0x1e>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_write_r+0x1e>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20000534 	.word	0x20000534

080070d4 <__errno>:
 80070d4:	4b01      	ldr	r3, [pc, #4]	@ (80070dc <__errno+0x8>)
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	20000018 	.word	0x20000018

080070e0 <__libc_init_array>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007118 <__libc_init_array+0x38>)
 80070e4:	4c0d      	ldr	r4, [pc, #52]	@ (800711c <__libc_init_array+0x3c>)
 80070e6:	1b64      	subs	r4, r4, r5
 80070e8:	10a4      	asrs	r4, r4, #2
 80070ea:	2600      	movs	r6, #0
 80070ec:	42a6      	cmp	r6, r4
 80070ee:	d109      	bne.n	8007104 <__libc_init_array+0x24>
 80070f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007120 <__libc_init_array+0x40>)
 80070f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007124 <__libc_init_array+0x44>)
 80070f4:	f000 fdb8 	bl	8007c68 <_init>
 80070f8:	1b64      	subs	r4, r4, r5
 80070fa:	10a4      	asrs	r4, r4, #2
 80070fc:	2600      	movs	r6, #0
 80070fe:	42a6      	cmp	r6, r4
 8007100:	d105      	bne.n	800710e <__libc_init_array+0x2e>
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	f855 3b04 	ldr.w	r3, [r5], #4
 8007108:	4798      	blx	r3
 800710a:	3601      	adds	r6, #1
 800710c:	e7ee      	b.n	80070ec <__libc_init_array+0xc>
 800710e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007112:	4798      	blx	r3
 8007114:	3601      	adds	r6, #1
 8007116:	e7f2      	b.n	80070fe <__libc_init_array+0x1e>
 8007118:	08007f6c 	.word	0x08007f6c
 800711c:	08007f6c 	.word	0x08007f6c
 8007120:	08007f6c 	.word	0x08007f6c
 8007124:	08007f70 	.word	0x08007f70

08007128 <__retarget_lock_init_recursive>:
 8007128:	4770      	bx	lr

0800712a <__retarget_lock_acquire_recursive>:
 800712a:	4770      	bx	lr

0800712c <__retarget_lock_release_recursive>:
 800712c:	4770      	bx	lr
	...

08007130 <_free_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4605      	mov	r5, r0
 8007134:	2900      	cmp	r1, #0
 8007136:	d041      	beq.n	80071bc <_free_r+0x8c>
 8007138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800713c:	1f0c      	subs	r4, r1, #4
 800713e:	2b00      	cmp	r3, #0
 8007140:	bfb8      	it	lt
 8007142:	18e4      	addlt	r4, r4, r3
 8007144:	f000 f8e0 	bl	8007308 <__malloc_lock>
 8007148:	4a1d      	ldr	r2, [pc, #116]	@ (80071c0 <_free_r+0x90>)
 800714a:	6813      	ldr	r3, [r2, #0]
 800714c:	b933      	cbnz	r3, 800715c <_free_r+0x2c>
 800714e:	6063      	str	r3, [r4, #4]
 8007150:	6014      	str	r4, [r2, #0]
 8007152:	4628      	mov	r0, r5
 8007154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007158:	f000 b8dc 	b.w	8007314 <__malloc_unlock>
 800715c:	42a3      	cmp	r3, r4
 800715e:	d908      	bls.n	8007172 <_free_r+0x42>
 8007160:	6820      	ldr	r0, [r4, #0]
 8007162:	1821      	adds	r1, r4, r0
 8007164:	428b      	cmp	r3, r1
 8007166:	bf01      	itttt	eq
 8007168:	6819      	ldreq	r1, [r3, #0]
 800716a:	685b      	ldreq	r3, [r3, #4]
 800716c:	1809      	addeq	r1, r1, r0
 800716e:	6021      	streq	r1, [r4, #0]
 8007170:	e7ed      	b.n	800714e <_free_r+0x1e>
 8007172:	461a      	mov	r2, r3
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	b10b      	cbz	r3, 800717c <_free_r+0x4c>
 8007178:	42a3      	cmp	r3, r4
 800717a:	d9fa      	bls.n	8007172 <_free_r+0x42>
 800717c:	6811      	ldr	r1, [r2, #0]
 800717e:	1850      	adds	r0, r2, r1
 8007180:	42a0      	cmp	r0, r4
 8007182:	d10b      	bne.n	800719c <_free_r+0x6c>
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	4401      	add	r1, r0
 8007188:	1850      	adds	r0, r2, r1
 800718a:	4283      	cmp	r3, r0
 800718c:	6011      	str	r1, [r2, #0]
 800718e:	d1e0      	bne.n	8007152 <_free_r+0x22>
 8007190:	6818      	ldr	r0, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	6053      	str	r3, [r2, #4]
 8007196:	4408      	add	r0, r1
 8007198:	6010      	str	r0, [r2, #0]
 800719a:	e7da      	b.n	8007152 <_free_r+0x22>
 800719c:	d902      	bls.n	80071a4 <_free_r+0x74>
 800719e:	230c      	movs	r3, #12
 80071a0:	602b      	str	r3, [r5, #0]
 80071a2:	e7d6      	b.n	8007152 <_free_r+0x22>
 80071a4:	6820      	ldr	r0, [r4, #0]
 80071a6:	1821      	adds	r1, r4, r0
 80071a8:	428b      	cmp	r3, r1
 80071aa:	bf04      	itt	eq
 80071ac:	6819      	ldreq	r1, [r3, #0]
 80071ae:	685b      	ldreq	r3, [r3, #4]
 80071b0:	6063      	str	r3, [r4, #4]
 80071b2:	bf04      	itt	eq
 80071b4:	1809      	addeq	r1, r1, r0
 80071b6:	6021      	streq	r1, [r4, #0]
 80071b8:	6054      	str	r4, [r2, #4]
 80071ba:	e7ca      	b.n	8007152 <_free_r+0x22>
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	20000540 	.word	0x20000540

080071c4 <sbrk_aligned>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007204 <sbrk_aligned+0x40>)
 80071c8:	460c      	mov	r4, r1
 80071ca:	6831      	ldr	r1, [r6, #0]
 80071cc:	4605      	mov	r5, r0
 80071ce:	b911      	cbnz	r1, 80071d6 <sbrk_aligned+0x12>
 80071d0:	f000 fcb6 	bl	8007b40 <_sbrk_r>
 80071d4:	6030      	str	r0, [r6, #0]
 80071d6:	4621      	mov	r1, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	f000 fcb1 	bl	8007b40 <_sbrk_r>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	d103      	bne.n	80071ea <sbrk_aligned+0x26>
 80071e2:	f04f 34ff 	mov.w	r4, #4294967295
 80071e6:	4620      	mov	r0, r4
 80071e8:	bd70      	pop	{r4, r5, r6, pc}
 80071ea:	1cc4      	adds	r4, r0, #3
 80071ec:	f024 0403 	bic.w	r4, r4, #3
 80071f0:	42a0      	cmp	r0, r4
 80071f2:	d0f8      	beq.n	80071e6 <sbrk_aligned+0x22>
 80071f4:	1a21      	subs	r1, r4, r0
 80071f6:	4628      	mov	r0, r5
 80071f8:	f000 fca2 	bl	8007b40 <_sbrk_r>
 80071fc:	3001      	adds	r0, #1
 80071fe:	d1f2      	bne.n	80071e6 <sbrk_aligned+0x22>
 8007200:	e7ef      	b.n	80071e2 <sbrk_aligned+0x1e>
 8007202:	bf00      	nop
 8007204:	2000053c 	.word	0x2000053c

08007208 <_malloc_r>:
 8007208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720c:	1ccd      	adds	r5, r1, #3
 800720e:	f025 0503 	bic.w	r5, r5, #3
 8007212:	3508      	adds	r5, #8
 8007214:	2d0c      	cmp	r5, #12
 8007216:	bf38      	it	cc
 8007218:	250c      	movcc	r5, #12
 800721a:	2d00      	cmp	r5, #0
 800721c:	4606      	mov	r6, r0
 800721e:	db01      	blt.n	8007224 <_malloc_r+0x1c>
 8007220:	42a9      	cmp	r1, r5
 8007222:	d904      	bls.n	800722e <_malloc_r+0x26>
 8007224:	230c      	movs	r3, #12
 8007226:	6033      	str	r3, [r6, #0]
 8007228:	2000      	movs	r0, #0
 800722a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800722e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007304 <_malloc_r+0xfc>
 8007232:	f000 f869 	bl	8007308 <__malloc_lock>
 8007236:	f8d8 3000 	ldr.w	r3, [r8]
 800723a:	461c      	mov	r4, r3
 800723c:	bb44      	cbnz	r4, 8007290 <_malloc_r+0x88>
 800723e:	4629      	mov	r1, r5
 8007240:	4630      	mov	r0, r6
 8007242:	f7ff ffbf 	bl	80071c4 <sbrk_aligned>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	4604      	mov	r4, r0
 800724a:	d158      	bne.n	80072fe <_malloc_r+0xf6>
 800724c:	f8d8 4000 	ldr.w	r4, [r8]
 8007250:	4627      	mov	r7, r4
 8007252:	2f00      	cmp	r7, #0
 8007254:	d143      	bne.n	80072de <_malloc_r+0xd6>
 8007256:	2c00      	cmp	r4, #0
 8007258:	d04b      	beq.n	80072f2 <_malloc_r+0xea>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	4639      	mov	r1, r7
 800725e:	4630      	mov	r0, r6
 8007260:	eb04 0903 	add.w	r9, r4, r3
 8007264:	f000 fc6c 	bl	8007b40 <_sbrk_r>
 8007268:	4581      	cmp	r9, r0
 800726a:	d142      	bne.n	80072f2 <_malloc_r+0xea>
 800726c:	6821      	ldr	r1, [r4, #0]
 800726e:	1a6d      	subs	r5, r5, r1
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f7ff ffa6 	bl	80071c4 <sbrk_aligned>
 8007278:	3001      	adds	r0, #1
 800727a:	d03a      	beq.n	80072f2 <_malloc_r+0xea>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	442b      	add	r3, r5
 8007280:	6023      	str	r3, [r4, #0]
 8007282:	f8d8 3000 	ldr.w	r3, [r8]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	bb62      	cbnz	r2, 80072e4 <_malloc_r+0xdc>
 800728a:	f8c8 7000 	str.w	r7, [r8]
 800728e:	e00f      	b.n	80072b0 <_malloc_r+0xa8>
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	1b52      	subs	r2, r2, r5
 8007294:	d420      	bmi.n	80072d8 <_malloc_r+0xd0>
 8007296:	2a0b      	cmp	r2, #11
 8007298:	d917      	bls.n	80072ca <_malloc_r+0xc2>
 800729a:	1961      	adds	r1, r4, r5
 800729c:	42a3      	cmp	r3, r4
 800729e:	6025      	str	r5, [r4, #0]
 80072a0:	bf18      	it	ne
 80072a2:	6059      	strne	r1, [r3, #4]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	bf08      	it	eq
 80072a8:	f8c8 1000 	streq.w	r1, [r8]
 80072ac:	5162      	str	r2, [r4, r5]
 80072ae:	604b      	str	r3, [r1, #4]
 80072b0:	4630      	mov	r0, r6
 80072b2:	f000 f82f 	bl	8007314 <__malloc_unlock>
 80072b6:	f104 000b 	add.w	r0, r4, #11
 80072ba:	1d23      	adds	r3, r4, #4
 80072bc:	f020 0007 	bic.w	r0, r0, #7
 80072c0:	1ac2      	subs	r2, r0, r3
 80072c2:	bf1c      	itt	ne
 80072c4:	1a1b      	subne	r3, r3, r0
 80072c6:	50a3      	strne	r3, [r4, r2]
 80072c8:	e7af      	b.n	800722a <_malloc_r+0x22>
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	42a3      	cmp	r3, r4
 80072ce:	bf0c      	ite	eq
 80072d0:	f8c8 2000 	streq.w	r2, [r8]
 80072d4:	605a      	strne	r2, [r3, #4]
 80072d6:	e7eb      	b.n	80072b0 <_malloc_r+0xa8>
 80072d8:	4623      	mov	r3, r4
 80072da:	6864      	ldr	r4, [r4, #4]
 80072dc:	e7ae      	b.n	800723c <_malloc_r+0x34>
 80072de:	463c      	mov	r4, r7
 80072e0:	687f      	ldr	r7, [r7, #4]
 80072e2:	e7b6      	b.n	8007252 <_malloc_r+0x4a>
 80072e4:	461a      	mov	r2, r3
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d1fb      	bne.n	80072e4 <_malloc_r+0xdc>
 80072ec:	2300      	movs	r3, #0
 80072ee:	6053      	str	r3, [r2, #4]
 80072f0:	e7de      	b.n	80072b0 <_malloc_r+0xa8>
 80072f2:	230c      	movs	r3, #12
 80072f4:	6033      	str	r3, [r6, #0]
 80072f6:	4630      	mov	r0, r6
 80072f8:	f000 f80c 	bl	8007314 <__malloc_unlock>
 80072fc:	e794      	b.n	8007228 <_malloc_r+0x20>
 80072fe:	6005      	str	r5, [r0, #0]
 8007300:	e7d6      	b.n	80072b0 <_malloc_r+0xa8>
 8007302:	bf00      	nop
 8007304:	20000540 	.word	0x20000540

08007308 <__malloc_lock>:
 8007308:	4801      	ldr	r0, [pc, #4]	@ (8007310 <__malloc_lock+0x8>)
 800730a:	f7ff bf0e 	b.w	800712a <__retarget_lock_acquire_recursive>
 800730e:	bf00      	nop
 8007310:	20000538 	.word	0x20000538

08007314 <__malloc_unlock>:
 8007314:	4801      	ldr	r0, [pc, #4]	@ (800731c <__malloc_unlock+0x8>)
 8007316:	f7ff bf09 	b.w	800712c <__retarget_lock_release_recursive>
 800731a:	bf00      	nop
 800731c:	20000538 	.word	0x20000538

08007320 <__sfputc_r>:
 8007320:	6893      	ldr	r3, [r2, #8]
 8007322:	3b01      	subs	r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	b410      	push	{r4}
 8007328:	6093      	str	r3, [r2, #8]
 800732a:	da08      	bge.n	800733e <__sfputc_r+0x1e>
 800732c:	6994      	ldr	r4, [r2, #24]
 800732e:	42a3      	cmp	r3, r4
 8007330:	db01      	blt.n	8007336 <__sfputc_r+0x16>
 8007332:	290a      	cmp	r1, #10
 8007334:	d103      	bne.n	800733e <__sfputc_r+0x1e>
 8007336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800733a:	f000 bb6d 	b.w	8007a18 <__swbuf_r>
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	1c58      	adds	r0, r3, #1
 8007342:	6010      	str	r0, [r2, #0]
 8007344:	7019      	strb	r1, [r3, #0]
 8007346:	4608      	mov	r0, r1
 8007348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800734c:	4770      	bx	lr

0800734e <__sfputs_r>:
 800734e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007350:	4606      	mov	r6, r0
 8007352:	460f      	mov	r7, r1
 8007354:	4614      	mov	r4, r2
 8007356:	18d5      	adds	r5, r2, r3
 8007358:	42ac      	cmp	r4, r5
 800735a:	d101      	bne.n	8007360 <__sfputs_r+0x12>
 800735c:	2000      	movs	r0, #0
 800735e:	e007      	b.n	8007370 <__sfputs_r+0x22>
 8007360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007364:	463a      	mov	r2, r7
 8007366:	4630      	mov	r0, r6
 8007368:	f7ff ffda 	bl	8007320 <__sfputc_r>
 800736c:	1c43      	adds	r3, r0, #1
 800736e:	d1f3      	bne.n	8007358 <__sfputs_r+0xa>
 8007370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007374 <_vfiprintf_r>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	460d      	mov	r5, r1
 800737a:	b09d      	sub	sp, #116	@ 0x74
 800737c:	4614      	mov	r4, r2
 800737e:	4698      	mov	r8, r3
 8007380:	4606      	mov	r6, r0
 8007382:	b118      	cbz	r0, 800738c <_vfiprintf_r+0x18>
 8007384:	6a03      	ldr	r3, [r0, #32]
 8007386:	b90b      	cbnz	r3, 800738c <_vfiprintf_r+0x18>
 8007388:	f7ff fdca 	bl	8006f20 <__sinit>
 800738c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800738e:	07d9      	lsls	r1, r3, #31
 8007390:	d405      	bmi.n	800739e <_vfiprintf_r+0x2a>
 8007392:	89ab      	ldrh	r3, [r5, #12]
 8007394:	059a      	lsls	r2, r3, #22
 8007396:	d402      	bmi.n	800739e <_vfiprintf_r+0x2a>
 8007398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800739a:	f7ff fec6 	bl	800712a <__retarget_lock_acquire_recursive>
 800739e:	89ab      	ldrh	r3, [r5, #12]
 80073a0:	071b      	lsls	r3, r3, #28
 80073a2:	d501      	bpl.n	80073a8 <_vfiprintf_r+0x34>
 80073a4:	692b      	ldr	r3, [r5, #16]
 80073a6:	b99b      	cbnz	r3, 80073d0 <_vfiprintf_r+0x5c>
 80073a8:	4629      	mov	r1, r5
 80073aa:	4630      	mov	r0, r6
 80073ac:	f000 fb72 	bl	8007a94 <__swsetup_r>
 80073b0:	b170      	cbz	r0, 80073d0 <_vfiprintf_r+0x5c>
 80073b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073b4:	07dc      	lsls	r4, r3, #31
 80073b6:	d504      	bpl.n	80073c2 <_vfiprintf_r+0x4e>
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	b01d      	add	sp, #116	@ 0x74
 80073be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c2:	89ab      	ldrh	r3, [r5, #12]
 80073c4:	0598      	lsls	r0, r3, #22
 80073c6:	d4f7      	bmi.n	80073b8 <_vfiprintf_r+0x44>
 80073c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073ca:	f7ff feaf 	bl	800712c <__retarget_lock_release_recursive>
 80073ce:	e7f3      	b.n	80073b8 <_vfiprintf_r+0x44>
 80073d0:	2300      	movs	r3, #0
 80073d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d4:	2320      	movs	r3, #32
 80073d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073da:	f8cd 800c 	str.w	r8, [sp, #12]
 80073de:	2330      	movs	r3, #48	@ 0x30
 80073e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007590 <_vfiprintf_r+0x21c>
 80073e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073e8:	f04f 0901 	mov.w	r9, #1
 80073ec:	4623      	mov	r3, r4
 80073ee:	469a      	mov	sl, r3
 80073f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073f4:	b10a      	cbz	r2, 80073fa <_vfiprintf_r+0x86>
 80073f6:	2a25      	cmp	r2, #37	@ 0x25
 80073f8:	d1f9      	bne.n	80073ee <_vfiprintf_r+0x7a>
 80073fa:	ebba 0b04 	subs.w	fp, sl, r4
 80073fe:	d00b      	beq.n	8007418 <_vfiprintf_r+0xa4>
 8007400:	465b      	mov	r3, fp
 8007402:	4622      	mov	r2, r4
 8007404:	4629      	mov	r1, r5
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ffa1 	bl	800734e <__sfputs_r>
 800740c:	3001      	adds	r0, #1
 800740e:	f000 80a7 	beq.w	8007560 <_vfiprintf_r+0x1ec>
 8007412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007414:	445a      	add	r2, fp
 8007416:	9209      	str	r2, [sp, #36]	@ 0x24
 8007418:	f89a 3000 	ldrb.w	r3, [sl]
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 809f 	beq.w	8007560 <_vfiprintf_r+0x1ec>
 8007422:	2300      	movs	r3, #0
 8007424:	f04f 32ff 	mov.w	r2, #4294967295
 8007428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800742c:	f10a 0a01 	add.w	sl, sl, #1
 8007430:	9304      	str	r3, [sp, #16]
 8007432:	9307      	str	r3, [sp, #28]
 8007434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007438:	931a      	str	r3, [sp, #104]	@ 0x68
 800743a:	4654      	mov	r4, sl
 800743c:	2205      	movs	r2, #5
 800743e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007442:	4853      	ldr	r0, [pc, #332]	@ (8007590 <_vfiprintf_r+0x21c>)
 8007444:	f7f8 fed4 	bl	80001f0 <memchr>
 8007448:	9a04      	ldr	r2, [sp, #16]
 800744a:	b9d8      	cbnz	r0, 8007484 <_vfiprintf_r+0x110>
 800744c:	06d1      	lsls	r1, r2, #27
 800744e:	bf44      	itt	mi
 8007450:	2320      	movmi	r3, #32
 8007452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007456:	0713      	lsls	r3, r2, #28
 8007458:	bf44      	itt	mi
 800745a:	232b      	movmi	r3, #43	@ 0x2b
 800745c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007460:	f89a 3000 	ldrb.w	r3, [sl]
 8007464:	2b2a      	cmp	r3, #42	@ 0x2a
 8007466:	d015      	beq.n	8007494 <_vfiprintf_r+0x120>
 8007468:	9a07      	ldr	r2, [sp, #28]
 800746a:	4654      	mov	r4, sl
 800746c:	2000      	movs	r0, #0
 800746e:	f04f 0c0a 	mov.w	ip, #10
 8007472:	4621      	mov	r1, r4
 8007474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007478:	3b30      	subs	r3, #48	@ 0x30
 800747a:	2b09      	cmp	r3, #9
 800747c:	d94b      	bls.n	8007516 <_vfiprintf_r+0x1a2>
 800747e:	b1b0      	cbz	r0, 80074ae <_vfiprintf_r+0x13a>
 8007480:	9207      	str	r2, [sp, #28]
 8007482:	e014      	b.n	80074ae <_vfiprintf_r+0x13a>
 8007484:	eba0 0308 	sub.w	r3, r0, r8
 8007488:	fa09 f303 	lsl.w	r3, r9, r3
 800748c:	4313      	orrs	r3, r2
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	46a2      	mov	sl, r4
 8007492:	e7d2      	b.n	800743a <_vfiprintf_r+0xc6>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	1d19      	adds	r1, r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	9103      	str	r1, [sp, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	bfbb      	ittet	lt
 80074a0:	425b      	neglt	r3, r3
 80074a2:	f042 0202 	orrlt.w	r2, r2, #2
 80074a6:	9307      	strge	r3, [sp, #28]
 80074a8:	9307      	strlt	r3, [sp, #28]
 80074aa:	bfb8      	it	lt
 80074ac:	9204      	strlt	r2, [sp, #16]
 80074ae:	7823      	ldrb	r3, [r4, #0]
 80074b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80074b2:	d10a      	bne.n	80074ca <_vfiprintf_r+0x156>
 80074b4:	7863      	ldrb	r3, [r4, #1]
 80074b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074b8:	d132      	bne.n	8007520 <_vfiprintf_r+0x1ac>
 80074ba:	9b03      	ldr	r3, [sp, #12]
 80074bc:	1d1a      	adds	r2, r3, #4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	9203      	str	r2, [sp, #12]
 80074c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074c6:	3402      	adds	r4, #2
 80074c8:	9305      	str	r3, [sp, #20]
 80074ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075a0 <_vfiprintf_r+0x22c>
 80074ce:	7821      	ldrb	r1, [r4, #0]
 80074d0:	2203      	movs	r2, #3
 80074d2:	4650      	mov	r0, sl
 80074d4:	f7f8 fe8c 	bl	80001f0 <memchr>
 80074d8:	b138      	cbz	r0, 80074ea <_vfiprintf_r+0x176>
 80074da:	9b04      	ldr	r3, [sp, #16]
 80074dc:	eba0 000a 	sub.w	r0, r0, sl
 80074e0:	2240      	movs	r2, #64	@ 0x40
 80074e2:	4082      	lsls	r2, r0
 80074e4:	4313      	orrs	r3, r2
 80074e6:	3401      	adds	r4, #1
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ee:	4829      	ldr	r0, [pc, #164]	@ (8007594 <_vfiprintf_r+0x220>)
 80074f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074f4:	2206      	movs	r2, #6
 80074f6:	f7f8 fe7b 	bl	80001f0 <memchr>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d03f      	beq.n	800757e <_vfiprintf_r+0x20a>
 80074fe:	4b26      	ldr	r3, [pc, #152]	@ (8007598 <_vfiprintf_r+0x224>)
 8007500:	bb1b      	cbnz	r3, 800754a <_vfiprintf_r+0x1d6>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	3307      	adds	r3, #7
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	3308      	adds	r3, #8
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007510:	443b      	add	r3, r7
 8007512:	9309      	str	r3, [sp, #36]	@ 0x24
 8007514:	e76a      	b.n	80073ec <_vfiprintf_r+0x78>
 8007516:	fb0c 3202 	mla	r2, ip, r2, r3
 800751a:	460c      	mov	r4, r1
 800751c:	2001      	movs	r0, #1
 800751e:	e7a8      	b.n	8007472 <_vfiprintf_r+0xfe>
 8007520:	2300      	movs	r3, #0
 8007522:	3401      	adds	r4, #1
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	4619      	mov	r1, r3
 8007528:	f04f 0c0a 	mov.w	ip, #10
 800752c:	4620      	mov	r0, r4
 800752e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007532:	3a30      	subs	r2, #48	@ 0x30
 8007534:	2a09      	cmp	r2, #9
 8007536:	d903      	bls.n	8007540 <_vfiprintf_r+0x1cc>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0c6      	beq.n	80074ca <_vfiprintf_r+0x156>
 800753c:	9105      	str	r1, [sp, #20]
 800753e:	e7c4      	b.n	80074ca <_vfiprintf_r+0x156>
 8007540:	fb0c 2101 	mla	r1, ip, r1, r2
 8007544:	4604      	mov	r4, r0
 8007546:	2301      	movs	r3, #1
 8007548:	e7f0      	b.n	800752c <_vfiprintf_r+0x1b8>
 800754a:	ab03      	add	r3, sp, #12
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	462a      	mov	r2, r5
 8007550:	4b12      	ldr	r3, [pc, #72]	@ (800759c <_vfiprintf_r+0x228>)
 8007552:	a904      	add	r1, sp, #16
 8007554:	4630      	mov	r0, r6
 8007556:	f3af 8000 	nop.w
 800755a:	4607      	mov	r7, r0
 800755c:	1c78      	adds	r0, r7, #1
 800755e:	d1d6      	bne.n	800750e <_vfiprintf_r+0x19a>
 8007560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007562:	07d9      	lsls	r1, r3, #31
 8007564:	d405      	bmi.n	8007572 <_vfiprintf_r+0x1fe>
 8007566:	89ab      	ldrh	r3, [r5, #12]
 8007568:	059a      	lsls	r2, r3, #22
 800756a:	d402      	bmi.n	8007572 <_vfiprintf_r+0x1fe>
 800756c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800756e:	f7ff fddd 	bl	800712c <__retarget_lock_release_recursive>
 8007572:	89ab      	ldrh	r3, [r5, #12]
 8007574:	065b      	lsls	r3, r3, #25
 8007576:	f53f af1f 	bmi.w	80073b8 <_vfiprintf_r+0x44>
 800757a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800757c:	e71e      	b.n	80073bc <_vfiprintf_r+0x48>
 800757e:	ab03      	add	r3, sp, #12
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	462a      	mov	r2, r5
 8007584:	4b05      	ldr	r3, [pc, #20]	@ (800759c <_vfiprintf_r+0x228>)
 8007586:	a904      	add	r1, sp, #16
 8007588:	4630      	mov	r0, r6
 800758a:	f000 f879 	bl	8007680 <_printf_i>
 800758e:	e7e4      	b.n	800755a <_vfiprintf_r+0x1e6>
 8007590:	08007f30 	.word	0x08007f30
 8007594:	08007f3a 	.word	0x08007f3a
 8007598:	00000000 	.word	0x00000000
 800759c:	0800734f 	.word	0x0800734f
 80075a0:	08007f36 	.word	0x08007f36

080075a4 <_printf_common>:
 80075a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075a8:	4616      	mov	r6, r2
 80075aa:	4698      	mov	r8, r3
 80075ac:	688a      	ldr	r2, [r1, #8]
 80075ae:	690b      	ldr	r3, [r1, #16]
 80075b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80075b4:	4293      	cmp	r3, r2
 80075b6:	bfb8      	it	lt
 80075b8:	4613      	movlt	r3, r2
 80075ba:	6033      	str	r3, [r6, #0]
 80075bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80075c0:	4607      	mov	r7, r0
 80075c2:	460c      	mov	r4, r1
 80075c4:	b10a      	cbz	r2, 80075ca <_printf_common+0x26>
 80075c6:	3301      	adds	r3, #1
 80075c8:	6033      	str	r3, [r6, #0]
 80075ca:	6823      	ldr	r3, [r4, #0]
 80075cc:	0699      	lsls	r1, r3, #26
 80075ce:	bf42      	ittt	mi
 80075d0:	6833      	ldrmi	r3, [r6, #0]
 80075d2:	3302      	addmi	r3, #2
 80075d4:	6033      	strmi	r3, [r6, #0]
 80075d6:	6825      	ldr	r5, [r4, #0]
 80075d8:	f015 0506 	ands.w	r5, r5, #6
 80075dc:	d106      	bne.n	80075ec <_printf_common+0x48>
 80075de:	f104 0a19 	add.w	sl, r4, #25
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	6832      	ldr	r2, [r6, #0]
 80075e6:	1a9b      	subs	r3, r3, r2
 80075e8:	42ab      	cmp	r3, r5
 80075ea:	dc26      	bgt.n	800763a <_printf_common+0x96>
 80075ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075f0:	6822      	ldr	r2, [r4, #0]
 80075f2:	3b00      	subs	r3, #0
 80075f4:	bf18      	it	ne
 80075f6:	2301      	movne	r3, #1
 80075f8:	0692      	lsls	r2, r2, #26
 80075fa:	d42b      	bmi.n	8007654 <_printf_common+0xb0>
 80075fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007600:	4641      	mov	r1, r8
 8007602:	4638      	mov	r0, r7
 8007604:	47c8      	blx	r9
 8007606:	3001      	adds	r0, #1
 8007608:	d01e      	beq.n	8007648 <_printf_common+0xa4>
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	6922      	ldr	r2, [r4, #16]
 800760e:	f003 0306 	and.w	r3, r3, #6
 8007612:	2b04      	cmp	r3, #4
 8007614:	bf02      	ittt	eq
 8007616:	68e5      	ldreq	r5, [r4, #12]
 8007618:	6833      	ldreq	r3, [r6, #0]
 800761a:	1aed      	subeq	r5, r5, r3
 800761c:	68a3      	ldr	r3, [r4, #8]
 800761e:	bf0c      	ite	eq
 8007620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007624:	2500      	movne	r5, #0
 8007626:	4293      	cmp	r3, r2
 8007628:	bfc4      	itt	gt
 800762a:	1a9b      	subgt	r3, r3, r2
 800762c:	18ed      	addgt	r5, r5, r3
 800762e:	2600      	movs	r6, #0
 8007630:	341a      	adds	r4, #26
 8007632:	42b5      	cmp	r5, r6
 8007634:	d11a      	bne.n	800766c <_printf_common+0xc8>
 8007636:	2000      	movs	r0, #0
 8007638:	e008      	b.n	800764c <_printf_common+0xa8>
 800763a:	2301      	movs	r3, #1
 800763c:	4652      	mov	r2, sl
 800763e:	4641      	mov	r1, r8
 8007640:	4638      	mov	r0, r7
 8007642:	47c8      	blx	r9
 8007644:	3001      	adds	r0, #1
 8007646:	d103      	bne.n	8007650 <_printf_common+0xac>
 8007648:	f04f 30ff 	mov.w	r0, #4294967295
 800764c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007650:	3501      	adds	r5, #1
 8007652:	e7c6      	b.n	80075e2 <_printf_common+0x3e>
 8007654:	18e1      	adds	r1, r4, r3
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	2030      	movs	r0, #48	@ 0x30
 800765a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800765e:	4422      	add	r2, r4
 8007660:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007664:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007668:	3302      	adds	r3, #2
 800766a:	e7c7      	b.n	80075fc <_printf_common+0x58>
 800766c:	2301      	movs	r3, #1
 800766e:	4622      	mov	r2, r4
 8007670:	4641      	mov	r1, r8
 8007672:	4638      	mov	r0, r7
 8007674:	47c8      	blx	r9
 8007676:	3001      	adds	r0, #1
 8007678:	d0e6      	beq.n	8007648 <_printf_common+0xa4>
 800767a:	3601      	adds	r6, #1
 800767c:	e7d9      	b.n	8007632 <_printf_common+0x8e>
	...

08007680 <_printf_i>:
 8007680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007684:	7e0f      	ldrb	r7, [r1, #24]
 8007686:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007688:	2f78      	cmp	r7, #120	@ 0x78
 800768a:	4691      	mov	r9, r2
 800768c:	4680      	mov	r8, r0
 800768e:	460c      	mov	r4, r1
 8007690:	469a      	mov	sl, r3
 8007692:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007696:	d807      	bhi.n	80076a8 <_printf_i+0x28>
 8007698:	2f62      	cmp	r7, #98	@ 0x62
 800769a:	d80a      	bhi.n	80076b2 <_printf_i+0x32>
 800769c:	2f00      	cmp	r7, #0
 800769e:	f000 80d2 	beq.w	8007846 <_printf_i+0x1c6>
 80076a2:	2f58      	cmp	r7, #88	@ 0x58
 80076a4:	f000 80b9 	beq.w	800781a <_printf_i+0x19a>
 80076a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80076b0:	e03a      	b.n	8007728 <_printf_i+0xa8>
 80076b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80076b6:	2b15      	cmp	r3, #21
 80076b8:	d8f6      	bhi.n	80076a8 <_printf_i+0x28>
 80076ba:	a101      	add	r1, pc, #4	@ (adr r1, 80076c0 <_printf_i+0x40>)
 80076bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076c0:	08007719 	.word	0x08007719
 80076c4:	0800772d 	.word	0x0800772d
 80076c8:	080076a9 	.word	0x080076a9
 80076cc:	080076a9 	.word	0x080076a9
 80076d0:	080076a9 	.word	0x080076a9
 80076d4:	080076a9 	.word	0x080076a9
 80076d8:	0800772d 	.word	0x0800772d
 80076dc:	080076a9 	.word	0x080076a9
 80076e0:	080076a9 	.word	0x080076a9
 80076e4:	080076a9 	.word	0x080076a9
 80076e8:	080076a9 	.word	0x080076a9
 80076ec:	0800782d 	.word	0x0800782d
 80076f0:	08007757 	.word	0x08007757
 80076f4:	080077e7 	.word	0x080077e7
 80076f8:	080076a9 	.word	0x080076a9
 80076fc:	080076a9 	.word	0x080076a9
 8007700:	0800784f 	.word	0x0800784f
 8007704:	080076a9 	.word	0x080076a9
 8007708:	08007757 	.word	0x08007757
 800770c:	080076a9 	.word	0x080076a9
 8007710:	080076a9 	.word	0x080076a9
 8007714:	080077ef 	.word	0x080077ef
 8007718:	6833      	ldr	r3, [r6, #0]
 800771a:	1d1a      	adds	r2, r3, #4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6032      	str	r2, [r6, #0]
 8007720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007724:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007728:	2301      	movs	r3, #1
 800772a:	e09d      	b.n	8007868 <_printf_i+0x1e8>
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	6820      	ldr	r0, [r4, #0]
 8007730:	1d19      	adds	r1, r3, #4
 8007732:	6031      	str	r1, [r6, #0]
 8007734:	0606      	lsls	r6, r0, #24
 8007736:	d501      	bpl.n	800773c <_printf_i+0xbc>
 8007738:	681d      	ldr	r5, [r3, #0]
 800773a:	e003      	b.n	8007744 <_printf_i+0xc4>
 800773c:	0645      	lsls	r5, r0, #25
 800773e:	d5fb      	bpl.n	8007738 <_printf_i+0xb8>
 8007740:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007744:	2d00      	cmp	r5, #0
 8007746:	da03      	bge.n	8007750 <_printf_i+0xd0>
 8007748:	232d      	movs	r3, #45	@ 0x2d
 800774a:	426d      	negs	r5, r5
 800774c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007750:	4859      	ldr	r0, [pc, #356]	@ (80078b8 <_printf_i+0x238>)
 8007752:	230a      	movs	r3, #10
 8007754:	e011      	b.n	800777a <_printf_i+0xfa>
 8007756:	6821      	ldr	r1, [r4, #0]
 8007758:	6833      	ldr	r3, [r6, #0]
 800775a:	0608      	lsls	r0, r1, #24
 800775c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007760:	d402      	bmi.n	8007768 <_printf_i+0xe8>
 8007762:	0649      	lsls	r1, r1, #25
 8007764:	bf48      	it	mi
 8007766:	b2ad      	uxthmi	r5, r5
 8007768:	2f6f      	cmp	r7, #111	@ 0x6f
 800776a:	4853      	ldr	r0, [pc, #332]	@ (80078b8 <_printf_i+0x238>)
 800776c:	6033      	str	r3, [r6, #0]
 800776e:	bf14      	ite	ne
 8007770:	230a      	movne	r3, #10
 8007772:	2308      	moveq	r3, #8
 8007774:	2100      	movs	r1, #0
 8007776:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800777a:	6866      	ldr	r6, [r4, #4]
 800777c:	60a6      	str	r6, [r4, #8]
 800777e:	2e00      	cmp	r6, #0
 8007780:	bfa2      	ittt	ge
 8007782:	6821      	ldrge	r1, [r4, #0]
 8007784:	f021 0104 	bicge.w	r1, r1, #4
 8007788:	6021      	strge	r1, [r4, #0]
 800778a:	b90d      	cbnz	r5, 8007790 <_printf_i+0x110>
 800778c:	2e00      	cmp	r6, #0
 800778e:	d04b      	beq.n	8007828 <_printf_i+0x1a8>
 8007790:	4616      	mov	r6, r2
 8007792:	fbb5 f1f3 	udiv	r1, r5, r3
 8007796:	fb03 5711 	mls	r7, r3, r1, r5
 800779a:	5dc7      	ldrb	r7, [r0, r7]
 800779c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077a0:	462f      	mov	r7, r5
 80077a2:	42bb      	cmp	r3, r7
 80077a4:	460d      	mov	r5, r1
 80077a6:	d9f4      	bls.n	8007792 <_printf_i+0x112>
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d10b      	bne.n	80077c4 <_printf_i+0x144>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	07df      	lsls	r7, r3, #31
 80077b0:	d508      	bpl.n	80077c4 <_printf_i+0x144>
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	6861      	ldr	r1, [r4, #4]
 80077b6:	4299      	cmp	r1, r3
 80077b8:	bfde      	ittt	le
 80077ba:	2330      	movle	r3, #48	@ 0x30
 80077bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80077c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80077c4:	1b92      	subs	r2, r2, r6
 80077c6:	6122      	str	r2, [r4, #16]
 80077c8:	f8cd a000 	str.w	sl, [sp]
 80077cc:	464b      	mov	r3, r9
 80077ce:	aa03      	add	r2, sp, #12
 80077d0:	4621      	mov	r1, r4
 80077d2:	4640      	mov	r0, r8
 80077d4:	f7ff fee6 	bl	80075a4 <_printf_common>
 80077d8:	3001      	adds	r0, #1
 80077da:	d14a      	bne.n	8007872 <_printf_i+0x1f2>
 80077dc:	f04f 30ff 	mov.w	r0, #4294967295
 80077e0:	b004      	add	sp, #16
 80077e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	f043 0320 	orr.w	r3, r3, #32
 80077ec:	6023      	str	r3, [r4, #0]
 80077ee:	4833      	ldr	r0, [pc, #204]	@ (80078bc <_printf_i+0x23c>)
 80077f0:	2778      	movs	r7, #120	@ 0x78
 80077f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	6831      	ldr	r1, [r6, #0]
 80077fa:	061f      	lsls	r7, r3, #24
 80077fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007800:	d402      	bmi.n	8007808 <_printf_i+0x188>
 8007802:	065f      	lsls	r7, r3, #25
 8007804:	bf48      	it	mi
 8007806:	b2ad      	uxthmi	r5, r5
 8007808:	6031      	str	r1, [r6, #0]
 800780a:	07d9      	lsls	r1, r3, #31
 800780c:	bf44      	itt	mi
 800780e:	f043 0320 	orrmi.w	r3, r3, #32
 8007812:	6023      	strmi	r3, [r4, #0]
 8007814:	b11d      	cbz	r5, 800781e <_printf_i+0x19e>
 8007816:	2310      	movs	r3, #16
 8007818:	e7ac      	b.n	8007774 <_printf_i+0xf4>
 800781a:	4827      	ldr	r0, [pc, #156]	@ (80078b8 <_printf_i+0x238>)
 800781c:	e7e9      	b.n	80077f2 <_printf_i+0x172>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	f023 0320 	bic.w	r3, r3, #32
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	e7f6      	b.n	8007816 <_printf_i+0x196>
 8007828:	4616      	mov	r6, r2
 800782a:	e7bd      	b.n	80077a8 <_printf_i+0x128>
 800782c:	6833      	ldr	r3, [r6, #0]
 800782e:	6825      	ldr	r5, [r4, #0]
 8007830:	6961      	ldr	r1, [r4, #20]
 8007832:	1d18      	adds	r0, r3, #4
 8007834:	6030      	str	r0, [r6, #0]
 8007836:	062e      	lsls	r6, r5, #24
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	d501      	bpl.n	8007840 <_printf_i+0x1c0>
 800783c:	6019      	str	r1, [r3, #0]
 800783e:	e002      	b.n	8007846 <_printf_i+0x1c6>
 8007840:	0668      	lsls	r0, r5, #25
 8007842:	d5fb      	bpl.n	800783c <_printf_i+0x1bc>
 8007844:	8019      	strh	r1, [r3, #0]
 8007846:	2300      	movs	r3, #0
 8007848:	6123      	str	r3, [r4, #16]
 800784a:	4616      	mov	r6, r2
 800784c:	e7bc      	b.n	80077c8 <_printf_i+0x148>
 800784e:	6833      	ldr	r3, [r6, #0]
 8007850:	1d1a      	adds	r2, r3, #4
 8007852:	6032      	str	r2, [r6, #0]
 8007854:	681e      	ldr	r6, [r3, #0]
 8007856:	6862      	ldr	r2, [r4, #4]
 8007858:	2100      	movs	r1, #0
 800785a:	4630      	mov	r0, r6
 800785c:	f7f8 fcc8 	bl	80001f0 <memchr>
 8007860:	b108      	cbz	r0, 8007866 <_printf_i+0x1e6>
 8007862:	1b80      	subs	r0, r0, r6
 8007864:	6060      	str	r0, [r4, #4]
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	6123      	str	r3, [r4, #16]
 800786a:	2300      	movs	r3, #0
 800786c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007870:	e7aa      	b.n	80077c8 <_printf_i+0x148>
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	4632      	mov	r2, r6
 8007876:	4649      	mov	r1, r9
 8007878:	4640      	mov	r0, r8
 800787a:	47d0      	blx	sl
 800787c:	3001      	adds	r0, #1
 800787e:	d0ad      	beq.n	80077dc <_printf_i+0x15c>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	079b      	lsls	r3, r3, #30
 8007884:	d413      	bmi.n	80078ae <_printf_i+0x22e>
 8007886:	68e0      	ldr	r0, [r4, #12]
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	4298      	cmp	r0, r3
 800788c:	bfb8      	it	lt
 800788e:	4618      	movlt	r0, r3
 8007890:	e7a6      	b.n	80077e0 <_printf_i+0x160>
 8007892:	2301      	movs	r3, #1
 8007894:	4632      	mov	r2, r6
 8007896:	4649      	mov	r1, r9
 8007898:	4640      	mov	r0, r8
 800789a:	47d0      	blx	sl
 800789c:	3001      	adds	r0, #1
 800789e:	d09d      	beq.n	80077dc <_printf_i+0x15c>
 80078a0:	3501      	adds	r5, #1
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	9903      	ldr	r1, [sp, #12]
 80078a6:	1a5b      	subs	r3, r3, r1
 80078a8:	42ab      	cmp	r3, r5
 80078aa:	dcf2      	bgt.n	8007892 <_printf_i+0x212>
 80078ac:	e7eb      	b.n	8007886 <_printf_i+0x206>
 80078ae:	2500      	movs	r5, #0
 80078b0:	f104 0619 	add.w	r6, r4, #25
 80078b4:	e7f5      	b.n	80078a2 <_printf_i+0x222>
 80078b6:	bf00      	nop
 80078b8:	08007f41 	.word	0x08007f41
 80078bc:	08007f52 	.word	0x08007f52

080078c0 <__sflush_r>:
 80078c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c8:	0716      	lsls	r6, r2, #28
 80078ca:	4605      	mov	r5, r0
 80078cc:	460c      	mov	r4, r1
 80078ce:	d454      	bmi.n	800797a <__sflush_r+0xba>
 80078d0:	684b      	ldr	r3, [r1, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dc02      	bgt.n	80078dc <__sflush_r+0x1c>
 80078d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dd48      	ble.n	800796e <__sflush_r+0xae>
 80078dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078de:	2e00      	cmp	r6, #0
 80078e0:	d045      	beq.n	800796e <__sflush_r+0xae>
 80078e2:	2300      	movs	r3, #0
 80078e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078e8:	682f      	ldr	r7, [r5, #0]
 80078ea:	6a21      	ldr	r1, [r4, #32]
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	d030      	beq.n	8007952 <__sflush_r+0x92>
 80078f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	0759      	lsls	r1, r3, #29
 80078f6:	d505      	bpl.n	8007904 <__sflush_r+0x44>
 80078f8:	6863      	ldr	r3, [r4, #4]
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078fe:	b10b      	cbz	r3, 8007904 <__sflush_r+0x44>
 8007900:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007902:	1ad2      	subs	r2, r2, r3
 8007904:	2300      	movs	r3, #0
 8007906:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007908:	6a21      	ldr	r1, [r4, #32]
 800790a:	4628      	mov	r0, r5
 800790c:	47b0      	blx	r6
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	d106      	bne.n	8007922 <__sflush_r+0x62>
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	291d      	cmp	r1, #29
 8007918:	d82b      	bhi.n	8007972 <__sflush_r+0xb2>
 800791a:	4a2a      	ldr	r2, [pc, #168]	@ (80079c4 <__sflush_r+0x104>)
 800791c:	410a      	asrs	r2, r1
 800791e:	07d6      	lsls	r6, r2, #31
 8007920:	d427      	bmi.n	8007972 <__sflush_r+0xb2>
 8007922:	2200      	movs	r2, #0
 8007924:	6062      	str	r2, [r4, #4]
 8007926:	04d9      	lsls	r1, r3, #19
 8007928:	6922      	ldr	r2, [r4, #16]
 800792a:	6022      	str	r2, [r4, #0]
 800792c:	d504      	bpl.n	8007938 <__sflush_r+0x78>
 800792e:	1c42      	adds	r2, r0, #1
 8007930:	d101      	bne.n	8007936 <__sflush_r+0x76>
 8007932:	682b      	ldr	r3, [r5, #0]
 8007934:	b903      	cbnz	r3, 8007938 <__sflush_r+0x78>
 8007936:	6560      	str	r0, [r4, #84]	@ 0x54
 8007938:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800793a:	602f      	str	r7, [r5, #0]
 800793c:	b1b9      	cbz	r1, 800796e <__sflush_r+0xae>
 800793e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007942:	4299      	cmp	r1, r3
 8007944:	d002      	beq.n	800794c <__sflush_r+0x8c>
 8007946:	4628      	mov	r0, r5
 8007948:	f7ff fbf2 	bl	8007130 <_free_r>
 800794c:	2300      	movs	r3, #0
 800794e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007950:	e00d      	b.n	800796e <__sflush_r+0xae>
 8007952:	2301      	movs	r3, #1
 8007954:	4628      	mov	r0, r5
 8007956:	47b0      	blx	r6
 8007958:	4602      	mov	r2, r0
 800795a:	1c50      	adds	r0, r2, #1
 800795c:	d1c9      	bne.n	80078f2 <__sflush_r+0x32>
 800795e:	682b      	ldr	r3, [r5, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d0c6      	beq.n	80078f2 <__sflush_r+0x32>
 8007964:	2b1d      	cmp	r3, #29
 8007966:	d001      	beq.n	800796c <__sflush_r+0xac>
 8007968:	2b16      	cmp	r3, #22
 800796a:	d11e      	bne.n	80079aa <__sflush_r+0xea>
 800796c:	602f      	str	r7, [r5, #0]
 800796e:	2000      	movs	r0, #0
 8007970:	e022      	b.n	80079b8 <__sflush_r+0xf8>
 8007972:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007976:	b21b      	sxth	r3, r3
 8007978:	e01b      	b.n	80079b2 <__sflush_r+0xf2>
 800797a:	690f      	ldr	r7, [r1, #16]
 800797c:	2f00      	cmp	r7, #0
 800797e:	d0f6      	beq.n	800796e <__sflush_r+0xae>
 8007980:	0793      	lsls	r3, r2, #30
 8007982:	680e      	ldr	r6, [r1, #0]
 8007984:	bf08      	it	eq
 8007986:	694b      	ldreq	r3, [r1, #20]
 8007988:	600f      	str	r7, [r1, #0]
 800798a:	bf18      	it	ne
 800798c:	2300      	movne	r3, #0
 800798e:	eba6 0807 	sub.w	r8, r6, r7
 8007992:	608b      	str	r3, [r1, #8]
 8007994:	f1b8 0f00 	cmp.w	r8, #0
 8007998:	dde9      	ble.n	800796e <__sflush_r+0xae>
 800799a:	6a21      	ldr	r1, [r4, #32]
 800799c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800799e:	4643      	mov	r3, r8
 80079a0:	463a      	mov	r2, r7
 80079a2:	4628      	mov	r0, r5
 80079a4:	47b0      	blx	r6
 80079a6:	2800      	cmp	r0, #0
 80079a8:	dc08      	bgt.n	80079bc <__sflush_r+0xfc>
 80079aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295
 80079b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079bc:	4407      	add	r7, r0
 80079be:	eba8 0800 	sub.w	r8, r8, r0
 80079c2:	e7e7      	b.n	8007994 <__sflush_r+0xd4>
 80079c4:	dfbffffe 	.word	0xdfbffffe

080079c8 <_fflush_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	690b      	ldr	r3, [r1, #16]
 80079cc:	4605      	mov	r5, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	b913      	cbnz	r3, 80079d8 <_fflush_r+0x10>
 80079d2:	2500      	movs	r5, #0
 80079d4:	4628      	mov	r0, r5
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	b118      	cbz	r0, 80079e2 <_fflush_r+0x1a>
 80079da:	6a03      	ldr	r3, [r0, #32]
 80079dc:	b90b      	cbnz	r3, 80079e2 <_fflush_r+0x1a>
 80079de:	f7ff fa9f 	bl	8006f20 <__sinit>
 80079e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f3      	beq.n	80079d2 <_fflush_r+0xa>
 80079ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079ec:	07d0      	lsls	r0, r2, #31
 80079ee:	d404      	bmi.n	80079fa <_fflush_r+0x32>
 80079f0:	0599      	lsls	r1, r3, #22
 80079f2:	d402      	bmi.n	80079fa <_fflush_r+0x32>
 80079f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079f6:	f7ff fb98 	bl	800712a <__retarget_lock_acquire_recursive>
 80079fa:	4628      	mov	r0, r5
 80079fc:	4621      	mov	r1, r4
 80079fe:	f7ff ff5f 	bl	80078c0 <__sflush_r>
 8007a02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a04:	07da      	lsls	r2, r3, #31
 8007a06:	4605      	mov	r5, r0
 8007a08:	d4e4      	bmi.n	80079d4 <_fflush_r+0xc>
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	059b      	lsls	r3, r3, #22
 8007a0e:	d4e1      	bmi.n	80079d4 <_fflush_r+0xc>
 8007a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a12:	f7ff fb8b 	bl	800712c <__retarget_lock_release_recursive>
 8007a16:	e7dd      	b.n	80079d4 <_fflush_r+0xc>

08007a18 <__swbuf_r>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	460e      	mov	r6, r1
 8007a1c:	4614      	mov	r4, r2
 8007a1e:	4605      	mov	r5, r0
 8007a20:	b118      	cbz	r0, 8007a2a <__swbuf_r+0x12>
 8007a22:	6a03      	ldr	r3, [r0, #32]
 8007a24:	b90b      	cbnz	r3, 8007a2a <__swbuf_r+0x12>
 8007a26:	f7ff fa7b 	bl	8006f20 <__sinit>
 8007a2a:	69a3      	ldr	r3, [r4, #24]
 8007a2c:	60a3      	str	r3, [r4, #8]
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	071a      	lsls	r2, r3, #28
 8007a32:	d501      	bpl.n	8007a38 <__swbuf_r+0x20>
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	b943      	cbnz	r3, 8007a4a <__swbuf_r+0x32>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 f82a 	bl	8007a94 <__swsetup_r>
 8007a40:	b118      	cbz	r0, 8007a4a <__swbuf_r+0x32>
 8007a42:	f04f 37ff 	mov.w	r7, #4294967295
 8007a46:	4638      	mov	r0, r7
 8007a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	6922      	ldr	r2, [r4, #16]
 8007a4e:	1a98      	subs	r0, r3, r2
 8007a50:	6963      	ldr	r3, [r4, #20]
 8007a52:	b2f6      	uxtb	r6, r6
 8007a54:	4283      	cmp	r3, r0
 8007a56:	4637      	mov	r7, r6
 8007a58:	dc05      	bgt.n	8007a66 <__swbuf_r+0x4e>
 8007a5a:	4621      	mov	r1, r4
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f7ff ffb3 	bl	80079c8 <_fflush_r>
 8007a62:	2800      	cmp	r0, #0
 8007a64:	d1ed      	bne.n	8007a42 <__swbuf_r+0x2a>
 8007a66:	68a3      	ldr	r3, [r4, #8]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	60a3      	str	r3, [r4, #8]
 8007a6c:	6823      	ldr	r3, [r4, #0]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	701e      	strb	r6, [r3, #0]
 8007a74:	6962      	ldr	r2, [r4, #20]
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d004      	beq.n	8007a86 <__swbuf_r+0x6e>
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	07db      	lsls	r3, r3, #31
 8007a80:	d5e1      	bpl.n	8007a46 <__swbuf_r+0x2e>
 8007a82:	2e0a      	cmp	r6, #10
 8007a84:	d1df      	bne.n	8007a46 <__swbuf_r+0x2e>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f7ff ff9d 	bl	80079c8 <_fflush_r>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0d9      	beq.n	8007a46 <__swbuf_r+0x2e>
 8007a92:	e7d6      	b.n	8007a42 <__swbuf_r+0x2a>

08007a94 <__swsetup_r>:
 8007a94:	b538      	push	{r3, r4, r5, lr}
 8007a96:	4b29      	ldr	r3, [pc, #164]	@ (8007b3c <__swsetup_r+0xa8>)
 8007a98:	4605      	mov	r5, r0
 8007a9a:	6818      	ldr	r0, [r3, #0]
 8007a9c:	460c      	mov	r4, r1
 8007a9e:	b118      	cbz	r0, 8007aa8 <__swsetup_r+0x14>
 8007aa0:	6a03      	ldr	r3, [r0, #32]
 8007aa2:	b90b      	cbnz	r3, 8007aa8 <__swsetup_r+0x14>
 8007aa4:	f7ff fa3c 	bl	8006f20 <__sinit>
 8007aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aac:	0719      	lsls	r1, r3, #28
 8007aae:	d422      	bmi.n	8007af6 <__swsetup_r+0x62>
 8007ab0:	06da      	lsls	r2, r3, #27
 8007ab2:	d407      	bmi.n	8007ac4 <__swsetup_r+0x30>
 8007ab4:	2209      	movs	r2, #9
 8007ab6:	602a      	str	r2, [r5, #0]
 8007ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007abc:	81a3      	strh	r3, [r4, #12]
 8007abe:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac2:	e033      	b.n	8007b2c <__swsetup_r+0x98>
 8007ac4:	0758      	lsls	r0, r3, #29
 8007ac6:	d512      	bpl.n	8007aee <__swsetup_r+0x5a>
 8007ac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aca:	b141      	cbz	r1, 8007ade <__swsetup_r+0x4a>
 8007acc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	d002      	beq.n	8007ada <__swsetup_r+0x46>
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f7ff fb2b 	bl	8007130 <_free_r>
 8007ada:	2300      	movs	r3, #0
 8007adc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	6063      	str	r3, [r4, #4]
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	6023      	str	r3, [r4, #0]
 8007aee:	89a3      	ldrh	r3, [r4, #12]
 8007af0:	f043 0308 	orr.w	r3, r3, #8
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	b94b      	cbnz	r3, 8007b0e <__swsetup_r+0x7a>
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b04:	d003      	beq.n	8007b0e <__swsetup_r+0x7a>
 8007b06:	4621      	mov	r1, r4
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 f84f 	bl	8007bac <__smakebuf_r>
 8007b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b12:	f013 0201 	ands.w	r2, r3, #1
 8007b16:	d00a      	beq.n	8007b2e <__swsetup_r+0x9a>
 8007b18:	2200      	movs	r2, #0
 8007b1a:	60a2      	str	r2, [r4, #8]
 8007b1c:	6962      	ldr	r2, [r4, #20]
 8007b1e:	4252      	negs	r2, r2
 8007b20:	61a2      	str	r2, [r4, #24]
 8007b22:	6922      	ldr	r2, [r4, #16]
 8007b24:	b942      	cbnz	r2, 8007b38 <__swsetup_r+0xa4>
 8007b26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b2a:	d1c5      	bne.n	8007ab8 <__swsetup_r+0x24>
 8007b2c:	bd38      	pop	{r3, r4, r5, pc}
 8007b2e:	0799      	lsls	r1, r3, #30
 8007b30:	bf58      	it	pl
 8007b32:	6962      	ldrpl	r2, [r4, #20]
 8007b34:	60a2      	str	r2, [r4, #8]
 8007b36:	e7f4      	b.n	8007b22 <__swsetup_r+0x8e>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	e7f7      	b.n	8007b2c <__swsetup_r+0x98>
 8007b3c:	20000018 	.word	0x20000018

08007b40 <_sbrk_r>:
 8007b40:	b538      	push	{r3, r4, r5, lr}
 8007b42:	4d06      	ldr	r5, [pc, #24]	@ (8007b5c <_sbrk_r+0x1c>)
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	4608      	mov	r0, r1
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	f7f9 fb58 	bl	8001200 <_sbrk>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_sbrk_r+0x1a>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_sbrk_r+0x1a>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	20000534 	.word	0x20000534

08007b60 <__swhatbuf_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	460c      	mov	r4, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	b096      	sub	sp, #88	@ 0x58
 8007b6c:	4615      	mov	r5, r2
 8007b6e:	461e      	mov	r6, r3
 8007b70:	da0d      	bge.n	8007b8e <__swhatbuf_r+0x2e>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b78:	f04f 0100 	mov.w	r1, #0
 8007b7c:	bf14      	ite	ne
 8007b7e:	2340      	movne	r3, #64	@ 0x40
 8007b80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b84:	2000      	movs	r0, #0
 8007b86:	6031      	str	r1, [r6, #0]
 8007b88:	602b      	str	r3, [r5, #0]
 8007b8a:	b016      	add	sp, #88	@ 0x58
 8007b8c:	bd70      	pop	{r4, r5, r6, pc}
 8007b8e:	466a      	mov	r2, sp
 8007b90:	f000 f848 	bl	8007c24 <_fstat_r>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	dbec      	blt.n	8007b72 <__swhatbuf_r+0x12>
 8007b98:	9901      	ldr	r1, [sp, #4]
 8007b9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007ba2:	4259      	negs	r1, r3
 8007ba4:	4159      	adcs	r1, r3
 8007ba6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007baa:	e7eb      	b.n	8007b84 <__swhatbuf_r+0x24>

08007bac <__smakebuf_r>:
 8007bac:	898b      	ldrh	r3, [r1, #12]
 8007bae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bb0:	079d      	lsls	r5, r3, #30
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	d507      	bpl.n	8007bc8 <__smakebuf_r+0x1c>
 8007bb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	6163      	str	r3, [r4, #20]
 8007bc4:	b003      	add	sp, #12
 8007bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bc8:	ab01      	add	r3, sp, #4
 8007bca:	466a      	mov	r2, sp
 8007bcc:	f7ff ffc8 	bl	8007b60 <__swhatbuf_r>
 8007bd0:	9f00      	ldr	r7, [sp, #0]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4630      	mov	r0, r6
 8007bd8:	f7ff fb16 	bl	8007208 <_malloc_r>
 8007bdc:	b948      	cbnz	r0, 8007bf2 <__smakebuf_r+0x46>
 8007bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be2:	059a      	lsls	r2, r3, #22
 8007be4:	d4ee      	bmi.n	8007bc4 <__smakebuf_r+0x18>
 8007be6:	f023 0303 	bic.w	r3, r3, #3
 8007bea:	f043 0302 	orr.w	r3, r3, #2
 8007bee:	81a3      	strh	r3, [r4, #12]
 8007bf0:	e7e2      	b.n	8007bb8 <__smakebuf_r+0xc>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	6020      	str	r0, [r4, #0]
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bfa:	81a3      	strh	r3, [r4, #12]
 8007bfc:	9b01      	ldr	r3, [sp, #4]
 8007bfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c02:	b15b      	cbz	r3, 8007c1c <__smakebuf_r+0x70>
 8007c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c08:	4630      	mov	r0, r6
 8007c0a:	f000 f81d 	bl	8007c48 <_isatty_r>
 8007c0e:	b128      	cbz	r0, 8007c1c <__smakebuf_r+0x70>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f023 0303 	bic.w	r3, r3, #3
 8007c16:	f043 0301 	orr.w	r3, r3, #1
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	431d      	orrs	r5, r3
 8007c20:	81a5      	strh	r5, [r4, #12]
 8007c22:	e7cf      	b.n	8007bc4 <__smakebuf_r+0x18>

08007c24 <_fstat_r>:
 8007c24:	b538      	push	{r3, r4, r5, lr}
 8007c26:	4d07      	ldr	r5, [pc, #28]	@ (8007c44 <_fstat_r+0x20>)
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4604      	mov	r4, r0
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	f7f9 fabc 	bl	80011ae <_fstat>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d102      	bne.n	8007c40 <_fstat_r+0x1c>
 8007c3a:	682b      	ldr	r3, [r5, #0]
 8007c3c:	b103      	cbz	r3, 8007c40 <_fstat_r+0x1c>
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	bd38      	pop	{r3, r4, r5, pc}
 8007c42:	bf00      	nop
 8007c44:	20000534 	.word	0x20000534

08007c48 <_isatty_r>:
 8007c48:	b538      	push	{r3, r4, r5, lr}
 8007c4a:	4d06      	ldr	r5, [pc, #24]	@ (8007c64 <_isatty_r+0x1c>)
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4604      	mov	r4, r0
 8007c50:	4608      	mov	r0, r1
 8007c52:	602b      	str	r3, [r5, #0]
 8007c54:	f7f9 fabb 	bl	80011ce <_isatty>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d102      	bne.n	8007c62 <_isatty_r+0x1a>
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	b103      	cbz	r3, 8007c62 <_isatty_r+0x1a>
 8007c60:	6023      	str	r3, [r4, #0]
 8007c62:	bd38      	pop	{r3, r4, r5, pc}
 8007c64:	20000534 	.word	0x20000534

08007c68 <_init>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	bf00      	nop
 8007c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c6e:	bc08      	pop	{r3}
 8007c70:	469e      	mov	lr, r3
 8007c72:	4770      	bx	lr

08007c74 <_fini>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	bf00      	nop
 8007c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7a:	bc08      	pop	{r3}
 8007c7c:	469e      	mov	lr, r3
 8007c7e:	4770      	bx	lr
