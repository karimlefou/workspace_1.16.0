
TP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e3c  0800927c  0800927c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0b8  0800a0b8  0000c070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0b8  0800a0b8  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0c0  0800a0c0  0000c070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0c4  0800a0c4  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  0800a0c8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000070  0800a138  0000c070  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  20000988  0800a138  0000c988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e211  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041a4  00000000  00000000  0002a2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0002e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000146d  00000000  00000000  0002fea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d4ce  00000000  00000000  00031315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000241eb  00000000  00000000  0005e7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d508  00000000  00000000  000829ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007874  00000000  00000000  0018ff1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00197790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009264 	.word	0x08009264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009264 	.word	0x08009264

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295
 80005fc:	f000 b96a 	b.w	80008d4 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	460c      	mov	r4, r1
 8000620:	2b00      	cmp	r3, #0
 8000622:	d14e      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000624:	4694      	mov	ip, r2
 8000626:	458c      	cmp	ip, r1
 8000628:	4686      	mov	lr, r0
 800062a:	fab2 f282 	clz	r2, r2
 800062e:	d962      	bls.n	80006f6 <__udivmoddi4+0xde>
 8000630:	b14a      	cbz	r2, 8000646 <__udivmoddi4+0x2e>
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	4091      	lsls	r1, r2
 8000638:	fa20 f303 	lsr.w	r3, r0, r3
 800063c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	fa00 fe02 	lsl.w	lr, r0, r2
 8000646:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800064a:	fa1f f68c 	uxth.w	r6, ip
 800064e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000652:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000656:	fb07 1114 	mls	r1, r7, r4, r1
 800065a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800065e:	fb04 f106 	mul.w	r1, r4, r6
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f104 30ff 	add.w	r0, r4, #4294967295
 800066e:	f080 8112 	bcs.w	8000896 <__udivmoddi4+0x27e>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 810f 	bls.w	8000896 <__udivmoddi4+0x27e>
 8000678:	3c02      	subs	r4, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a59      	subs	r1, r3, r1
 800067e:	fa1f f38e 	uxth.w	r3, lr
 8000682:	fbb1 f0f7 	udiv	r0, r1, r7
 8000686:	fb07 1110 	mls	r1, r7, r0, r1
 800068a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800068e:	fb00 f606 	mul.w	r6, r0, r6
 8000692:	429e      	cmp	r6, r3
 8000694:	d90a      	bls.n	80006ac <__udivmoddi4+0x94>
 8000696:	eb1c 0303 	adds.w	r3, ip, r3
 800069a:	f100 31ff 	add.w	r1, r0, #4294967295
 800069e:	f080 80fc 	bcs.w	800089a <__udivmoddi4+0x282>
 80006a2:	429e      	cmp	r6, r3
 80006a4:	f240 80f9 	bls.w	800089a <__udivmoddi4+0x282>
 80006a8:	4463      	add	r3, ip
 80006aa:	3802      	subs	r0, #2
 80006ac:	1b9b      	subs	r3, r3, r6
 80006ae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80006b2:	2100      	movs	r1, #0
 80006b4:	b11d      	cbz	r5, 80006be <__udivmoddi4+0xa6>
 80006b6:	40d3      	lsrs	r3, r2
 80006b8:	2200      	movs	r2, #0
 80006ba:	e9c5 3200 	strd	r3, r2, [r5]
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d905      	bls.n	80006d2 <__udivmoddi4+0xba>
 80006c6:	b10d      	cbz	r5, 80006cc <__udivmoddi4+0xb4>
 80006c8:	e9c5 0100 	strd	r0, r1, [r5]
 80006cc:	2100      	movs	r1, #0
 80006ce:	4608      	mov	r0, r1
 80006d0:	e7f5      	b.n	80006be <__udivmoddi4+0xa6>
 80006d2:	fab3 f183 	clz	r1, r3
 80006d6:	2900      	cmp	r1, #0
 80006d8:	d146      	bne.n	8000768 <__udivmoddi4+0x150>
 80006da:	42a3      	cmp	r3, r4
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xcc>
 80006de:	4290      	cmp	r0, r2
 80006e0:	f0c0 80f0 	bcc.w	80008c4 <__udivmoddi4+0x2ac>
 80006e4:	1a86      	subs	r6, r0, r2
 80006e6:	eb64 0303 	sbc.w	r3, r4, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	2d00      	cmp	r5, #0
 80006ee:	d0e6      	beq.n	80006be <__udivmoddi4+0xa6>
 80006f0:	e9c5 6300 	strd	r6, r3, [r5]
 80006f4:	e7e3      	b.n	80006be <__udivmoddi4+0xa6>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	f040 8090 	bne.w	800081c <__udivmoddi4+0x204>
 80006fc:	eba1 040c 	sub.w	r4, r1, ip
 8000700:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000704:	fa1f f78c 	uxth.w	r7, ip
 8000708:	2101      	movs	r1, #1
 800070a:	fbb4 f6f8 	udiv	r6, r4, r8
 800070e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000712:	fb08 4416 	mls	r4, r8, r6, r4
 8000716:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800071a:	fb07 f006 	mul.w	r0, r7, r6
 800071e:	4298      	cmp	r0, r3
 8000720:	d908      	bls.n	8000734 <__udivmoddi4+0x11c>
 8000722:	eb1c 0303 	adds.w	r3, ip, r3
 8000726:	f106 34ff 	add.w	r4, r6, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x11a>
 800072c:	4298      	cmp	r0, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2b4>
 8000732:	4626      	mov	r6, r4
 8000734:	1a1c      	subs	r4, r3, r0
 8000736:	fa1f f38e 	uxth.w	r3, lr
 800073a:	fbb4 f0f8 	udiv	r0, r4, r8
 800073e:	fb08 4410 	mls	r4, r8, r0, r4
 8000742:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000746:	fb00 f707 	mul.w	r7, r0, r7
 800074a:	429f      	cmp	r7, r3
 800074c:	d908      	bls.n	8000760 <__udivmoddi4+0x148>
 800074e:	eb1c 0303 	adds.w	r3, ip, r3
 8000752:	f100 34ff 	add.w	r4, r0, #4294967295
 8000756:	d202      	bcs.n	800075e <__udivmoddi4+0x146>
 8000758:	429f      	cmp	r7, r3
 800075a:	f200 80b0 	bhi.w	80008be <__udivmoddi4+0x2a6>
 800075e:	4620      	mov	r0, r4
 8000760:	1bdb      	subs	r3, r3, r7
 8000762:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000766:	e7a5      	b.n	80006b4 <__udivmoddi4+0x9c>
 8000768:	f1c1 0620 	rsb	r6, r1, #32
 800076c:	408b      	lsls	r3, r1
 800076e:	fa22 f706 	lsr.w	r7, r2, r6
 8000772:	431f      	orrs	r7, r3
 8000774:	fa20 fc06 	lsr.w	ip, r0, r6
 8000778:	fa04 f301 	lsl.w	r3, r4, r1
 800077c:	ea43 030c 	orr.w	r3, r3, ip
 8000780:	40f4      	lsrs	r4, r6
 8000782:	fa00 f801 	lsl.w	r8, r0, r1
 8000786:	0c38      	lsrs	r0, r7, #16
 8000788:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800078c:	fbb4 fef0 	udiv	lr, r4, r0
 8000790:	fa1f fc87 	uxth.w	ip, r7
 8000794:	fb00 441e 	mls	r4, r0, lr, r4
 8000798:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800079c:	fb0e f90c 	mul.w	r9, lr, ip
 80007a0:	45a1      	cmp	r9, r4
 80007a2:	fa02 f201 	lsl.w	r2, r2, r1
 80007a6:	d90a      	bls.n	80007be <__udivmoddi4+0x1a6>
 80007a8:	193c      	adds	r4, r7, r4
 80007aa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007ae:	f080 8084 	bcs.w	80008ba <__udivmoddi4+0x2a2>
 80007b2:	45a1      	cmp	r9, r4
 80007b4:	f240 8081 	bls.w	80008ba <__udivmoddi4+0x2a2>
 80007b8:	f1ae 0e02 	sub.w	lr, lr, #2
 80007bc:	443c      	add	r4, r7
 80007be:	eba4 0409 	sub.w	r4, r4, r9
 80007c2:	fa1f f983 	uxth.w	r9, r3
 80007c6:	fbb4 f3f0 	udiv	r3, r4, r0
 80007ca:	fb00 4413 	mls	r4, r0, r3, r4
 80007ce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80007d6:	45a4      	cmp	ip, r4
 80007d8:	d907      	bls.n	80007ea <__udivmoddi4+0x1d2>
 80007da:	193c      	adds	r4, r7, r4
 80007dc:	f103 30ff 	add.w	r0, r3, #4294967295
 80007e0:	d267      	bcs.n	80008b2 <__udivmoddi4+0x29a>
 80007e2:	45a4      	cmp	ip, r4
 80007e4:	d965      	bls.n	80008b2 <__udivmoddi4+0x29a>
 80007e6:	3b02      	subs	r3, #2
 80007e8:	443c      	add	r4, r7
 80007ea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80007ee:	fba0 9302 	umull	r9, r3, r0, r2
 80007f2:	eba4 040c 	sub.w	r4, r4, ip
 80007f6:	429c      	cmp	r4, r3
 80007f8:	46ce      	mov	lr, r9
 80007fa:	469c      	mov	ip, r3
 80007fc:	d351      	bcc.n	80008a2 <__udivmoddi4+0x28a>
 80007fe:	d04e      	beq.n	800089e <__udivmoddi4+0x286>
 8000800:	b155      	cbz	r5, 8000818 <__udivmoddi4+0x200>
 8000802:	ebb8 030e 	subs.w	r3, r8, lr
 8000806:	eb64 040c 	sbc.w	r4, r4, ip
 800080a:	fa04 f606 	lsl.w	r6, r4, r6
 800080e:	40cb      	lsrs	r3, r1
 8000810:	431e      	orrs	r6, r3
 8000812:	40cc      	lsrs	r4, r1
 8000814:	e9c5 6400 	strd	r6, r4, [r5]
 8000818:	2100      	movs	r1, #0
 800081a:	e750      	b.n	80006be <__udivmoddi4+0xa6>
 800081c:	f1c2 0320 	rsb	r3, r2, #32
 8000820:	fa20 f103 	lsr.w	r1, r0, r3
 8000824:	fa0c fc02 	lsl.w	ip, ip, r2
 8000828:	fa24 f303 	lsr.w	r3, r4, r3
 800082c:	4094      	lsls	r4, r2
 800082e:	430c      	orrs	r4, r1
 8000830:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000834:	fa00 fe02 	lsl.w	lr, r0, r2
 8000838:	fa1f f78c 	uxth.w	r7, ip
 800083c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000840:	fb08 3110 	mls	r1, r8, r0, r3
 8000844:	0c23      	lsrs	r3, r4, #16
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb00 f107 	mul.w	r1, r0, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x24c>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f100 36ff 	add.w	r6, r0, #4294967295
 800085a:	d22c      	bcs.n	80008b6 <__udivmoddi4+0x29e>
 800085c:	4299      	cmp	r1, r3
 800085e:	d92a      	bls.n	80008b6 <__udivmoddi4+0x29e>
 8000860:	3802      	subs	r0, #2
 8000862:	4463      	add	r3, ip
 8000864:	1a5b      	subs	r3, r3, r1
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb3 f1f8 	udiv	r1, r3, r8
 800086c:	fb08 3311 	mls	r3, r8, r1, r3
 8000870:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000874:	fb01 f307 	mul.w	r3, r1, r7
 8000878:	42a3      	cmp	r3, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x276>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f101 36ff 	add.w	r6, r1, #4294967295
 8000884:	d213      	bcs.n	80008ae <__udivmoddi4+0x296>
 8000886:	42a3      	cmp	r3, r4
 8000888:	d911      	bls.n	80008ae <__udivmoddi4+0x296>
 800088a:	3902      	subs	r1, #2
 800088c:	4464      	add	r4, ip
 800088e:	1ae4      	subs	r4, r4, r3
 8000890:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000894:	e739      	b.n	800070a <__udivmoddi4+0xf2>
 8000896:	4604      	mov	r4, r0
 8000898:	e6f0      	b.n	800067c <__udivmoddi4+0x64>
 800089a:	4608      	mov	r0, r1
 800089c:	e706      	b.n	80006ac <__udivmoddi4+0x94>
 800089e:	45c8      	cmp	r8, r9
 80008a0:	d2ae      	bcs.n	8000800 <__udivmoddi4+0x1e8>
 80008a2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008a6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008aa:	3801      	subs	r0, #1
 80008ac:	e7a8      	b.n	8000800 <__udivmoddi4+0x1e8>
 80008ae:	4631      	mov	r1, r6
 80008b0:	e7ed      	b.n	800088e <__udivmoddi4+0x276>
 80008b2:	4603      	mov	r3, r0
 80008b4:	e799      	b.n	80007ea <__udivmoddi4+0x1d2>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e7d4      	b.n	8000864 <__udivmoddi4+0x24c>
 80008ba:	46d6      	mov	lr, sl
 80008bc:	e77f      	b.n	80007be <__udivmoddi4+0x1a6>
 80008be:	4463      	add	r3, ip
 80008c0:	3802      	subs	r0, #2
 80008c2:	e74d      	b.n	8000760 <__udivmoddi4+0x148>
 80008c4:	4606      	mov	r6, r0
 80008c6:	4623      	mov	r3, r4
 80008c8:	4608      	mov	r0, r1
 80008ca:	e70f      	b.n	80006ec <__udivmoddi4+0xd4>
 80008cc:	3e02      	subs	r6, #2
 80008ce:	4463      	add	r3, ip
 80008d0:	e730      	b.n	8000734 <__udivmoddi4+0x11c>
 80008d2:	bf00      	nop

080008d4 <__aeabi_idiv0>:
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
 80008f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008fa:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <MX_ADC1_Init+0xe4>)
 80008fc:	4a30      	ldr	r2, [pc, #192]	@ (80009c0 <MX_ADC1_Init+0xe8>)
 80008fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000900:	4b2e      	ldr	r3, [pc, #184]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000906:	4b2d      	ldr	r3, [pc, #180]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800090c:	4b2b      	ldr	r3, [pc, #172]	@ (80009bc <MX_ADC1_Init+0xe4>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000912:	4b2a      	ldr	r3, [pc, #168]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000918:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <MX_ADC1_Init+0xe4>)
 800091a:	2204      	movs	r2, #4
 800091c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800091e:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000920:	2200      	movs	r2, #0
 8000922:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000924:	4b25      	ldr	r3, [pc, #148]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800092a:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <MX_ADC1_Init+0xe4>)
 800092c:	2201      	movs	r2, #1
 800092e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b22      	ldr	r3, [pc, #136]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 8000938:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_ADC1_Init+0xe4>)
 800093a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800093e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000946:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <MX_ADC1_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000950:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000952:	2200      	movs	r2, #0
 8000954:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000956:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800095e:	4817      	ldr	r0, [pc, #92]	@ (80009bc <MX_ADC1_Init+0xe4>)
 8000960:	f001 fd9e 	bl	80024a0 <HAL_ADC_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800096a:	f000 fb6d 	bl	8001048 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4810      	ldr	r0, [pc, #64]	@ (80009bc <MX_ADC1_Init+0xe4>)
 800097a:	f002 fd63 	bl	8003444 <HAL_ADCEx_MultiModeConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000984:	f000 fb60 	bl	8001048 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_ADC1_Init+0xec>)
 800098a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800098c:	2306      	movs	r3, #6
 800098e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000990:	2300      	movs	r3, #0
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000994:	237f      	movs	r3, #127	@ 0x7f
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000998:	2304      	movs	r3, #4
 800099a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_ADC1_Init+0xe4>)
 80009a6:	f002 f903 	bl	8002bb0 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80009b0:	f000 fb4a 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	@ 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000008c 	.word	0x2000008c
 80009c0:	50040000 	.word	0x50040000
 80009c4:	25b00200 	.word	0x25b00200

080009c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b0ac      	sub	sp, #176	@ 0xb0
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	2288      	movs	r2, #136	@ 0x88
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f007 fd01 	bl	80083f0 <memset>
  if(adcHandle->Instance==ADC1)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a2b      	ldr	r2, [pc, #172]	@ (8000aa0 <HAL_ADC_MspInit+0xd8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d14f      	bne.n	8000a98 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80009fc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80009fe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000a12:	2307      	movs	r3, #7
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000a1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a22:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 fb7d 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000a34:	f000 fb08 	bl	8001048 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <HAL_ADC_MspInit+0xdc>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_ADC_MspInit+0xdc>)
 8000a3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <HAL_ADC_MspInit+0xdc>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <HAL_ADC_MspInit+0xdc>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	4a13      	ldr	r2, [pc, #76]	@ (8000aa4 <HAL_ADC_MspInit+0xdc>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <HAL_ADC_MspInit+0xdc>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a6e:	230b      	movs	r3, #11
 8000a70:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f002 fe70 	bl	8003768 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2012      	movs	r0, #18
 8000a8e:	f002 fe41 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000a92:	2012      	movs	r0, #18
 8000a94:	f002 fe5a 	bl	800374c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	37b0      	adds	r7, #176	@ 0xb0
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	50040000 	.word	0x50040000
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <encoder_init>:
 */
#include "encoder.h"
static ENCODER encoder;

void encoder_init(TIM_HandleTypeDef * htim_param, int32_t min, int32_t max)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
	encoder.htim = htim_param;
 8000ab4:	4a09      	ldr	r2, [pc, #36]	@ (8000adc <encoder_init+0x34>)
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6013      	str	r3, [r2, #0]
	    encoder.min_value = min;
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <encoder_init+0x34>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	6093      	str	r3, [r2, #8]
	    encoder.max_value = max;
 8000ac0:	4a06      	ldr	r2, [pc, #24]	@ (8000adc <encoder_init+0x34>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	6053      	str	r3, [r2, #4]
	    //encoder.htim->Instance->CNT=0;
	    HAL_TIM_Encoder_Start(encoder.htim, TIM_CHANNEL_ALL);
 8000ac6:	4b05      	ldr	r3, [pc, #20]	@ (8000adc <encoder_init+0x34>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	213c      	movs	r1, #60	@ 0x3c
 8000acc:	4618      	mov	r0, r3
 8000ace:	f005 fb5f 	bl	8006190 <HAL_TIM_Encoder_Start>


}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000f0 	.word	0x200000f0

08000ae0 <encoder_read>:
int32_t encoder_read()
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
    int32_t value = encoder.htim->Instance->CNT;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <encoder_read+0x58>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aee:	607b      	str	r3, [r7, #4]

    if (value > encoder.max_value) {
 8000af0:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <encoder_read+0x58>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	dd09      	ble.n	8000b0e <encoder_read+0x2e>
        value = encoder.max_value;
 8000afa:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <encoder_read+0x58>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	607b      	str	r3, [r7, #4]
        encoder.htim->Instance->CNT = encoder.max_value;
 8000b00:	4b0d      	ldr	r3, [pc, #52]	@ (8000b38 <encoder_read+0x58>)
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <encoder_read+0x58>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000b0c:	e00d      	b.n	8000b2a <encoder_read+0x4a>
        }

    else if (value < encoder.min_value) {
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <encoder_read+0x58>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	da08      	bge.n	8000b2a <encoder_read+0x4a>
        value = encoder.min_value;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <encoder_read+0x58>)
 8000b1a:	689b      	ldr	r3, [r3, #8]
 8000b1c:	607b      	str	r3, [r7, #4]
        encoder.htim->Instance->CNT = encoder.min_value;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <encoder_read+0x58>)
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <encoder_read+0x58>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
    }


    return value;
 8000b2a:	687b      	ldr	r3, [r7, #4]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	200000f0 	.word	0x200000f0

08000b3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b66      	ldr	r3, [pc, #408]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	4a65      	ldr	r2, [pc, #404]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5e:	4b63      	ldr	r3, [pc, #396]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	4b60      	ldr	r3, [pc, #384]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4a5f      	ldr	r2, [pc, #380]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4b5d      	ldr	r3, [pc, #372]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b5a      	ldr	r3, [pc, #360]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4a59      	ldr	r2, [pc, #356]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4b57      	ldr	r3, [pc, #348]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b54      	ldr	r3, [pc, #336]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	4a53      	ldr	r2, [pc, #332]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ba6:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <MX_GPIO_Init+0x1b0>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	484e      	ldr	r0, [pc, #312]	@ (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000bb8:	f002 ff80 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc6:	f002 ff79 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f24e 0136 	movw	r1, #57398	@ 0xe036
 8000bd0:	4848      	ldr	r0, [pc, #288]	@ (8000cf4 <MX_GPIO_Init+0x1b8>)
 8000bd2:	f002 ff73 	bl	8003abc <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2180      	movs	r1, #128	@ 0x80
 8000bda:	4845      	ldr	r0, [pc, #276]	@ (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000bdc:	f002 ff6e 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_ENN_GPIO_Port, STEPPER_ENN_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bea:	f002 ff67 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	483a      	ldr	r0, [pc, #232]	@ (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000c06:	f002 fdaf 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_0_Pin;
 8000c0a:	2381      	movs	r3, #129	@ 0x81
 8000c0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4833      	ldr	r0, [pc, #204]	@ (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000c22:	f002 fda1 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAGNETO_STATUS_Pin;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAGNETO_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	482d      	ldr	r0, [pc, #180]	@ (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000c3a:	f002 fd95 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin
 8000c3e:	f44f 53cd 	mov.w	r3, #6560	@ 0x19a0
 8000c42:	617b      	str	r3, [r7, #20]
                          |STEPPER_ENN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c5a:	f002 fd85 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin|BTN_CENTER_Pin|BTN_LEFT_Pin|BTN_TOP_Pin
 8000c5e:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8000c62:	617b      	str	r3, [r7, #20]
                          |BTN_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	481e      	ldr	r0, [pc, #120]	@ (8000cf0 <MX_GPIO_Init+0x1b4>)
 8000c76:	f002 fd77 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAGNETO_INT_Pin|BTN_BOTTOM_Pin;
 8000c7a:	f640 0301 	movw	r3, #2049	@ 0x801
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c80:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4818      	ldr	r0, [pc, #96]	@ (8000cf4 <MX_GPIO_Init+0x1b8>)
 8000c92:	f002 fd69 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 8000c96:	f24e 0336 	movw	r3, #57398	@ 0xe036
 8000c9a:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	4811      	ldr	r0, [pc, #68]	@ (8000cf4 <MX_GPIO_Init+0x1b8>)
 8000cb0:	f002 fd5a 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8000cb4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cce:	f002 fd4b 	bl	8003768 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2028      	movs	r0, #40	@ 0x28
 8000cd8:	f002 fd1c 	bl	8003714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cdc:	2028      	movs	r0, #40	@ 0x28
 8000cde:	f002 fd35 	bl	800374c <HAL_NVIC_EnableIRQ>

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	@ 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000800 	.word	0x48000800
 8000cf4:	48000400 	.word	0x48000400

08000cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000d70 <MX_I2C1_Init+0x78>)
 8000d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d04:	4a1b      	ldr	r2, [pc, #108]	@ (8000d74 <MX_I2C1_Init+0x7c>)
 8000d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d08:	4b18      	ldr	r3, [pc, #96]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0e:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d32:	480e      	ldr	r0, [pc, #56]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d34:	f002 fefd 	bl	8003b32 <HAL_I2C_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d3e:	f000 f983 	bl	8001048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d42:	2100      	movs	r1, #0
 8000d44:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d46:	f003 fac1 	bl	80042cc <HAL_I2CEx_ConfigAnalogFilter>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d50:	f000 f97a 	bl	8001048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_I2C1_Init+0x74>)
 8000d58:	f003 fb03 	bl	8004362 <HAL_I2CEx_ConfigDigitalFilter>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d62:	f000 f971 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000fc 	.word	0x200000fc
 8000d70:	40005400 	.word	0x40005400
 8000d74:	10d19ce4 	.word	0x10d19ce4

08000d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2288      	movs	r2, #136	@ 0x88
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f007 fb29 	bl	80083f0 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a21      	ldr	r2, [pc, #132]	@ (8000e28 <HAL_I2C_MspInit+0xb0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d13a      	bne.n	8000e1e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000da8:	2340      	movs	r3, #64	@ 0x40
 8000daa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 f9b7 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000dc0:	f000 f942 	bl	8001048 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b19      	ldr	r3, [pc, #100]	@ (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc8:	4a18      	ldr	r2, [pc, #96]	@ (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ddc:	23c0      	movs	r3, #192	@ 0xc0
 8000dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de2:	2312      	movs	r3, #18
 8000de4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000df4:	2304      	movs	r3, #4
 8000df6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480b      	ldr	r0, [pc, #44]	@ (8000e30 <HAL_I2C_MspInit+0xb8>)
 8000e02:	f002 fcb1 	bl	8003768 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	@ (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000e0c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <HAL_I2C_MspInit+0xb4>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e1e:	bf00      	nop
 8000e20:	37b0      	adds	r7, #176	@ 0xb0
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40005400 	.word	0x40005400
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400

08000e34 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e3c:	1d39      	adds	r1, r7, #4
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e42:	2201      	movs	r2, #1
 8000e44:	4803      	ldr	r0, [pc, #12]	@ (8000e54 <__io_putchar+0x20>)
 8000e46:	f006 fa6f 	bl	8007328 <HAL_UART_Transmit>
return ch;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200007b0 	.word	0x200007b0

08000e58 <__io_getchar>:
int __io_getchar(void)

{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

uint8_t ch = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]

__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000e62:	4b0b      	ldr	r3, [pc, #44]	@ (8000e90 <__io_getchar+0x38>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2208      	movs	r2, #8
 8000e68:	621a      	str	r2, [r3, #32]

HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e6a:	1df9      	adds	r1, r7, #7
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	2201      	movs	r2, #1
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <__io_getchar+0x38>)
 8000e74:	f006 fae1 	bl	800743a <HAL_UART_Receive>

HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e78:	1df9      	adds	r1, r7, #7
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <__io_getchar+0x38>)
 8000e82:	f006 fa51 	bl	8007328 <HAL_UART_Transmit>

return ch;
 8000e86:	79fb      	ldrb	r3, [r7, #7]

}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200007b0 	.word	0x200007b0

08000e94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	@ 0x30
 8000e98:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9a:	f001 f8f3 	bl	8002084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e9e:	f000 f86f 	bl	8000f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea2:	f7ff fe4b 	bl	8000b3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea6:	f000 fff1 	bl	8001e8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eaa:	f7ff ff25 	bl	8000cf8 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000eae:	f000 f8d1 	bl	8001054 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000eb2:	f000 fdf1 	bl	8001a98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000eb6:	f000 fe43 	bl	8001b40 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000eba:	f000 ffb7 	bl	8001e2c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000ebe:	f7ff fd0b 	bl	80008d8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ec2:	f000 feb5 	bl	8001c30 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1315_Init();
 8000ec6:	f000 f965 	bl	8001194 <ssd1315_Init>


  ssd1315_Clear(SSD1315_COLOR_BLACK);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f996 	bl	80011fc <ssd1315_Clear>
  char buffer[16]={0};
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
  encoder_init(&htim2, -8, 8);
 8000ede:	2208      	movs	r2, #8
 8000ee0:	f06f 0107 	mvn.w	r1, #7
 8000ee4:	4820      	ldr	r0, [pc, #128]	@ (8000f68 <main+0xd4>)
 8000ee6:	f7ff fddf 	bl	8000aa8 <encoder_init>
  init_stepper(&htim3,TIM_CHANNEL_1,
 8000eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eee:	9305      	str	r3, [sp, #20]
 8000ef0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ef4:	9304      	str	r3, [sp, #16]
 8000ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <main+0xd8>)
 8000efe:	9302      	str	r3, [sp, #8]
 8000f00:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f12:	2100      	movs	r1, #0
 8000f14:	4816      	ldr	r0, [pc, #88]	@ (8000f70 <main+0xdc>)
 8000f16:	f000 fb19 	bl	800154c <init_stepper>
		  GPIOA,GPIO_PIN_12);


  while (1)
  {
	  int speed=encoder_read();
 8000f1a:	f7ff fde1 	bl	8000ae0 <encoder_read>
 8000f1e:	6178      	str	r0, [r7, #20]
	  float a=get_speed();
 8000f20:	f000 fbc4 	bl	80016ac <get_speed>
 8000f24:	ed87 0a04 	vstr	s0, [r7, #16]
	  snprintf(buffer,16,"Speed : %d \n\r",speed);
 8000f28:	4638      	mov	r0, r7
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	4a11      	ldr	r2, [pc, #68]	@ (8000f74 <main+0xe0>)
 8000f2e:	2110      	movs	r1, #16
 8000f30:	f007 f952 	bl	80081d8 <sniprintf>
	  snprintf(buffer,16,"Speed : %d",a);
 8000f34:	6938      	ldr	r0, [r7, #16]
 8000f36:	f7ff faff 	bl	8000538 <__aeabi_f2d>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4638      	mov	r0, r7
 8000f40:	e9cd 2300 	strd	r2, r3, [sp]
 8000f44:	4a0c      	ldr	r2, [pc, #48]	@ (8000f78 <main+0xe4>)
 8000f46:	2110      	movs	r1, #16
 8000f48:	f007 f946 	bl	80081d8 <sniprintf>

	  ssd1315_Draw_String(0,0,buffer,&Font_11x18);
 8000f4c:	463a      	mov	r2, r7
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <main+0xe8>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 fa3a 	bl	80013cc <ssd1315_Draw_String>
	  ssd1315_Refresh();
 8000f58:	f000 f9b8 	bl	80012cc <ssd1315_Refresh>
	  launch_stepper(speed);
 8000f5c:	6978      	ldr	r0, [r7, #20]
 8000f5e:	f000 fb51 	bl	8001604 <launch_stepper>
  {
 8000f62:	bf00      	nop
 8000f64:	e7d9      	b.n	8000f1a <main+0x86>
 8000f66:	bf00      	nop
 8000f68:	20000644 	.word	0x20000644
 8000f6c:	48000400 	.word	0x48000400
 8000f70:	20000690 	.word	0x20000690
 8000f74:	0800927c 	.word	0x0800927c
 8000f78:	0800928c 	.word	0x0800928c
 8000f7c:	20000000 	.word	0x20000000

08000f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b096      	sub	sp, #88	@ 0x58
 8000f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	2244      	movs	r2, #68	@ 0x44
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f007 fa2e 	bl	80083f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fa2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fa6:	f003 fa37 	bl	8004418 <HAL_PWREx_ControlVoltageScaling>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000fb0:	f000 f84a 	bl	8001048 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fbe:	2310      	movs	r3, #16
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 fa6e 	bl	80044c4 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fee:	f000 f82b 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	2104      	movs	r1, #4
 800100a:	4618      	mov	r0, r3
 800100c:	f003 fe36 	bl	8004c7c <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001016:	f000 f817 	bl	8001048 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3758      	adds	r7, #88	@ 0x58
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001036:	f001 f845 	bl	80020c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40001000 	.word	0x40001000

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <Error_Handler+0x8>

08001054 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <MX_SPI2_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <MX_SPI2_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MX_SPI2_Init+0x74>)
 8001060:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001064:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <MX_SPI2_Init+0x74>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800106c:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <MX_SPI2_Init+0x74>)
 800106e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001072:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_SPI2_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <MX_SPI2_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_SPI2_Init+0x74>)
 8001082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001086:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_SPI2_Init+0x74>)
 800108a:	2230      	movs	r2, #48	@ 0x30
 800108c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_SPI2_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_SPI2_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_SPI2_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_SPI2_Init+0x74>)
 80010a2:	2207      	movs	r2, #7
 80010a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_SPI2_Init+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_SPI2_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_SPI2_Init+0x74>)
 80010b4:	f004 fcf4 	bl	8005aa0 <HAL_SPI_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80010be:	f7ff ffc3 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000150 	.word	0x20000150
 80010cc:	40003800 	.word	0x40003800

080010d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a25      	ldr	r2, [pc, #148]	@ (8001184 <HAL_SPI_MspInit+0xb4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d144      	bne.n	800117c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f6:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 80010f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a1e      	ldr	r2, [pc, #120]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <HAL_SPI_MspInit+0xb8>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800113a:	230c      	movs	r3, #12
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	480d      	ldr	r0, [pc, #52]	@ (800118c <HAL_SPI_MspInit+0xbc>)
 8001156:	f002 fb07 	bl	8003768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800115a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800116c:	2305      	movs	r3, #5
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <HAL_SPI_MspInit+0xc0>)
 8001178:	f002 faf6 	bl	8003768 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	@ 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40003800 	.word	0x40003800
 8001188:	40021000 	.word	0x40021000
 800118c:	48000800 	.word	0x48000800
 8001190:	48000400 	.word	0x48000400

08001194 <ssd1315_Init>:
  * @brief  Initialise the ssd1315 LCD Component.
  * @param  None
  * @retval None
  */
void ssd1315_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  if(Is_ssd1315_Initialized == 0)
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <ssd1315_Init+0x60>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d11f      	bne.n	80011e0 <ssd1315_Init+0x4c>
  {
    Is_ssd1315_Initialized = 1;
 80011a0:	4b14      	ldr	r3, [pc, #80]	@ (80011f4 <ssd1315_Init+0x60>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	701a      	strb	r2, [r3, #0]
    /* Initialise ssd1315 low level bus layer --------------------------------*/
    LCD_IO_Init();
 80011a6:	f000 f93d 	bl	8001424 <LCD_IO_Init>

    /* Driving ability setting */
    /* Initialisation sequence */
    LCD_IO_WriteCommand(0x80);
 80011aa:	2080      	movs	r0, #128	@ 0x80
 80011ac:	f000 f96e 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x8D);  /* Disable charge pump regulator */
 80011b0:	208d      	movs	r0, #141	@ 0x8d
 80011b2:	f000 f96b 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x14);
 80011b6:	2014      	movs	r0, #20
 80011b8:	f000 f968 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x20);  /* Set Memory Addressing Mode */
 80011bc:	2020      	movs	r0, #32
 80011be:	f000 f965 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x00);  /* 00b: Horizontal Addressing Mode */
 80011c2:	2000      	movs	r0, #0
 80011c4:	f000 f962 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0x40);  /* 00b: Horizontal Addressing Mode */
 80011c8:	2040      	movs	r0, #64	@ 0x40
 80011ca:	f000 f95f 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xC8);  /* c8:flip the 64 rows */
 80011ce:	20c8      	movs	r0, #200	@ 0xc8
 80011d0:	f000 f95c 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xA1);  /* a1:flip the 128 columns */
 80011d4:	20a1      	movs	r0, #161	@ 0xa1
 80011d6:	f000 f959 	bl	800148c <LCD_IO_WriteCommand>
    LCD_IO_WriteCommand(0xAF);  /* Display On */
 80011da:	20af      	movs	r0, #175	@ 0xaf
 80011dc:	f000 f956 	bl	800148c <LCD_IO_WriteCommand>
  }

  ssd1315_Clear(SSD1315_COLOR_BLACK);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 f80b 	bl	80011fc <ssd1315_Clear>

  LCD_IO_WriteMultipleData((uint8_t*)PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 80011e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ea:	4803      	ldr	r0, [pc, #12]	@ (80011f8 <ssd1315_Init+0x64>)
 80011ec:	f000 f96c 	bl	80014c8 <LCD_IO_WriteMultipleData>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001b4 	.word	0x200001b4
 80011f8:	200001c0 	.word	0x200001c0

080011fc <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode: the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_Clear(uint16_t ColorCode)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	2bff      	cmp	r3, #255	@ 0xff
 800120a:	d106      	bne.n	800121a <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, 0xFF, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800120c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001210:	21ff      	movs	r1, #255	@ 0xff
 8001212:	4807      	ldr	r0, [pc, #28]	@ (8001230 <ssd1315_Clear+0x34>)
 8001214:	f007 f8ec 	bl	80083f0 <memset>
  }
  else
  {
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 8001218:	e005      	b.n	8001226 <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, 0x00, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800121a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121e:	2100      	movs	r1, #0
 8001220:	4803      	ldr	r0, [pc, #12]	@ (8001230 <ssd1315_Clear+0x34>)
 8001222:	f007 f8e5 	bl	80083f0 <memset>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200001c0 	.word	0x200001c0

08001234 <ssd1315_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  ColorCode: the pixel color (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK)
  * @retval None
  */
void ssd1315_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t ColorCode)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	80fb      	strh	r3, [r7, #6]
 800123e:	460b      	mov	r3, r1
 8001240:	80bb      	strh	r3, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	807b      	strh	r3, [r7, #2]
  /* Set color */
  if (ColorCode == SSD1315_COLOR_WHITE) {
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	2bff      	cmp	r3, #255	@ 0xff
 800124a:	d11a      	bne.n	8001282 <ssd1315_WritePixel+0x4e>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 800124c:	88fa      	ldrh	r2, [r7, #6]
 800124e:	88bb      	ldrh	r3, [r7, #4]
 8001250:	08db      	lsrs	r3, r3, #3
 8001252:	b298      	uxth	r0, r3
 8001254:	4603      	mov	r3, r0
 8001256:	01db      	lsls	r3, r3, #7
 8001258:	4413      	add	r3, r2
 800125a:	4a1b      	ldr	r2, [pc, #108]	@ (80012c8 <ssd1315_WritePixel+0x94>)
 800125c:	5cd3      	ldrb	r3, [r2, r3]
 800125e:	b25a      	sxtb	r2, r3
 8001260:	88bb      	ldrh	r3, [r7, #4]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	2101      	movs	r1, #1
 8001268:	fa01 f303 	lsl.w	r3, r1, r3
 800126c:	b25b      	sxtb	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b259      	sxtb	r1, r3
 8001272:	88fa      	ldrh	r2, [r7, #6]
 8001274:	4603      	mov	r3, r0
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	4413      	add	r3, r2
 800127a:	b2c9      	uxtb	r1, r1
 800127c:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <ssd1315_WritePixel+0x94>)
 800127e:	54d1      	strb	r1, [r2, r3]
  } else {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
  }
}
 8001280:	e01b      	b.n	80012ba <ssd1315_WritePixel+0x86>
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 8001282:	88fa      	ldrh	r2, [r7, #6]
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	08db      	lsrs	r3, r3, #3
 8001288:	b298      	uxth	r0, r3
 800128a:	4603      	mov	r3, r0
 800128c:	01db      	lsls	r3, r3, #7
 800128e:	4413      	add	r3, r2
 8001290:	4a0d      	ldr	r2, [pc, #52]	@ (80012c8 <ssd1315_WritePixel+0x94>)
 8001292:	5cd3      	ldrb	r3, [r2, r3]
 8001294:	b25a      	sxtb	r2, r3
 8001296:	88bb      	ldrh	r3, [r7, #4]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	2101      	movs	r1, #1
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	b259      	sxtb	r1, r3
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	4603      	mov	r3, r0
 80012b0:	01db      	lsls	r3, r3, #7
 80012b2:	4413      	add	r3, r2
 80012b4:	b2c9      	uxtb	r1, r1
 80012b6:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <ssd1315_WritePixel+0x94>)
 80012b8:	54d1      	strb	r1, [r2, r3]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	200001c0 	.word	0x200001c0

080012cc <ssd1315_Refresh>:
  * @brief  Refresh Displays.
  * @param  None
  * @retval None
  */
void ssd1315_Refresh(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Set Display Start Line to 0*/
  LCD_IO_WriteCommand(0x40);
 80012d0:	2040      	movs	r0, #64	@ 0x40
 80012d2:	f000 f8db 	bl	800148c <LCD_IO_WriteCommand>
  /* Set Column Address Setup column start(0) and end address (127)*/
  LCD_IO_WriteCommand(0x21);
 80012d6:	2021      	movs	r0, #33	@ 0x21
 80012d8:	f000 f8d8 	bl	800148c <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f8d5 	bl	800148c <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x7F);
 80012e2:	207f      	movs	r0, #127	@ 0x7f
 80012e4:	f000 f8d2 	bl	800148c <LCD_IO_WriteCommand>
  /* Set Page Address Setup page start (0)  and end address (7)*/
  LCD_IO_WriteCommand(0x22);
 80012e8:	2022      	movs	r0, #34	@ 0x22
 80012ea:	f000 f8cf 	bl	800148c <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x00);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f8cc 	bl	800148c <LCD_IO_WriteCommand>
  LCD_IO_WriteCommand(0x07);
 80012f4:	2007      	movs	r0, #7
 80012f6:	f000 f8c9 	bl	800148c <LCD_IO_WriteCommand>
  /* Fill Buffer in GDDRAM of LCD */
  LCD_IO_WriteMultipleData(PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 80012fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80012fe:	4802      	ldr	r0, [pc, #8]	@ (8001308 <ssd1315_Refresh+0x3c>)
 8001300:	f000 f8e2 	bl	80014c8 <LCD_IO_WriteMultipleData>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001c0 	.word	0x200001c0

0800130c <ssd1315_DrawChar>:

/**
* @}
*/
void ssd1315_DrawChar(uint8_t X, uint8_t Y, char c, FontDef_t * font){
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]
 8001318:	460b      	mov	r3, r1
 800131a:	71bb      	strb	r3, [r7, #6]
 800131c:	4613      	mov	r3, r2
 800131e:	717b      	strb	r3, [r7, #5]
	for(int i=0;i<font->FontHeight;i++){
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e047      	b.n	80013b6 <ssd1315_DrawChar+0xaa>
		uint16_t line = (font->data)[((c-32)*font->FontHeight)+i];
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	797b      	ldrb	r3, [r7, #5]
 800132c:	3b20      	subs	r3, #32
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	7849      	ldrb	r1, [r1, #1]
 8001332:	fb03 f101 	mul.w	r1, r3, r1
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	440b      	add	r3, r1
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	81fb      	strh	r3, [r7, #14]
		for (int j=0;j<font->FontWidth;j++){
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	e02d      	b.n	80013a4 <ssd1315_DrawChar+0x98>
			if (((line>>(15-j))&1)==1)
 8001348:	89fa      	ldrh	r2, [r7, #14]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	f1c3 030f 	rsb	r3, r3, #15
 8001350:	fa42 f303 	asr.w	r3, r2, r3
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d010      	beq.n	800137e <ssd1315_DrawChar+0x72>
				ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_WHITE);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	b29a      	uxth	r2, r3
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	b29b      	uxth	r3, r3
 8001364:	4413      	add	r3, r2
 8001366:	b298      	uxth	r0, r3
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	b29a      	uxth	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4413      	add	r3, r2
 8001372:	b29b      	uxth	r3, r3
 8001374:	22ff      	movs	r2, #255	@ 0xff
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff ff5c 	bl	8001234 <ssd1315_WritePixel>
 800137c:	e00f      	b.n	800139e <ssd1315_DrawChar+0x92>
			else{ssd1315_WritePixel(X+j,Y+i,SSD1315_COLOR_BLACK);}
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	b29a      	uxth	r2, r3
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	b29b      	uxth	r3, r3
 8001386:	4413      	add	r3, r2
 8001388:	b298      	uxth	r0, r3
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	b29a      	uxth	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4413      	add	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	2200      	movs	r2, #0
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff ff4b 	bl	8001234 <ssd1315_WritePixel>
		for (int j=0;j<font->FontWidth;j++){
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	3301      	adds	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4293      	cmp	r3, r2
 80013ae:	dbcb      	blt.n	8001348 <ssd1315_DrawChar+0x3c>
	for(int i=0;i<font->FontHeight;i++){
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	461a      	mov	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	4293      	cmp	r3, r2
 80013c0:	dbb1      	blt.n	8001326 <ssd1315_DrawChar+0x1a>
		}
	}
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <ssd1315_Draw_String>:

void ssd1315_Draw_String(uint8_t X, uint8_t Y, char * s, FontDef_t * font){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60ba      	str	r2, [r7, #8]
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	4603      	mov	r3, r0
 80013d8:	73fb      	strb	r3, [r7, #15]
 80013da:	460b      	mov	r3, r1
 80013dc:	73bb      	strb	r3, [r7, #14]
	int column=0;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 80013e2:	e015      	b.n	8001410 <ssd1315_Draw_String+0x44>
		ssd1315_DrawChar(X+(column*font->FontWidth),Y,*s,font);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	fb12 f303 	smulbb	r3, r2, r3
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	4413      	add	r3, r2
 80013f6:	b2d8      	uxtb	r0, r3
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	781a      	ldrb	r2, [r3, #0]
 80013fc:	7bb9      	ldrb	r1, [r7, #14]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f7ff ff84 	bl	800130c <ssd1315_DrawChar>
		s++;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	3301      	adds	r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
		column++;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
	while (*s!='\0'){
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1e5      	bne.n	80013e4 <ssd1315_Draw_String+0x18>
	}
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <LCD_IO_Init>:

extern I2C_HandleTypeDef hi2c1;

int ssd1315_i2c_adress;

void LCD_IO_Init(){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af02      	add	r7, sp, #8
	int status;
	HAL_I2C_Init(&hi2c1);
 800142a:	4814      	ldr	r0, [pc, #80]	@ (800147c <LCD_IO_Init+0x58>)
 800142c:	f002 fb81 	bl	8003b32 <HAL_I2C_Init>
		for (int i=0;i<255;i++){
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	e018      	b.n	8001468 <LCD_IO_Init+0x44>
			status=HAL_I2C_Master_Transmit(&hi2c1,i,NULL,0,10);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	b299      	uxth	r1, r3
 800143a:	230a      	movs	r3, #10
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	2200      	movs	r2, #0
 8001442:	480e      	ldr	r0, [pc, #56]	@ (800147c <LCD_IO_Init+0x58>)
 8001444:	f002 fc10 	bl	8003c68 <HAL_I2C_Master_Transmit>
 8001448:	4603      	mov	r3, r0
 800144a:	603b      	str	r3, [r7, #0]
			if(status==HAL_OK){
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d107      	bne.n	8001462 <LCD_IO_Init+0x3e>
				printf("Found one display at 0x%x\r\n",i);
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	480a      	ldr	r0, [pc, #40]	@ (8001480 <LCD_IO_Init+0x5c>)
 8001456:	f006 fe4f 	bl	80080f8 <iprintf>
				ssd1315_i2c_adress=i;
 800145a:	4a0a      	ldr	r2, [pc, #40]	@ (8001484 <LCD_IO_Init+0x60>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6013      	str	r3, [r2, #0]
				return;
 8001460:	e008      	b.n	8001474 <LCD_IO_Init+0x50>
		for (int i=0;i<255;i++){
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2bfe      	cmp	r3, #254	@ 0xfe
 800146c:	dde3      	ble.n	8001436 <LCD_IO_Init+0x12>
			}
		}
	printf("Found no LCD in I2C bus \r\n");
 800146e:	4806      	ldr	r0, [pc, #24]	@ (8001488 <LCD_IO_Init+0x64>)
 8001470:	f006 feaa 	bl	80081c8 <puts>
}
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200000fc 	.word	0x200000fc
 8001480:	08009298 	.word	0x08009298
 8001484:	200005c0 	.word	0x200005c0
 8001488:	080092b4 	.word	0x080092b4

0800148c <LCD_IO_WriteCommand>:
void LCD_IO_WriteCommand(uint8_t Value){
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	uint8_t command_buffer[2]={0x80,0};
 8001496:	2380      	movs	r3, #128	@ 0x80
 8001498:	81bb      	strh	r3, [r7, #12]
	command_buffer[1]=Value;
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,command_buffer,2,-1);
 800149e:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <LCD_IO_WriteCommand+0x34>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b299      	uxth	r1, r3
 80014a4:	f107 020c 	add.w	r2, r7, #12
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2302      	movs	r3, #2
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <LCD_IO_WriteCommand+0x38>)
 80014b2:	f002 fbd9 	bl	8003c68 <HAL_I2C_Master_Transmit>
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200005c0 	.word	0x200005c0
 80014c4:	200000fc 	.word	0x200000fc

080014c8 <LCD_IO_WriteMultipleData>:
void    LCD_IO_WriteData(uint8_t Value){
	uint8_t data_buffer[2]={0xc0,0};
	data_buffer[1]=Value;
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,2,-1);
}
void    LCD_IO_WriteMultipleData(uint8_t *pData, uint32_t Size){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 80014ce:	af02      	add	r7, sp, #8
 80014d0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80014d4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80014d8:	6018      	str	r0, [r3, #0]
 80014da:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80014de:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80014e2:	6019      	str	r1, [r3, #0]
	uint8_t data_buffer[1025];
	data_buffer[0]=0x40;
 80014e4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80014e8:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
 80014ec:	2240      	movs	r2, #64	@ 0x40
 80014ee:	701a      	strb	r2, [r3, #0]
	memcpy(data_buffer+1,pData,Size+1);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	3301      	adds	r3, #1
 80014f6:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 80014fa:	f5a2 6282 	sub.w	r2, r2, #1040	@ 0x410
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	3201      	adds	r2, #1
 8001502:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8001506:	f2a1 410c 	subw	r1, r1, #1036	@ 0x40c
 800150a:	6809      	ldr	r1, [r1, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f006 ffea 	bl	80084e6 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c1,ssd1315_i2c_adress,data_buffer,Size+1,-1);
 8001512:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <LCD_IO_WriteMultipleData+0x7c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b299      	uxth	r1, r3
 8001518:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800151c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	b29b      	uxth	r3, r3
 8001524:	3301      	adds	r3, #1
 8001526:	b29b      	uxth	r3, r3
 8001528:	f107 020c 	add.w	r2, r7, #12
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	9000      	str	r0, [sp, #0]
 8001532:	4805      	ldr	r0, [pc, #20]	@ (8001548 <LCD_IO_WriteMultipleData+0x80>)
 8001534:	f002 fb98 	bl	8003c68 <HAL_I2C_Master_Transmit>

}
 8001538:	bf00      	nop
 800153a:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200005c0 	.word	0x200005c0
 8001548:	200000fc 	.word	0x200000fc

0800154c <init_stepper>:
void init_stepper( TIM_HandleTypeDef * htim_pwm_p, uint32_t pwm_channel_number_p,
		GPIO_TypeDef * gpio_direction_p, uint16_t gpio_direction_pin_p,
		GPIO_TypeDef * gpio_ms1_p, uint16_t gpio_ms1_pin_p,
		GPIO_TypeDef * gpio_ms2_p, uint16_t gpio_ms2_pin_p,
		GPIO_TypeDef * gpio_enable_p, uint16_t gpio_enable_pin_p)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	807b      	strh	r3, [r7, #2]
	stepper_motor.htim_pwm=htim_pwm_p;
 800155a:	4a29      	ldr	r2, [pc, #164]	@ (8001600 <init_stepper+0xb4>)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6013      	str	r3, [r2, #0]
	stepper_motor.pwm_channel_number = pwm_channel_number_p;
 8001560:	4a27      	ldr	r2, [pc, #156]	@ (8001600 <init_stepper+0xb4>)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	6053      	str	r3, [r2, #4]
	stepper_motor.gpio_direction = gpio_direction_p;
 8001566:	4a26      	ldr	r2, [pc, #152]	@ (8001600 <init_stepper+0xb4>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6093      	str	r3, [r2, #8]
	stepper_motor.gpio_direction_pin = gpio_direction_pin_p;
 800156c:	4a24      	ldr	r2, [pc, #144]	@ (8001600 <init_stepper+0xb4>)
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	8193      	strh	r3, [r2, #12]
	stepper_motor.gpio_ms1 = gpio_ms1_p;
 8001572:	4a23      	ldr	r2, [pc, #140]	@ (8001600 <init_stepper+0xb4>)
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	6113      	str	r3, [r2, #16]
	stepper_motor.gpio_ms1_pin = gpio_ms1_pin_p;
 8001578:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <init_stepper+0xb4>)
 800157a:	8bbb      	ldrh	r3, [r7, #28]
 800157c:	8293      	strh	r3, [r2, #20]
	stepper_motor.gpio_ms2 = gpio_ms2_p;
 800157e:	4a20      	ldr	r2, [pc, #128]	@ (8001600 <init_stepper+0xb4>)
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	6193      	str	r3, [r2, #24]
	stepper_motor.gpio_ms2_pin = gpio_ms2_pin_p;
 8001584:	4a1e      	ldr	r2, [pc, #120]	@ (8001600 <init_stepper+0xb4>)
 8001586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001588:	8393      	strh	r3, [r2, #28]
	stepper_motor.gpio_enable = gpio_enable_p;
 800158a:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <init_stepper+0xb4>)
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	6213      	str	r3, [r2, #32]
	stepper_motor.gpio_enable_pin = gpio_enable_pin_p;
 8001590:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <init_stepper+0xb4>)
 8001592:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001594:	8493      	strh	r3, [r2, #36]	@ 0x24
	HAL_GPIO_WritePin(stepper_motor.gpio_direction, stepper_motor.gpio_direction_pin,0);
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <init_stepper+0xb4>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4a19      	ldr	r2, [pc, #100]	@ (8001600 <init_stepper+0xb4>)
 800159c:	8991      	ldrh	r1, [r2, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fa8b 	bl	8003abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stepper_motor.gpio_enable, stepper_motor.gpio_enable_pin,1);
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <init_stepper+0xb4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <init_stepper+0xb4>)
 80015ac:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 80015ae:	2201      	movs	r2, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fa83 	bl	8003abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stepper_motor.gpio_ms1, stepper_motor.gpio_ms1_pin,0);
 80015b6:	4b12      	ldr	r3, [pc, #72]	@ (8001600 <init_stepper+0xb4>)
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	4a11      	ldr	r2, [pc, #68]	@ (8001600 <init_stepper+0xb4>)
 80015bc:	8a91      	ldrh	r1, [r2, #20]
 80015be:	2200      	movs	r2, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f002 fa7b 	bl	8003abc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stepper_motor.gpio_ms2, stepper_motor.gpio_ms2_pin,0);
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <init_stepper+0xb4>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001600 <init_stepper+0xb4>)
 80015cc:	8b91      	ldrh	r1, [r2, #28]
 80015ce:	2200      	movs	r2, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fa73 	bl	8003abc <HAL_GPIO_WritePin>
	stepper_motor.htim_pwm->Instance->CCR1=stepper_motor.htim_pwm->Instance->ARR/2;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <init_stepper+0xb4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015de:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <init_stepper+0xb4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0852      	lsrs	r2, r2, #1
 80015e6:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(stepper_motor.htim_pwm,stepper_motor.pwm_channel_number);
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <init_stepper+0xb4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <init_stepper+0xb4>)
 80015ee:	6852      	ldr	r2, [r2, #4]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f004 fc20 	bl	8005e38 <HAL_TIM_PWM_Start>
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200005c4 	.word	0x200005c4

08001604 <launch_stepper>:


    // Fonction pour lancer le moteur avec une vitesse et une direction spécifiques
 void launch_stepper(int speed){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	 int abs_speed_value = abs(speed);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfb8      	it	lt
 8001612:	425b      	neglt	r3, r3
 8001614:	61fb      	str	r3, [r7, #28]
	 abs_speed_value = (abs_speed_value>8)?8:abs_speed_value;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	2b08      	cmp	r3, #8
 800161a:	bfa8      	it	ge
 800161c:	2308      	movge	r3, #8
 800161e:	61fb      	str	r3, [r7, #28]
	 stepper_motor.speed=speed;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <launch_stepper+0xa0>)
 8001626:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	 const uint16_t period_counter_value[8]={1599,1399,1199,999,799,599,399,299};
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <launch_stepper+0xa4>)
 800162c:	f107 040c 	add.w	r4, r7, #12
 8001630:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001632:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 if (abs_speed_value==0){
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <launch_stepper+0x44>
		 stepper_motor.htim_pwm->Instance->CCR1=0;
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <launch_stepper+0xa0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
		 HAL_GPIO_WritePin(stepper_motor.gpio_enable, stepper_motor.gpio_enable_pin,0);
		 HAL_GPIO_WritePin(stepper_motor.gpio_direction, stepper_motor.gpio_direction_pin,(speed>0)?1:0);
		 stepper_motor.htim_pwm->Instance->ARR=period_counter_value[abs_speed_value-1];
		 stepper_motor.htim_pwm->Instance->CCR1=stepper_motor.htim_pwm->Instance->ARR/2;
	 }
 }
 8001646:	e028      	b.n	800169a <launch_stepper+0x96>
		 HAL_GPIO_WritePin(stepper_motor.gpio_enable, stepper_motor.gpio_enable_pin,0);
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <launch_stepper+0xa0>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <launch_stepper+0xa0>)
 800164e:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8001650:	2200      	movs	r2, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fa32 	bl	8003abc <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper_motor.gpio_direction, stepper_motor.gpio_direction_pin,(speed>0)?1:0);
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <launch_stepper+0xa0>)
 800165a:	6898      	ldr	r0, [r3, #8]
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <launch_stepper+0xa0>)
 800165e:	8999      	ldrh	r1, [r3, #12]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	bfcc      	ite	gt
 8001666:	2301      	movgt	r3, #1
 8001668:	2300      	movle	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	f002 fa25 	bl	8003abc <HAL_GPIO_WritePin>
		 stepper_motor.htim_pwm->Instance->ARR=period_counter_value[abs_speed_value-1];
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b01      	subs	r3, #1
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	3320      	adds	r3, #32
 800167a:	443b      	add	r3, r7
 800167c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <launch_stepper+0xa0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	62da      	str	r2, [r3, #44]	@ 0x2c
		 stepper_motor.htim_pwm->Instance->CCR1=stepper_motor.htim_pwm->Instance->ARR/2;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <launch_stepper+0xa0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <launch_stepper+0xa0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	0852      	lsrs	r2, r2, #1
 8001698:	635a      	str	r2, [r3, #52]	@ 0x34
 }
 800169a:	bf00      	nop
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	200005c4 	.word	0x200005c4
 80016a8:	080092d0 	.word	0x080092d0

080016ac <get_speed>:
 //partie 8.4
#define BASE_PERIOD 1000
 float get_speed()
 {
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
	 if (stepper_motor.speed==0) return 0;
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <get_speed+0x7c>)
 80016b4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d102      	bne.n	80016c2 <get_speed+0x16>
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e029      	b.n	8001716 <get_speed+0x6a>
	 int32_t period_value = ((stepper_motor.htim_pwm->Instance->ARR+1)*80)/(stepper_motor.htim_pwm->Instance->PSC + 1);
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <get_speed+0x7c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	461a      	mov	r2, r3
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <get_speed+0x7c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016de:	3301      	adds	r3, #1
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	60fb      	str	r3, [r7, #12]
	 int32_t one_turn = period_value * 1600;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	60bb      	str	r3, [r7, #8]
	 float speed = (((stepper_motor.speed>0)?1:-1)*(60 * 1000000))/one_turn;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <get_speed+0x7c>)
 80016f4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <get_speed+0x54>
 80016fc:	4a0b      	ldr	r2, [pc, #44]	@ (800172c <get_speed+0x80>)
 80016fe:	e000      	b.n	8001702 <get_speed+0x56>
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <get_speed+0x84>)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	fb92 f3f3 	sdiv	r3, r2, r3
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001710:	edc7 7a01 	vstr	s15, [r7, #4]
	 return speed;
 8001714:	687b      	ldr	r3, [r7, #4]
 }
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eeb0 0a67 	vmov.f32	s0, s15
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	200005c4 	.word	0x200005c4
 800172c:	03938700 	.word	0x03938700
 8001730:	fc6c7900 	.word	0xfc6c7900

08001734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_MspInit+0x44>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <HAL_MspInit+0x44>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6613      	str	r3, [r2, #96]	@ 0x60
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_MspInit+0x44>)
 8001748:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_MspInit+0x44>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001756:	4a08      	ldr	r2, [pc, #32]	@ (8001778 <HAL_MspInit+0x44>)
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800175c:	6593      	str	r3, [r2, #88]	@ 0x58
 800175e:	4b06      	ldr	r3, [pc, #24]	@ (8001778 <HAL_MspInit+0x44>)
 8001760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	40021000 	.word	0x40021000

0800177c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	@ 0x38
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <HAL_InitTick+0xe0>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	4a33      	ldr	r2, [pc, #204]	@ (800185c <HAL_InitTick+0xe0>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	6593      	str	r3, [r2, #88]	@ 0x58
 8001796:	4b31      	ldr	r3, [pc, #196]	@ (800185c <HAL_InitTick+0xe0>)
 8001798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a2:	f107 0210 	add.w	r2, r7, #16
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 fc29 	bl	8005004 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d103      	bne.n	80017c4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017bc:	f003 fbf6 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80017c0:	6378      	str	r0, [r7, #52]	@ 0x34
 80017c2:	e004      	b.n	80017ce <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017c4:	f003 fbf2 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80017c8:	4603      	mov	r3, r0
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d0:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <HAL_InitTick+0xe4>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0c9b      	lsrs	r3, r3, #18
 80017d8:	3b01      	subs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017dc:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_InitTick+0xe8>)
 80017de:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_InitTick+0xec>)
 80017e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <HAL_InitTick+0xe8>)
 80017e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001864 <HAL_InitTick+0xe8>)
 80017ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <HAL_InitTick+0xe8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_InitTick+0xe8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_InitTick+0xe8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001802:	4818      	ldr	r0, [pc, #96]	@ (8001864 <HAL_InitTick+0xe8>)
 8001804:	f004 f9ef 	bl	8005be6 <HAL_TIM_Base_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800180e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001812:	2b00      	cmp	r3, #0
 8001814:	d11b      	bne.n	800184e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001816:	4813      	ldr	r0, [pc, #76]	@ (8001864 <HAL_InitTick+0xe8>)
 8001818:	f004 fa3c 	bl	8005c94 <HAL_TIM_Base_Start_IT>
 800181c:	4603      	mov	r3, r0
 800181e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001822:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001826:	2b00      	cmp	r3, #0
 8001828:	d111      	bne.n	800184e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182a:	2036      	movs	r0, #54	@ 0x36
 800182c:	f001 ff8e 	bl	800374c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b0f      	cmp	r3, #15
 8001834:	d808      	bhi.n	8001848 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001836:	2200      	movs	r2, #0
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	2036      	movs	r0, #54	@ 0x36
 800183c:	f001 ff6a 	bl	8003714 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001840:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_InitTick+0xf0>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e002      	b.n	800184e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800184e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001852:	4618      	mov	r0, r3
 8001854:	3738      	adds	r7, #56	@ 0x38
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	431bde83 	.word	0x431bde83
 8001864:	200005f4 	.word	0x200005f4
 8001868:	40001000 	.word	0x40001000
 800186c:	2000000c 	.word	0x2000000c

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <NMI_Handler+0x4>

08001878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <MemManage_Handler+0x4>

08001888 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <UsageFault_Handler+0x4>

08001898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <ADC1_2_IRQHandler+0x10>)
 80018d6:	f000 ff33 	bl	8002740 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000008c 	.word	0x2000008c

080018e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <TIM4_IRQHandler+0x10>)
 80018ea:	f004 fcdf 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200006dc 	.word	0x200006dc

080018f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_BOTTOM_Pin);
 80018fc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001900:	f002 f8f4 	bl	8003aec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001904:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001908:	f002 f8f0 	bl	8003aec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 800190c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001910:	f002 f8ec 	bl	8003aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <TIM6_DAC_IRQHandler+0x10>)
 800191e:	f004 fcc5 	bl	80062ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200005f4 	.word	0x200005f4

0800192c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193e:	f7ff fa8b 	bl	8000e58 <__io_getchar>
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
  }

  return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	e009      	b.n	800198c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	60ba      	str	r2, [r7, #8]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fa57 	bl	8000e34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf1      	blt.n	8001978 <_write+0x12>
  }
  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_close>:

int _close(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c6:	605a      	str	r2, [r3, #4]
  return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <_isatty>:

int _isatty(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019de:	2301      	movs	r3, #1
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f006 fd28 	bl	800848c <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20018000 	.word	0x20018000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	20000640 	.word	0x20000640
 8001a70:	20000988 	.word	0x20000988

08001a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <SystemInit+0x20>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a7e:	4a05      	ldr	r2, [pc, #20]	@ (8001a94 <SystemInit+0x20>)
 8001a80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	@ 0x30
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	2224      	movs	r2, #36	@ 0x24
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f006 fca2 	bl	80083f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aac:	463b      	mov	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001ab8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001abc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001abe:	4b1f      	ldr	r3, [pc, #124]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001aca:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001af2:	2300      	movs	r3, #0
 8001af4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001af6:	2301      	movs	r3, #1
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4619      	mov	r1, r3
 8001b08:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001b0a:	f004 fa9b 	bl	8006044 <HAL_TIM_Encoder_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b14:	f7ff fa98 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <MX_TIM2_Init+0xa4>)
 8001b26:	f005 fb0b 	bl	8007140 <HAL_TIMEx_MasterConfigSynchronization>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b30:	f7ff fa8a 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3730      	adds	r7, #48	@ 0x30
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000644 	.word	0x20000644

08001b40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08e      	sub	sp, #56	@ 0x38
 8001b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b60:	463b      	mov	r3, r7
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
 8001b6c:	611a      	str	r2, [r3, #16]
 8001b6e:	615a      	str	r2, [r3, #20]
 8001b70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001b74:	4a2d      	ldr	r2, [pc, #180]	@ (8001c2c <MX_TIM3_Init+0xec>)
 8001b76:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001b7a:	224f      	movs	r2, #79	@ 0x4f
 8001b7c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001b86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b92:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b98:	4823      	ldr	r0, [pc, #140]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001b9a:	f004 f824 	bl	8005be6 <HAL_TIM_Base_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ba4:	f7ff fa50 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	481c      	ldr	r0, [pc, #112]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001bb6:	f004 fd95 	bl	80066e4 <HAL_TIM_ConfigClockSource>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001bc0:	f7ff fa42 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bc4:	4818      	ldr	r0, [pc, #96]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001bc6:	f004 f8d5 	bl	8005d74 <HAL_TIM_PWM_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001bd0:	f7ff fa3a 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4811      	ldr	r0, [pc, #68]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001be4:	f005 faac 	bl	8007140 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001bee:	f7ff fa2b 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf2:	2360      	movs	r3, #96	@ 0x60
 8001bf4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2200      	movs	r2, #0
 8001c06:	4619      	mov	r1, r3
 8001c08:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001c0a:	f004 fc57 	bl	80064bc <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c14:	f7ff fa18 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c18:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <MX_TIM3_Init+0xe8>)
 8001c1a:	f000 f8d1 	bl	8001dc0 <HAL_TIM_MspPostInit>

}
 8001c1e:	bf00      	nop
 8001c20:	3738      	adds	r7, #56	@ 0x38
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000690 	.word	0x20000690
 8001c2c:	40000400 	.word	0x40000400

08001c30 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c50:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc8 <MX_TIM4_Init+0x98>)
 8001c52:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c56:	224f      	movs	r2, #79	@ 0x4f
 8001c58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001c60:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c62:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c68:	4b16      	ldr	r3, [pc, #88]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c74:	4813      	ldr	r0, [pc, #76]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c76:	f003 ffb6 	bl	8005be6 <HAL_TIM_Base_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001c80:	f7ff f9e2 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001c92:	f004 fd27 	bl	80066e4 <HAL_TIM_ConfigClockSource>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001c9c:	f7ff f9d4 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_TIM4_Init+0x94>)
 8001cae:	f005 fa47 	bl	8007140 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001cb8:	f7ff f9c6 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200006dc 	.word	0x200006dc
 8001cc8:	40000800 	.word	0x40000800

08001ccc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cec:	d128      	bne.n	8001d40 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cee:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	4a15      	ldr	r2, [pc, #84]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cfa:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d3c:	f001 fd14 	bl	8003768 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	@ 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000

08001d4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a16      	ldr	r2, [pc, #88]	@ (8001db4 <HAL_TIM_Base_MspInit+0x68>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10c      	bne.n	8001d78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d6a:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d76:	e018      	b.n	8001daa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0f      	ldr	r2, [pc, #60]	@ (8001dbc <HAL_TIM_Base_MspInit+0x70>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d113      	bne.n	8001daa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d86:	4a0c      	ldr	r2, [pc, #48]	@ (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_TIM_Base_MspInit+0x6c>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	201e      	movs	r0, #30
 8001da0:	f001 fcb8 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001da4:	201e      	movs	r0, #30
 8001da6:	f001 fcd1 	bl	800374c <HAL_NVIC_EnableIRQ>
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40000400 	.word	0x40000400
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40000800 	.word	0x40000800

08001dc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 030c 	add.w	r3, r7, #12
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a11      	ldr	r2, [pc, #68]	@ (8001e24 <HAL_TIM_MspPostInit+0x64>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d11c      	bne.n	8001e1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	4b11      	ldr	r3, [pc, #68]	@ (8001e28 <HAL_TIM_MspPostInit+0x68>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	4a10      	ldr	r2, [pc, #64]	@ (8001e28 <HAL_TIM_MspPostInit+0x68>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dee:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_TIM_MspPostInit+0x68>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dfa:	2340      	movs	r3, #64	@ 0x40
 8001dfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4619      	mov	r1, r3
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e18:	f001 fca6 	bl	8003768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e1c:	bf00      	nop
 8001e1e:	3720      	adds	r7, #32
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40021000 	.word	0x40021000

08001e2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e32:	4a15      	ldr	r2, [pc, #84]	@ (8001e88 <MX_USART1_UART_Init+0x5c>)
 8001e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_USART1_UART_Init+0x58>)
 8001e70:	f005 fa0c 	bl	800728c <HAL_UART_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001e7a:	f7ff f8e5 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000728 	.word	0x20000728
 8001e88:	40013800 	.word	0x40013800

08001e8c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001e92:	4a15      	ldr	r2, [pc, #84]	@ (8001ee8 <MX_USART2_UART_Init+0x5c>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e96:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_USART2_UART_Init+0x58>)
 8001ed0:	f005 f9dc 	bl	800728c <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001eda:	f7ff f8b5 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200007b0 	.word	0x200007b0
 8001ee8:	40004400 	.word	0x40004400

08001eec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b0ae      	sub	sp, #184	@ 0xb8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f04:	f107 031c 	add.w	r3, r7, #28
 8001f08:	2288      	movs	r2, #136	@ 0x88
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f006 fa6f 	bl	80083f0 <memset>
  if(uartHandle->Instance==USART1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a43      	ldr	r2, [pc, #268]	@ (8002024 <HAL_UART_MspInit+0x138>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d13d      	bne.n	8001f98 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f20:	2300      	movs	r3, #0
 8001f22:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 f8fd 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f34:	f7ff f888 	bl	8001048 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f42:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f44:	4b38      	ldr	r3, [pc, #224]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f4c:	61bb      	str	r3, [r7, #24]
 8001f4e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f50:	4b35      	ldr	r3, [pc, #212]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001f52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f54:	4a34      	ldr	r2, [pc, #208]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f5c:	4b32      	ldr	r3, [pc, #200]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f68:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f70:	2302      	movs	r3, #2
 8001f72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f82:	2307      	movs	r3, #7
 8001f84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f92:	f001 fbe9 	bl	8003768 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f96:	e040      	b.n	800201a <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a23      	ldr	r2, [pc, #140]	@ (800202c <HAL_UART_MspInit+0x140>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d13b      	bne.n	800201a <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 f8ba 	bl	8005128 <HAL_RCCEx_PeriphCLKConfig>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001fba:	f7ff f845 	bl	8001048 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	4a19      	ldr	r2, [pc, #100]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fca:	4b17      	ldr	r3, [pc, #92]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd6:	4b14      	ldr	r3, [pc, #80]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fda:	4a13      	ldr	r2, [pc, #76]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe2:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_UART_MspInit+0x13c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002006:	2307      	movs	r3, #7
 8002008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002016:	f001 fba7 	bl	8003768 <HAL_GPIO_Init>
}
 800201a:	bf00      	nop
 800201c:	37b8      	adds	r7, #184	@ 0xb8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40013800 	.word	0x40013800
 8002028:	40021000 	.word	0x40021000
 800202c:	40004400 	.word	0x40004400

08002030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002030:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002068 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002034:	f7ff fd1e 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <LoopForever+0x6>)
  ldr r1, =_edata
 800203a:	490d      	ldr	r1, [pc, #52]	@ (8002070 <LoopForever+0xa>)
  ldr r2, =_sidata
 800203c:	4a0d      	ldr	r2, [pc, #52]	@ (8002074 <LoopForever+0xe>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0a      	ldr	r2, [pc, #40]	@ (8002078 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002050:	4c0a      	ldr	r4, [pc, #40]	@ (800207c <LoopForever+0x16>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800205e:	f006 fa1b 	bl	8008498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002062:	f7fe ff17 	bl	8000e94 <main>

08002066 <LoopForever>:

LoopForever:
    b LoopForever
 8002066:	e7fe      	b.n	8002066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002068:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002070:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002074:	0800a0c8 	.word	0x0800a0c8
  ldr r2, =_sbss
 8002078:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800207c:	20000988 	.word	0x20000988

08002080 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002080:	e7fe      	b.n	8002080 <ADC3_IRQHandler>
	...

08002084 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800208e:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_Init+0x3c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a0b      	ldr	r2, [pc, #44]	@ (80020c0 <HAL_Init+0x3c>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002098:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209a:	2003      	movs	r0, #3
 800209c:	f001 fb2f 	bl	80036fe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020a0:	200f      	movs	r0, #15
 80020a2:	f7ff fb6b 	bl	800177c <HAL_InitTick>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	71fb      	strb	r3, [r7, #7]
 80020b0:	e001      	b.n	80020b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020b2:	f7ff fb3f 	bl	8001734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020b6:	79fb      	ldrb	r3, [r7, #7]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000010 	.word	0x20000010
 80020e8:	20000838 	.word	0x20000838

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000838 	.word	0x20000838

08002104 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
 8002178:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	3360      	adds	r3, #96	@ 0x60
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <LL_ADC_SetOffset+0x44>)
 800218e:	4013      	ands	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	4313      	orrs	r3, r2
 800219c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021a4:	bf00      	nop
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	03fff000 	.word	0x03fff000

080021b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3360      	adds	r3, #96	@ 0x60
 80021c2:	461a      	mov	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	3360      	adds	r3, #96	@ 0x60
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	431a      	orrs	r2, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3330      	adds	r3, #48	@ 0x30
 800224c:	461a      	mov	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	f003 030c 	and.w	r3, r3, #12
 8002258:	4413      	add	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	211f      	movs	r1, #31
 8002268:	fa01 f303 	lsl.w	r3, r1, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0e9b      	lsrs	r3, r3, #26
 8002274:	f003 011f 	and.w	r1, r3, #31
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022a0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b087      	sub	sp, #28
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	3314      	adds	r3, #20
 80022ca:	461a      	mov	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	0e5b      	lsrs	r3, r3, #25
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	0d1b      	lsrs	r3, r3, #20
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2107      	movs	r1, #7
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0d1b      	lsrs	r3, r3, #20
 80022f4:	f003 031f 	and.w	r3, r3, #31
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	431a      	orrs	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f003 0318 	and.w	r3, r3, #24
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002334:	40d9      	lsrs	r1, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	400b      	ands	r3, r1
 800233a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800233e:	431a      	orrs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	0007ffff 	.word	0x0007ffff

08002358 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 031f 	and.w	r3, r3, #31
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80023a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6093      	str	r3, [r2, #8]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023c8:	d101      	bne.n	80023ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80023ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002418:	d101      	bne.n	800241e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <LL_ADC_IsEnabled+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_ADC_IsEnabled+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b04      	cmp	r3, #4
 8002464:	d101      	bne.n	800246a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b08      	cmp	r3, #8
 800248a:	d101      	bne.n	8002490 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800248c:	2301      	movs	r3, #1
 800248e:	e000      	b.n	8002492 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b089      	sub	sp, #36	@ 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e130      	b.n	800271c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f7fe fa7d 	bl	80009c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff ff67 	bl	80023b4 <LL_ADC_IsDeepPowerDownEnabled>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff4d 	bl	8002390 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff ff82 	bl	8002404 <LL_ADC_IsInternalRegulatorEnabled>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d115      	bne.n	8002532 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff66 	bl	80023dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002510:	4b84      	ldr	r3, [pc, #528]	@ (8002724 <HAL_ADC_Init+0x284>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	4a84      	ldr	r2, [pc, #528]	@ (8002728 <HAL_ADC_Init+0x288>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	099b      	lsrs	r3, r3, #6
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002524:	e002      	b.n	800252c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	3b01      	subs	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f9      	bne.n	8002526 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff64 	bl	8002404 <LL_ADC_IsInternalRegulatorEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	f043 0210 	orr.w	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002552:	f043 0201 	orr.w	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff75 	bl	8002452 <LL_ADC_REG_IsConversionOngoing>
 8002568:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b00      	cmp	r3, #0
 8002574:	f040 80c9 	bne.w	800270a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 80c5 	bne.w	800270a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002584:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002588:	f043 0202 	orr.w	r2, r3, #2
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff49 	bl	800242c <LL_ADC_IsEnabled>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d115      	bne.n	80025cc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025a0:	4862      	ldr	r0, [pc, #392]	@ (800272c <HAL_ADC_Init+0x28c>)
 80025a2:	f7ff ff43 	bl	800242c <LL_ADC_IsEnabled>
 80025a6:	4604      	mov	r4, r0
 80025a8:	4861      	ldr	r0, [pc, #388]	@ (8002730 <HAL_ADC_Init+0x290>)
 80025aa:	f7ff ff3f 	bl	800242c <LL_ADC_IsEnabled>
 80025ae:	4603      	mov	r3, r0
 80025b0:	431c      	orrs	r4, r3
 80025b2:	4860      	ldr	r0, [pc, #384]	@ (8002734 <HAL_ADC_Init+0x294>)
 80025b4:	f7ff ff3a 	bl	800242c <LL_ADC_IsEnabled>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4323      	orrs	r3, r4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4619      	mov	r1, r3
 80025c6:	485c      	ldr	r0, [pc, #368]	@ (8002738 <HAL_ADC_Init+0x298>)
 80025c8:	f7ff fd9c 	bl	8002104 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7e5b      	ldrb	r3, [r3, #25]
 80025d0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025dc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025e2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ea:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d106      	bne.n	8002608 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	3b01      	subs	r3, #1
 8002600:	045b      	lsls	r3, r3, #17
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	4b44      	ldr	r3, [pc, #272]	@ (800273c <HAL_ADC_Init+0x29c>)
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	430b      	orrs	r3, r1
 8002636:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff ff1b 	bl	8002478 <LL_ADC_INJ_IsConversionOngoing>
 8002642:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d13d      	bne.n	80026c6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d13a      	bne.n	80026c6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002654:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800265c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800265e:	4313      	orrs	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800266c:	f023 0302 	bic.w	r3, r3, #2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	69b9      	ldr	r1, [r7, #24]
 8002676:	430b      	orrs	r3, r1
 8002678:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002680:	2b01      	cmp	r3, #1
 8002682:	d118      	bne.n	80026b6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800269a:	4311      	orrs	r1, r2
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80026a0:	4311      	orrs	r1, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80026a6:	430a      	orrs	r2, r1
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	611a      	str	r2, [r3, #16]
 80026b4:	e007      	b.n	80026c6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d10c      	bne.n	80026e8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	f023 010f 	bic.w	r1, r3, #15
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80026e6:	e007      	b.n	80026f8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 020f 	bic.w	r2, r2, #15
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fc:	f023 0303 	bic.w	r3, r3, #3
 8002700:	f043 0201 	orr.w	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	@ 0x54
 8002708:	e007      	b.n	800271a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	f043 0210 	orr.w	r2, r3, #16
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800271a:	7ffb      	ldrb	r3, [r7, #31]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3724      	adds	r7, #36	@ 0x24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}
 8002724:	20000008 	.word	0x20000008
 8002728:	053e2d63 	.word	0x053e2d63
 800272c:	50040000 	.word	0x50040000
 8002730:	50040100 	.word	0x50040100
 8002734:	50040200 	.word	0x50040200
 8002738:	50040300 	.word	0x50040300
 800273c:	fff0c007 	.word	0xfff0c007

08002740 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	@ 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800275c:	4882      	ldr	r0, [pc, #520]	@ (8002968 <HAL_ADC_IRQHandler+0x228>)
 800275e:	f7ff fdfb 	bl	8002358 <LL_ADC_GetMultimode>
 8002762:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d017      	beq.n	800279e <HAL_ADC_IRQHandler+0x5e>
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d012      	beq.n	800279e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	d105      	bne.n	8002790 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fe4d 	bl	8003430 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2202      	movs	r2, #2
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d004      	beq.n	80027b2 <HAL_ADC_IRQHandler+0x72>
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f003 0304 	and.w	r3, r3, #4
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8083 	beq.w	80028c4 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d07d      	beq.n	80028c4 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fd16 	bl	8002216 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d062      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5d      	ldr	r2, [pc, #372]	@ (800296c <HAL_ADC_IRQHandler+0x22c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d002      	beq.n	8002800 <HAL_ADC_IRQHandler+0xc0>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	e000      	b.n	8002802 <HAL_ADC_IRQHandler+0xc2>
 8002800:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <HAL_ADC_IRQHandler+0x230>)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4293      	cmp	r3, r2
 8002808:	d008      	beq.n	800281c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d002      	beq.n	800281c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b09      	cmp	r3, #9
 800281a:	d104      	bne.n	8002826 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	623b      	str	r3, [r7, #32]
 8002824:	e00c      	b.n	8002840 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a50      	ldr	r2, [pc, #320]	@ (800296c <HAL_ADC_IRQHandler+0x22c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d002      	beq.n	8002836 <HAL_ADC_IRQHandler+0xf6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	e000      	b.n	8002838 <HAL_ADC_IRQHandler+0xf8>
 8002836:	4b4e      	ldr	r3, [pc, #312]	@ (8002970 <HAL_ADC_IRQHandler+0x230>)
 8002838:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d135      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b08      	cmp	r3, #8
 8002856:	d12e      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fdf8 	bl	8002452 <LL_ADC_REG_IsConversionOngoing>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d11a      	bne.n	800289e <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 020c 	bic.w	r2, r2, #12
 8002876:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d112      	bne.n	80028b6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
 800289c:	e00b      	b.n	80028b6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a2:	f043 0210 	orr.w	r2, r3, #16
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ae:	f043 0201 	orr.w	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f95c 	bl	8002b74 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	220c      	movs	r2, #12
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <HAL_ADC_IRQHandler+0x198>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10b      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 809f 	beq.w	8002a22 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8099 	beq.w	8002a22 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002900:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fcc1 	bl	8002294 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002912:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fc7c 	bl	8002216 <LL_ADC_REG_IsTriggerSourceSWStart>
 800291e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a11      	ldr	r2, [pc, #68]	@ (800296c <HAL_ADC_IRQHandler+0x22c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d002      	beq.n	8002930 <HAL_ADC_IRQHandler+0x1f0>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	e000      	b.n	8002932 <HAL_ADC_IRQHandler+0x1f2>
 8002930:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <HAL_ADC_IRQHandler+0x230>)
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	4293      	cmp	r3, r2
 8002938:	d008      	beq.n	800294c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b06      	cmp	r3, #6
 8002944:	d002      	beq.n	800294c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b07      	cmp	r3, #7
 800294a:	d104      	bne.n	8002956 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	623b      	str	r3, [r7, #32]
 8002954:	e013      	b.n	800297e <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a04      	ldr	r2, [pc, #16]	@ (800296c <HAL_ADC_IRQHandler+0x22c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_ADC_IRQHandler+0x234>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	e007      	b.n	8002976 <HAL_ADC_IRQHandler+0x236>
 8002966:	bf00      	nop
 8002968:	50040300 	.word	0x50040300
 800296c:	50040100 	.word	0x50040100
 8002970:	50040000 	.word	0x50040000
 8002974:	4b7d      	ldr	r3, [pc, #500]	@ (8002b6c <HAL_ADC_IRQHandler+0x42c>)
 8002976:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d047      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <HAL_ADC_IRQHandler+0x25e>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d03f      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d13a      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a8:	2b40      	cmp	r3, #64	@ 0x40
 80029aa:	d133      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d12e      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fd5c 	bl	8002478 <LL_ADC_INJ_IsConversionOngoing>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11a      	bne.n	80029fc <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d112      	bne.n	8002a14 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f2:	f043 0201 	orr.w	r2, r3, #1
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80029fa:	e00b      	b.n	8002a14 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fce3 	bl	80033e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2260      	movs	r2, #96	@ 0x60
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d011      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x310>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f8a0 	bl	8002b88 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2280      	movs	r2, #128	@ 0x80
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x340>
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00d      	beq.n	8002a80 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fcc9 	bl	8003408 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d012      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x370>
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00d      	beq.n	8002ab0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fcbb 	bl	800341c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d036      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x3e8>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d031      	beq.n	8002b28 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002acc:	2301      	movs	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	e014      	b.n	8002afc <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ad8:	4825      	ldr	r0, [pc, #148]	@ (8002b70 <HAL_ADC_IRQHandler+0x430>)
 8002ada:	f7ff fc4b 	bl	8002374 <LL_ADC_GetMultiDMATransfer>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ae8:	e008      	b.n	8002afc <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002af8:	2301      	movs	r3, #1
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10e      	bne.n	8002b20 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b06:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	f043 0202 	orr.w	r2, r3, #2
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f83e 	bl	8002b9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2210      	movs	r2, #16
 8002b26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x424>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d013      	beq.n	8002b64 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b40:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4c:	f043 0208 	orr.w	r2, r3, #8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b5c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fc48 	bl	80033f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b64:	bf00      	nop
 8002b66:	3728      	adds	r7, #40	@ 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	50040000 	.word	0x50040000
 8002b70:	50040300 	.word	0x50040300

08002b74 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b0b6      	sub	sp, #216	@ 0xd8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x22>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e3c9      	b.n	8003366 <HAL_ADC_ConfigChannel+0x7b6>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fc37 	bl	8002452 <LL_ADC_REG_IsConversionOngoing>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 83aa 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d824      	bhi.n	8002c46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	3b02      	subs	r3, #2
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d81b      	bhi.n	8002c3e <HAL_ADC_ConfigChannel+0x8e>
 8002c06:	a201      	add	r2, pc, #4	@ (adr r2, 8002c0c <HAL_ADC_ConfigChannel+0x5c>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c25 	.word	0x08002c25
 8002c14:	08002c2d 	.word	0x08002c2d
 8002c18:	08002c35 	.word	0x08002c35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c1c:	230c      	movs	r3, #12
 8002c1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c22:	e010      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c24:	2312      	movs	r3, #18
 8002c26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c2a:	e00c      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c2c:	2318      	movs	r3, #24
 8002c2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c32:	e008      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c3c:	e003      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c3e:	2306      	movs	r3, #6
 8002c40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c54:	f7ff faf2 	bl	800223c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fbf8 	bl	8002452 <LL_ADC_REG_IsConversionOngoing>
 8002c62:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fc04 	bl	8002478 <LL_ADC_INJ_IsConversionOngoing>
 8002c70:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 81a4 	bne.w	8002fc6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f040 819f 	bne.w	8002fc6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6818      	ldr	r0, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	461a      	mov	r2, r3
 8002c96:	f7ff fb10 	bl	80022ba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	08db      	lsrs	r3, r3, #3
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d00a      	beq.n	8002cd2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6919      	ldr	r1, [r3, #16]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ccc:	f7ff fa4e 	bl	800216c <LL_ADC_SetOffset>
 8002cd0:	e179      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff fa6b 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x14e>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fa60 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	0e9b      	lsrs	r3, r3, #26
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	e01e      	b.n	8002d3c <HAL_ADC_ConfigChannel+0x18c>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fa55 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e004      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1a4>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	0e9b      	lsrs	r3, r3, #26
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	e018      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x1d6>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002d78:	2320      	movs	r3, #32
 8002d7a:	e004      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d106      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fa24 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fa08 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10a      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x214>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff f9fd 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	0e9b      	lsrs	r3, r3, #26
 8002dbe:	f003 021f 	and.w	r2, r3, #31
 8002dc2:	e01e      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x252>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff f9f2 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002de6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e004      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x26a>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	0e9b      	lsrs	r3, r3, #26
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	e018      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x29c>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e32:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e004      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d106      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2101      	movs	r1, #1
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f9c1 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2102      	movs	r1, #2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff f9a5 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x2da>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7ff f99a 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002e80:	4603      	mov	r3, r0
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	e01e      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x318>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2102      	movs	r1, #2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff f98f 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e004      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x330>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	e014      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x35a>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002eee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ef4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e004      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002f00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d106      	bne.n	8002f1c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2102      	movs	r1, #2
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f962 	bl	80021e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2103      	movs	r1, #3
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff f946 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x398>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2103      	movs	r1, #3
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f93b 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 021f 	and.w	r2, r3, #31
 8002f46:	e017      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x3c8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2103      	movs	r1, #3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f930 	bl	80021b4 <LL_ADC_GetOffsetChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f62:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e003      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d105      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x3e0>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	e011      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x404>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f98:	fa93 f3a3 	rbit	r3, r3
 8002f9c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002fa2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002fa8:	2320      	movs	r3, #32
 8002faa:	e003      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d106      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2103      	movs	r1, #3
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff f90d 	bl	80021e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff fa2e 	bl	800242c <LL_ADC_IsEnabled>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	f040 8140 	bne.w	8003258 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	f7ff f993 	bl	8002310 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	4a8f      	ldr	r2, [pc, #572]	@ (800322c <HAL_ADC_ConfigChannel+0x67c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	f040 8131 	bne.w	8003258 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <HAL_ADC_ConfigChannel+0x46e>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	3301      	adds	r3, #1
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2b09      	cmp	r3, #9
 8003014:	bf94      	ite	ls
 8003016:	2301      	movls	r3, #1
 8003018:	2300      	movhi	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	e019      	b.n	8003052 <HAL_ADC_ConfigChannel+0x4a2>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800302c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e003      	b.n	8003042 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800303a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2b09      	cmp	r3, #9
 800304a:	bf94      	ite	ls
 800304c:	2301      	movls	r3, #1
 800304e:	2300      	movhi	r3, #0
 8003050:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003052:	2b00      	cmp	r3, #0
 8003054:	d079      	beq.n	800314a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <HAL_ADC_ConfigChannel+0x4c2>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	3301      	adds	r3, #1
 800306a:	069b      	lsls	r3, r3, #26
 800306c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003070:	e015      	b.n	800309e <HAL_ADC_ConfigChannel+0x4ee>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003082:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003084:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e003      	b.n	8003096 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800308e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	3301      	adds	r3, #1
 8003098:	069b      	lsls	r3, r3, #26
 800309a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_ADC_ConfigChannel+0x50e>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	0e9b      	lsrs	r3, r3, #26
 80030b0:	3301      	adds	r3, #1
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	e017      	b.n	80030ee <HAL_ADC_ConfigChannel+0x53e>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80030d6:	2320      	movs	r3, #32
 80030d8:	e003      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80030da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	ea42 0103 	orr.w	r1, r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x564>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	0e9b      	lsrs	r3, r3, #26
 8003104:	3301      	adds	r3, #1
 8003106:	f003 021f 	and.w	r2, r3, #31
 800310a:	4613      	mov	r3, r2
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	4413      	add	r3, r2
 8003110:	051b      	lsls	r3, r3, #20
 8003112:	e018      	b.n	8003146 <HAL_ADC_ConfigChannel+0x596>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003124:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e003      	b.n	8003138 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	3301      	adds	r3, #1
 800313a:	f003 021f 	and.w	r2, r3, #31
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003146:	430b      	orrs	r3, r1
 8003148:	e081      	b.n	800324e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x5b6>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	3301      	adds	r3, #1
 800315e:	069b      	lsls	r3, r3, #26
 8003160:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003164:	e015      	b.n	8003192 <HAL_ADC_ConfigChannel+0x5e2>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	fa93 f3a3 	rbit	r3, r3
 8003172:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800317e:	2320      	movs	r3, #32
 8003180:	e003      	b.n	800318a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	3301      	adds	r3, #1
 800318c:	069b      	lsls	r3, r3, #26
 800318e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_ADC_ConfigChannel+0x602>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0e9b      	lsrs	r3, r3, #26
 80031a4:	3301      	adds	r3, #1
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f303 	lsl.w	r3, r1, r3
 80031b0:	e017      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x632>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	61bb      	str	r3, [r7, #24]
  return result;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e003      	b.n	80031d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	fab3 f383 	clz	r3, r3
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	ea42 0103 	orr.w	r1, r2, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <HAL_ADC_ConfigChannel+0x65e>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	0e9b      	lsrs	r3, r3, #26
 80031f8:	3301      	adds	r3, #1
 80031fa:	f003 021f 	and.w	r2, r3, #31
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	3b1e      	subs	r3, #30
 8003206:	051b      	lsls	r3, r3, #20
 8003208:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800320c:	e01e      	b.n	800324c <HAL_ADC_ConfigChannel+0x69c>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	60fb      	str	r3, [r7, #12]
  return result;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e006      	b.n	8003238 <HAL_ADC_ConfigChannel+0x688>
 800322a:	bf00      	nop
 800322c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	f003 021f 	and.w	r2, r3, #31
 800323e:	4613      	mov	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	4413      	add	r3, r2
 8003244:	3b1e      	subs	r3, #30
 8003246:	051b      	lsls	r3, r3, #20
 8003248:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003252:	4619      	mov	r1, r3
 8003254:	f7ff f831 	bl	80022ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b44      	ldr	r3, [pc, #272]	@ (8003370 <HAL_ADC_ConfigChannel+0x7c0>)
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d07a      	beq.n	800335a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003264:	4843      	ldr	r0, [pc, #268]	@ (8003374 <HAL_ADC_ConfigChannel+0x7c4>)
 8003266:	f7fe ff73 	bl	8002150 <LL_ADC_GetCommonPathInternalCh>
 800326a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a41      	ldr	r2, [pc, #260]	@ (8003378 <HAL_ADC_ConfigChannel+0x7c8>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d12c      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800327c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d126      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3c      	ldr	r2, [pc, #240]	@ (800337c <HAL_ADC_ConfigChannel+0x7cc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_ADC_ConfigChannel+0x6e8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3b      	ldr	r2, [pc, #236]	@ (8003380 <HAL_ADC_ConfigChannel+0x7d0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d15d      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800329c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032a0:	4619      	mov	r1, r3
 80032a2:	4834      	ldr	r0, [pc, #208]	@ (8003374 <HAL_ADC_ConfigChannel+0x7c4>)
 80032a4:	f7fe ff41 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a8:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <HAL_ADC_ConfigChannel+0x7d4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	4a36      	ldr	r2, [pc, #216]	@ (8003388 <HAL_ADC_ConfigChannel+0x7d8>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032c2:	e002      	b.n	80032ca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f9      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d0:	e040      	b.n	8003354 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2d      	ldr	r2, [pc, #180]	@ (800338c <HAL_ADC_ConfigChannel+0x7dc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d118      	bne.n	800330e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d112      	bne.n	800330e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a23      	ldr	r2, [pc, #140]	@ (800337c <HAL_ADC_ConfigChannel+0x7cc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d004      	beq.n	80032fc <HAL_ADC_ConfigChannel+0x74c>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a22      	ldr	r2, [pc, #136]	@ (8003380 <HAL_ADC_ConfigChannel+0x7d0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d12d      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003300:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003304:	4619      	mov	r1, r3
 8003306:	481b      	ldr	r0, [pc, #108]	@ (8003374 <HAL_ADC_ConfigChannel+0x7c4>)
 8003308:	f7fe ff0f 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800330c:	e024      	b.n	8003358 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_ADC_ConfigChannel+0x7e0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d120      	bne.n	800335a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800331c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d11a      	bne.n	800335a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a14      	ldr	r2, [pc, #80]	@ (800337c <HAL_ADC_ConfigChannel+0x7cc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d115      	bne.n	800335a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800332e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003332:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003336:	4619      	mov	r1, r3
 8003338:	480e      	ldr	r0, [pc, #56]	@ (8003374 <HAL_ADC_ConfigChannel+0x7c4>)
 800333a:	f7fe fef6 	bl	800212a <LL_ADC_SetCommonPathInternalCh>
 800333e:	e00c      	b.n	800335a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003352:	e002      	b.n	800335a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003358:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003362:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003366:	4618      	mov	r0, r3
 8003368:	37d8      	adds	r7, #216	@ 0xd8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	80080000 	.word	0x80080000
 8003374:	50040300 	.word	0x50040300
 8003378:	c7520000 	.word	0xc7520000
 800337c:	50040000 	.word	0x50040000
 8003380:	50040200 	.word	0x50040200
 8003384:	20000008 	.word	0x20000008
 8003388:	053e2d63 	.word	0x053e2d63
 800338c:	cb840000 	.word	0xcb840000
 8003390:	80000001 	.word	0x80000001

08003394 <LL_ADC_IsEnabled>:
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <LL_ADC_IsEnabled+0x18>
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <LL_ADC_IsEnabled+0x1a>
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_ADC_REG_IsConversionOngoing>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d101      	bne.n	80033d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b09f      	sub	sp, #124	@ 0x7c
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800345e:	2302      	movs	r3, #2
 8003460:	e093      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800346a:	2300      	movs	r3, #0
 800346c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800346e:	2300      	movs	r3, #0
 8003470:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a47      	ldr	r2, [pc, #284]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d102      	bne.n	8003482 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800347c:	4b46      	ldr	r3, [pc, #280]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e001      	b.n	8003486 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10b      	bne.n	80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e072      	b.n	800358a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff87 	bl	80033ba <LL_ADC_REG_IsConversionOngoing>
 80034ac:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ff81 	bl	80033ba <LL_ADC_REG_IsConversionOngoing>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d154      	bne.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80034be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d151      	bne.n	8003568 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034c4:	4b35      	ldr	r3, [pc, #212]	@ (800359c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80034c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02c      	beq.n	800352a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6859      	ldr	r1, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034e2:	035b      	lsls	r3, r3, #13
 80034e4:	430b      	orrs	r3, r1
 80034e6:	431a      	orrs	r2, r3
 80034e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80034ec:	4829      	ldr	r0, [pc, #164]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034ee:	f7ff ff51 	bl	8003394 <LL_ADC_IsEnabled>
 80034f2:	4604      	mov	r4, r0
 80034f4:	4828      	ldr	r0, [pc, #160]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034f6:	f7ff ff4d 	bl	8003394 <LL_ADC_IsEnabled>
 80034fa:	4603      	mov	r3, r0
 80034fc:	431c      	orrs	r4, r3
 80034fe:	4828      	ldr	r0, [pc, #160]	@ (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003500:	f7ff ff48 	bl	8003394 <LL_ADC_IsEnabled>
 8003504:	4603      	mov	r3, r0
 8003506:	4323      	orrs	r3, r4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d137      	bne.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800350c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003514:	f023 030f 	bic.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	6811      	ldr	r1, [r2, #0]
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	6892      	ldr	r2, [r2, #8]
 8003520:	430a      	orrs	r2, r1
 8003522:	431a      	orrs	r2, r3
 8003524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003526:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003528:	e028      	b.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800352a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003534:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003536:	4817      	ldr	r0, [pc, #92]	@ (8003594 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003538:	f7ff ff2c 	bl	8003394 <LL_ADC_IsEnabled>
 800353c:	4604      	mov	r4, r0
 800353e:	4816      	ldr	r0, [pc, #88]	@ (8003598 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003540:	f7ff ff28 	bl	8003394 <LL_ADC_IsEnabled>
 8003544:	4603      	mov	r3, r0
 8003546:	431c      	orrs	r4, r3
 8003548:	4815      	ldr	r0, [pc, #84]	@ (80035a0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800354a:	f7ff ff23 	bl	8003394 <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	4323      	orrs	r3, r4
 8003552:	2b00      	cmp	r3, #0
 8003554:	d112      	bne.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800355e:	f023 030f 	bic.w	r3, r3, #15
 8003562:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003564:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003566:	e009      	b.n	800357c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800357a:	e000      	b.n	800357e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800357c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003586:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800358a:	4618      	mov	r0, r3
 800358c:	377c      	adds	r7, #124	@ 0x7c
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}
 8003592:	bf00      	nop
 8003594:	50040000 	.word	0x50040000
 8003598:	50040100 	.word	0x50040100
 800359c:	50040300 	.word	0x50040300
 80035a0:	50040200 	.word	0x50040200

080035a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035c0:	4013      	ands	r3, r2
 80035c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035d6:	4a04      	ldr	r2, [pc, #16]	@ (80035e8 <__NVIC_SetPriorityGrouping+0x44>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	60d3      	str	r3, [r2, #12]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f0:	4b04      	ldr	r3, [pc, #16]	@ (8003604 <__NVIC_GetPriorityGrouping+0x18>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	0a1b      	lsrs	r3, r3, #8
 80035f6:	f003 0307 	and.w	r3, r3, #7
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	db0b      	blt.n	8003632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	4907      	ldr	r1, [pc, #28]	@ (8003640 <__NVIC_EnableIRQ+0x38>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2001      	movs	r0, #1
 800362a:	fa00 f202 	lsl.w	r2, r0, r2
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	e000e100 	.word	0xe000e100

08003644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003654:	2b00      	cmp	r3, #0
 8003656:	db0a      	blt.n	800366e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	b2da      	uxtb	r2, r3
 800365c:	490c      	ldr	r1, [pc, #48]	@ (8003690 <__NVIC_SetPriority+0x4c>)
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	0112      	lsls	r2, r2, #4
 8003664:	b2d2      	uxtb	r2, r2
 8003666:	440b      	add	r3, r1
 8003668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800366c:	e00a      	b.n	8003684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4908      	ldr	r1, [pc, #32]	@ (8003694 <__NVIC_SetPriority+0x50>)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	3b04      	subs	r3, #4
 800367c:	0112      	lsls	r2, r2, #4
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	440b      	add	r3, r1
 8003682:	761a      	strb	r2, [r3, #24]
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000e100 	.word	0xe000e100
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003698:	b480      	push	{r7}
 800369a:	b089      	sub	sp, #36	@ 0x24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	f1c3 0307 	rsb	r3, r3, #7
 80036b2:	2b04      	cmp	r3, #4
 80036b4:	bf28      	it	cs
 80036b6:	2304      	movcs	r3, #4
 80036b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3304      	adds	r3, #4
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d902      	bls.n	80036c8 <NVIC_EncodePriority+0x30>
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3b03      	subs	r3, #3
 80036c6:	e000      	b.n	80036ca <NVIC_EncodePriority+0x32>
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	f04f 32ff 	mov.w	r2, #4294967295
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43da      	mvns	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	401a      	ands	r2, r3
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e0:	f04f 31ff 	mov.w	r1, #4294967295
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	43d9      	mvns	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f0:	4313      	orrs	r3, r2
         );
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	@ 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ff4c 	bl	80035a4 <__NVIC_SetPriorityGrouping>
}
 800370c:	bf00      	nop
 800370e:	3708      	adds	r7, #8
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003726:	f7ff ff61 	bl	80035ec <__NVIC_GetPriorityGrouping>
 800372a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	68b9      	ldr	r1, [r7, #8]
 8003730:	6978      	ldr	r0, [r7, #20]
 8003732:	f7ff ffb1 	bl	8003698 <NVIC_EncodePriority>
 8003736:	4602      	mov	r2, r0
 8003738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373c:	4611      	mov	r1, r2
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff ff80 	bl	8003644 <__NVIC_SetPriority>
}
 8003744:	bf00      	nop
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff ff54 	bl	8003608 <__NVIC_EnableIRQ>
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003776:	e17f      	b.n	8003a78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8171 	beq.w	8003a72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d005      	beq.n	80037a8 <HAL_GPIO_Init+0x40>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d130      	bne.n	800380a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037de:	2201      	movs	r2, #1
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0201 	and.w	r2, r3, #1
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b03      	cmp	r3, #3
 8003814:	d118      	bne.n	8003848 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800381c:	2201      	movs	r2, #1
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	08db      	lsrs	r3, r3, #3
 8003832:	f003 0201 	and.w	r2, r3, #1
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	4313      	orrs	r3, r2
 8003840:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f003 0303 	and.w	r3, r3, #3
 8003850:	2b03      	cmp	r3, #3
 8003852:	d017      	beq.n	8003884 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	2203      	movs	r2, #3
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d123      	bne.n	80038d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	08da      	lsrs	r2, r3, #3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3208      	adds	r2, #8
 8003898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	220f      	movs	r2, #15
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	08da      	lsrs	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3208      	adds	r2, #8
 80038d2:	6939      	ldr	r1, [r7, #16]
 80038d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	2203      	movs	r2, #3
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	43db      	mvns	r3, r3
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4013      	ands	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80ac 	beq.w	8003a72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800391a:	4b5f      	ldr	r3, [pc, #380]	@ (8003a98 <HAL_GPIO_Init+0x330>)
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	4a5e      	ldr	r2, [pc, #376]	@ (8003a98 <HAL_GPIO_Init+0x330>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6613      	str	r3, [r2, #96]	@ 0x60
 8003926:	4b5c      	ldr	r3, [pc, #368]	@ (8003a98 <HAL_GPIO_Init+0x330>)
 8003928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003932:	4a5a      	ldr	r2, [pc, #360]	@ (8003a9c <HAL_GPIO_Init+0x334>)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	3302      	adds	r3, #2
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	220f      	movs	r2, #15
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800395c:	d025      	beq.n	80039aa <HAL_GPIO_Init+0x242>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4f      	ldr	r2, [pc, #316]	@ (8003aa0 <HAL_GPIO_Init+0x338>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01f      	beq.n	80039a6 <HAL_GPIO_Init+0x23e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4e      	ldr	r2, [pc, #312]	@ (8003aa4 <HAL_GPIO_Init+0x33c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d019      	beq.n	80039a2 <HAL_GPIO_Init+0x23a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa8 <HAL_GPIO_Init+0x340>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_GPIO_Init+0x236>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a4c      	ldr	r2, [pc, #304]	@ (8003aac <HAL_GPIO_Init+0x344>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00d      	beq.n	800399a <HAL_GPIO_Init+0x232>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab0 <HAL_GPIO_Init+0x348>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <HAL_GPIO_Init+0x22e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4a      	ldr	r2, [pc, #296]	@ (8003ab4 <HAL_GPIO_Init+0x34c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_GPIO_Init+0x22a>
 800398e:	2306      	movs	r3, #6
 8003990:	e00c      	b.n	80039ac <HAL_GPIO_Init+0x244>
 8003992:	2307      	movs	r3, #7
 8003994:	e00a      	b.n	80039ac <HAL_GPIO_Init+0x244>
 8003996:	2305      	movs	r3, #5
 8003998:	e008      	b.n	80039ac <HAL_GPIO_Init+0x244>
 800399a:	2304      	movs	r3, #4
 800399c:	e006      	b.n	80039ac <HAL_GPIO_Init+0x244>
 800399e:	2303      	movs	r3, #3
 80039a0:	e004      	b.n	80039ac <HAL_GPIO_Init+0x244>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e002      	b.n	80039ac <HAL_GPIO_Init+0x244>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e000      	b.n	80039ac <HAL_GPIO_Init+0x244>
 80039aa:	2300      	movs	r3, #0
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	f002 0203 	and.w	r2, r2, #3
 80039b2:	0092      	lsls	r2, r2, #2
 80039b4:	4093      	lsls	r3, r2
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039bc:	4937      	ldr	r1, [pc, #220]	@ (8003a9c <HAL_GPIO_Init+0x334>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	3302      	adds	r3, #2
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ca:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ee:	4a32      	ldr	r2, [pc, #200]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039f4:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4013      	ands	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a18:	4a27      	ldr	r2, [pc, #156]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a1e:	4b26      	ldr	r3, [pc, #152]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	43db      	mvns	r3, r3
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a42:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	43db      	mvns	r3, r3
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a6c:	4a12      	ldr	r2, [pc, #72]	@ (8003ab8 <HAL_GPIO_Init+0x350>)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f47f ae78 	bne.w	8003778 <HAL_GPIO_Init+0x10>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	371c      	adds	r7, #28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	48000400 	.word	0x48000400
 8003aa4:	48000800 	.word	0x48000800
 8003aa8:	48000c00 	.word	0x48000c00
 8003aac:	48001000 	.word	0x48001000
 8003ab0:	48001400 	.word	0x48001400
 8003ab4:	48001800 	.word	0x48001800
 8003ab8:	40010400 	.word	0x40010400

08003abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	807b      	strh	r3, [r7, #2]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003acc:	787b      	ldrb	r3, [r7, #1]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ad2:	887a      	ldrh	r2, [r7, #2]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ad8:	e002      	b.n	8003ae0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003af6:	4b08      	ldr	r3, [pc, #32]	@ (8003b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d006      	beq.n	8003b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b02:	4a05      	ldr	r2, [pc, #20]	@ (8003b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b04:	88fb      	ldrh	r3, [r7, #6]
 8003b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f806 	bl	8003b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40010400 	.word	0x40010400

08003b1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e08d      	b.n	8003c60 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d106      	bne.n	8003b5e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7fd f90d 	bl	8000d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2224      	movs	r2, #36	@ 0x24
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0201 	bic.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b82:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b92:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ba8:	609a      	str	r2, [r3, #8]
 8003baa:	e006      	b.n	8003bba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d108      	bne.n	8003bd4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	e007      	b.n	8003be4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003be2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bf6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c06:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69d9      	ldr	r1, [r3, #28]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1a      	ldr	r2, [r3, #32]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	460b      	mov	r3, r1
 8003c76:	817b      	strh	r3, [r7, #10]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	f040 80fd 	bne.w	8003e84 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_I2C_Master_Transmit+0x30>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0f6      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ca0:	f7fe fa24 	bl	80020ec <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2319      	movs	r3, #25
 8003cac:	2201      	movs	r2, #1
 8003cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f914 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0e1      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2221      	movs	r2, #33	@ 0x21
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	893a      	ldrh	r2, [r7, #8]
 8003ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2bff      	cmp	r3, #255	@ 0xff
 8003cf2:	d906      	bls.n	8003d02 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	22ff      	movs	r2, #255	@ 0xff
 8003cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003cfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e007      	b.n	8003d12 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d10:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d024      	beq.n	8003d64 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	781a      	ldrb	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	4b4e      	ldr	r3, [pc, #312]	@ (8003e90 <HAL_I2C_Master_Transmit+0x228>)
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fa83 	bl	8004268 <I2C_TransferConfig>
 8003d62:	e066      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	4b48      	ldr	r3, [pc, #288]	@ (8003e90 <HAL_I2C_Master_Transmit+0x228>)
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fa78 	bl	8004268 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d78:	e05b      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f907 	bl	8003f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07b      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	781a      	ldrb	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d034      	beq.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d130      	bne.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2180      	movs	r1, #128	@ 0x80
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f880 	bl	8003ee0 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e04d      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2bff      	cmp	r3, #255	@ 0xff
 8003df2:	d90e      	bls.n	8003e12 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	22ff      	movs	r2, #255	@ 0xff
 8003df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	8979      	ldrh	r1, [r7, #10]
 8003e02:	2300      	movs	r3, #0
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fa2c 	bl	8004268 <I2C_TransferConfig>
 8003e10:	e00f      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	8979      	ldrh	r1, [r7, #10]
 8003e24:	2300      	movs	r3, #0
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fa1b 	bl	8004268 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d19e      	bne.n	8003d7a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f8ed 	bl	8004020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e01a      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2220      	movs	r2, #32
 8003e56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b0c      	ldr	r3, [pc, #48]	@ (8003e94 <HAL_I2C_Master_Transmit+0x22c>)
 8003e64:	400b      	ands	r3, r1
 8003e66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	80002000 	.word	0x80002000
 8003e94:	fe00e800 	.word	0xfe00e800

08003e98 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d103      	bne.n	8003eb6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d007      	beq.n	8003ed4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	699a      	ldr	r2, [r3, #24]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	619a      	str	r2, [r3, #24]
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef0:	e03b      	b.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	6839      	ldr	r1, [r7, #0]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f8d6 	bl	80040a8 <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e041      	b.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d02d      	beq.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0e:	f7fe f8ed 	bl	80020ec <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d302      	bcc.n	8003f24 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d122      	bne.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	bf0c      	ite	eq
 8003f34:	2301      	moveq	r3, #1
 8003f36:	2300      	movne	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d113      	bne.n	8003f6a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e00f      	b.n	8003f8a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4013      	ands	r3, r2
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d0b4      	beq.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f9e:	e033      	b.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f87f 	bl	80040a8 <I2C_IsErrorOccurred>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e031      	b.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fba:	d025      	beq.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fbc:	f7fe f896 	bl	80020ec <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11a      	bne.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d013      	beq.n	8004008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d1c4      	bne.n	8003fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800402c:	e02f      	b.n	800408e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f838 	bl	80040a8 <I2C_IsErrorOccurred>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e02d      	b.n	800409e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004042:	f7fe f853 	bl	80020ec <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	d302      	bcc.n	8004058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11a      	bne.n	800408e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b20      	cmp	r3, #32
 8004064:	d013      	beq.n	800408e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e007      	b.n	800409e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	f003 0320 	and.w	r3, r3, #32
 8004098:	2b20      	cmp	r3, #32
 800409a:	d1c8      	bne.n	800402e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	@ 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d068      	beq.n	80041a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2210      	movs	r2, #16
 80040da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040dc:	e049      	b.n	8004172 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e4:	d045      	beq.n	8004172 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040e6:	f7fe f801 	bl	80020ec <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d302      	bcc.n	80040fc <I2C_IsErrorOccurred+0x54>
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d13a      	bne.n	8004172 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004106:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800410e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411e:	d121      	bne.n	8004164 <I2C_IsErrorOccurred+0xbc>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004126:	d01d      	beq.n	8004164 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004128:	7cfb      	ldrb	r3, [r7, #19]
 800412a:	2b20      	cmp	r3, #32
 800412c:	d01a      	beq.n	8004164 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800413c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800413e:	f7fd ffd5 	bl	80020ec <HAL_GetTick>
 8004142:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004144:	e00e      	b.n	8004164 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004146:	f7fd ffd1 	bl	80020ec <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b19      	cmp	r3, #25
 8004152:	d907      	bls.n	8004164 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	f043 0320 	orr.w	r3, r3, #32
 800415a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004162:	e006      	b.n	8004172 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b20      	cmp	r3, #32
 8004170:	d1e9      	bne.n	8004146 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b20      	cmp	r3, #32
 800417e:	d003      	beq.n	8004188 <I2C_IsErrorOccurred+0xe0>
 8004180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0aa      	beq.n	80040de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2220      	movs	r2, #32
 8004196:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	f043 0304 	orr.w	r3, r3, #4
 800419e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00b      	beq.n	8004214 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800420c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01c      	beq.n	8004256 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff fe3b 	bl	8003e98 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0d      	ldr	r3, [pc, #52]	@ (8004264 <I2C_IsErrorOccurred+0x1bc>)
 800422e:	400b      	ands	r3, r1
 8004230:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004256:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800425a:	4618      	mov	r0, r3
 800425c:	3728      	adds	r7, #40	@ 0x28
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	fe00e800 	.word	0xfe00e800

08004268 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	460b      	mov	r3, r1
 8004274:	817b      	strh	r3, [r7, #10]
 8004276:	4613      	mov	r3, r2
 8004278:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800427a:	897b      	ldrh	r3, [r7, #10]
 800427c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004280:	7a7b      	ldrb	r3, [r7, #9]
 8004282:	041b      	lsls	r3, r3, #16
 8004284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004288:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	4313      	orrs	r3, r2
 8004292:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004296:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	0d5b      	lsrs	r3, r3, #21
 80042a2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80042a6:	4b08      	ldr	r3, [pc, #32]	@ (80042c8 <I2C_TransferConfig+0x60>)
 80042a8:	430b      	orrs	r3, r1
 80042aa:	43db      	mvns	r3, r3
 80042ac:	ea02 0103 	and.w	r1, r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	03ff63ff 	.word	0x03ff63ff

080042cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d138      	bne.n	8004354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e032      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2224      	movs	r2, #36	@ 0x24
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0201 	bic.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800431e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6819      	ldr	r1, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b20      	cmp	r3, #32
 8004376:	d139      	bne.n	80043ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004382:	2302      	movs	r3, #2
 8004384:	e033      	b.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2224      	movs	r2, #36	@ 0x24
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0201 	bic.w	r2, r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80043b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004400:	4b04      	ldr	r3, [pc, #16]	@ (8004414 <HAL_PWREx_GetVoltageRange+0x18>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40007000 	.word	0x40007000

08004418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004426:	d130      	bne.n	800448a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004428:	4b23      	ldr	r3, [pc, #140]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004434:	d038      	beq.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004436:	4b20      	ldr	r3, [pc, #128]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800443e:	4a1e      	ldr	r2, [pc, #120]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004444:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004446:	4b1d      	ldr	r3, [pc, #116]	@ (80044bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2232      	movs	r2, #50	@ 0x32
 800444c:	fb02 f303 	mul.w	r3, r2, r3
 8004450:	4a1b      	ldr	r2, [pc, #108]	@ (80044c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004452:	fba2 2303 	umull	r2, r3, r2, r3
 8004456:	0c9b      	lsrs	r3, r3, #18
 8004458:	3301      	adds	r3, #1
 800445a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800445c:	e002      	b.n	8004464 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b01      	subs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004464:	4b14      	ldr	r3, [pc, #80]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004470:	d102      	bne.n	8004478 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f2      	bne.n	800445e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004478:	4b0f      	ldr	r3, [pc, #60]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004484:	d110      	bne.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e00f      	b.n	80044aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800448a:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004496:	d007      	beq.n	80044a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004498:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044a0:	4a05      	ldr	r2, [pc, #20]	@ (80044b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80044a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40007000 	.word	0x40007000
 80044bc:	20000008 	.word	0x20000008
 80044c0:	431bde83 	.word	0x431bde83

080044c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e3ca      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d6:	4b97      	ldr	r3, [pc, #604]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 030c 	and.w	r3, r3, #12
 80044de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e0:	4b94      	ldr	r3, [pc, #592]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80e4 	beq.w	80046c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_RCC_OscConfig+0x4a>
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b0c      	cmp	r3, #12
 8004502:	f040 808b 	bne.w	800461c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b01      	cmp	r3, #1
 800450a:	f040 8087 	bne.w	800461c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800450e:	4b89      	ldr	r3, [pc, #548]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCC_OscConfig+0x62>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e3a2      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1a      	ldr	r2, [r3, #32]
 800452a:	4b82      	ldr	r3, [pc, #520]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_RCC_OscConfig+0x7c>
 8004536:	4b7f      	ldr	r3, [pc, #508]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800453e:	e005      	b.n	800454c <HAL_RCC_OscConfig+0x88>
 8004540:	4b7c      	ldr	r3, [pc, #496]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004546:	091b      	lsrs	r3, r3, #4
 8004548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800454c:	4293      	cmp	r3, r2
 800454e:	d223      	bcs.n	8004598 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4618      	mov	r0, r3
 8004556:	f000 fd87 	bl	8005068 <RCC_SetFlashLatencyFromMSIRange>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e383      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004564:	4b73      	ldr	r3, [pc, #460]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a72      	ldr	r2, [pc, #456]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800456a:	f043 0308 	orr.w	r3, r3, #8
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b70      	ldr	r3, [pc, #448]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	496d      	ldr	r1, [pc, #436]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004582:	4b6c      	ldr	r3, [pc, #432]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	021b      	lsls	r3, r3, #8
 8004590:	4968      	ldr	r1, [pc, #416]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
 8004596:	e025      	b.n	80045e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004598:	4b66      	ldr	r3, [pc, #408]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a65      	ldr	r2, [pc, #404]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800459e:	f043 0308 	orr.w	r3, r3, #8
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b63      	ldr	r3, [pc, #396]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	4960      	ldr	r1, [pc, #384]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b6:	4b5f      	ldr	r3, [pc, #380]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	495b      	ldr	r1, [pc, #364]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 fd47 	bl	8005068 <RCC_SetFlashLatencyFromMSIRange>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e343      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e4:	f000 fc4a 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 80045e8:	4602      	mov	r2, r0
 80045ea:	4b52      	ldr	r3, [pc, #328]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	091b      	lsrs	r3, r3, #4
 80045f0:	f003 030f 	and.w	r3, r3, #15
 80045f4:	4950      	ldr	r1, [pc, #320]	@ (8004738 <HAL_RCC_OscConfig+0x274>)
 80045f6:	5ccb      	ldrb	r3, [r1, r3]
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	4a4e      	ldr	r2, [pc, #312]	@ (800473c <HAL_RCC_OscConfig+0x278>)
 8004602:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004604:	4b4e      	ldr	r3, [pc, #312]	@ (8004740 <HAL_RCC_OscConfig+0x27c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fd f8b7 	bl	800177c <HAL_InitTick>
 800460e:	4603      	mov	r3, r0
 8004610:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d052      	beq.n	80046be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	e327      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d032      	beq.n	800468a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004624:	4b43      	ldr	r3, [pc, #268]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a42      	ldr	r2, [pc, #264]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004630:	f7fd fd5c 	bl	80020ec <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004638:	f7fd fd58 	bl	80020ec <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e310      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800464a:	4b3a      	ldr	r3, [pc, #232]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004656:	4b37      	ldr	r3, [pc, #220]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a36      	ldr	r2, [pc, #216]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800465c:	f043 0308 	orr.w	r3, r3, #8
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	4b34      	ldr	r3, [pc, #208]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	4931      	ldr	r1, [pc, #196]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004674:	4b2f      	ldr	r3, [pc, #188]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	492c      	ldr	r1, [pc, #176]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	e01a      	b.n	80046c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800468a:	4b2a      	ldr	r3, [pc, #168]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a29      	ldr	r2, [pc, #164]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004696:	f7fd fd29 	bl	80020ec <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800469c:	e008      	b.n	80046b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800469e:	f7fd fd25 	bl	80020ec <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e2dd      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046b0:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <HAL_RCC_OscConfig+0x1da>
 80046bc:	e000      	b.n	80046c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d074      	beq.n	80047b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b08      	cmp	r3, #8
 80046d0:	d005      	beq.n	80046de <HAL_RCC_OscConfig+0x21a>
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2b0c      	cmp	r3, #12
 80046d6:	d10e      	bne.n	80046f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d10b      	bne.n	80046f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046de:	4b15      	ldr	r3, [pc, #84]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d064      	beq.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d160      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e2ba      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046fe:	d106      	bne.n	800470e <HAL_RCC_OscConfig+0x24a>
 8004700:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a0b      	ldr	r2, [pc, #44]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	e026      	b.n	800475c <HAL_RCC_OscConfig+0x298>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004716:	d115      	bne.n	8004744 <HAL_RCC_OscConfig+0x280>
 8004718:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a05      	ldr	r2, [pc, #20]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800471e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004722:	6013      	str	r3, [r2, #0]
 8004724:	4b03      	ldr	r3, [pc, #12]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a02      	ldr	r2, [pc, #8]	@ (8004734 <HAL_RCC_OscConfig+0x270>)
 800472a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e014      	b.n	800475c <HAL_RCC_OscConfig+0x298>
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000
 8004738:	0800a03c 	.word	0x0800a03c
 800473c:	20000008 	.word	0x20000008
 8004740:	2000000c 	.word	0x2000000c
 8004744:	4ba0      	ldr	r3, [pc, #640]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a9f      	ldr	r2, [pc, #636]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800474a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800474e:	6013      	str	r3, [r2, #0]
 8004750:	4b9d      	ldr	r3, [pc, #628]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a9c      	ldr	r2, [pc, #624]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800475a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d013      	beq.n	800478c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fd fcc2 	bl	80020ec <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800476c:	f7fd fcbe 	bl	80020ec <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b64      	cmp	r3, #100	@ 0x64
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e276      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477e:	4b92      	ldr	r3, [pc, #584]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x2a8>
 800478a:	e014      	b.n	80047b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd fcae 	bl	80020ec <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004794:	f7fd fcaa 	bl	80020ec <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	@ 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e262      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a6:	4b88      	ldr	r3, [pc, #544]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1f0      	bne.n	8004794 <HAL_RCC_OscConfig+0x2d0>
 80047b2:	e000      	b.n	80047b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d060      	beq.n	8004884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_OscConfig+0x310>
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b0c      	cmp	r3, #12
 80047cc:	d119      	bne.n	8004802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d116      	bne.n	8004802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d4:	4b7c      	ldr	r3, [pc, #496]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_OscConfig+0x328>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e23f      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ec:	4b76      	ldr	r3, [pc, #472]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	4973      	ldr	r1, [pc, #460]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004800:	e040      	b.n	8004884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d023      	beq.n	8004852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800480a:	4b6f      	ldr	r3, [pc, #444]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a6e      	ldr	r2, [pc, #440]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004816:	f7fd fc69 	bl	80020ec <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481e:	f7fd fc65 	bl	80020ec <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e21d      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004830:	4b65      	ldr	r3, [pc, #404]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b62      	ldr	r3, [pc, #392]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	061b      	lsls	r3, r3, #24
 800484a:	495f      	ldr	r1, [pc, #380]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
 8004850:	e018      	b.n	8004884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004852:	4b5d      	ldr	r3, [pc, #372]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a5c      	ldr	r2, [pc, #368]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800485c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd fc45 	bl	80020ec <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004866:	f7fd fc41 	bl	80020ec <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1f9      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004878:	4b53      	ldr	r3, [pc, #332]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f0      	bne.n	8004866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d03c      	beq.n	800490a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01c      	beq.n	80048d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004898:	4b4b      	ldr	r3, [pc, #300]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800489a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800489e:	4a4a      	ldr	r2, [pc, #296]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fd fc20 	bl	80020ec <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b0:	f7fd fc1c 	bl	80020ec <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1d4      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048c2:	4b41      	ldr	r3, [pc, #260]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ef      	beq.n	80048b0 <HAL_RCC_OscConfig+0x3ec>
 80048d0:	e01b      	b.n	800490a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d2:	4b3d      	ldr	r3, [pc, #244]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048d8:	4a3b      	ldr	r2, [pc, #236]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd fc03 	bl	80020ec <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ea:	f7fd fbff 	bl	80020ec <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e1b7      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048fc:	4b32      	ldr	r3, [pc, #200]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80048fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ef      	bne.n	80048ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 80a6 	beq.w	8004a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004918:	2300      	movs	r3, #0
 800491a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800491c:	4b2a      	ldr	r3, [pc, #168]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004928:	4b27      	ldr	r3, [pc, #156]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800492a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492c:	4a26      	ldr	r2, [pc, #152]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800492e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004932:	6593      	str	r3, [r2, #88]	@ 0x58
 8004934:	4b24      	ldr	r3, [pc, #144]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004940:	2301      	movs	r3, #1
 8004942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004944:	4b21      	ldr	r3, [pc, #132]	@ (80049cc <HAL_RCC_OscConfig+0x508>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d118      	bne.n	8004982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004950:	4b1e      	ldr	r3, [pc, #120]	@ (80049cc <HAL_RCC_OscConfig+0x508>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <HAL_RCC_OscConfig+0x508>)
 8004956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800495a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495c:	f7fd fbc6 	bl	80020ec <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fd fbc2 	bl	80020ec <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e17a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <HAL_RCC_OscConfig+0x508>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d108      	bne.n	800499c <HAL_RCC_OscConfig+0x4d8>
 800498a:	4b0f      	ldr	r3, [pc, #60]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 800498c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004990:	4a0d      	ldr	r2, [pc, #52]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800499a:	e029      	b.n	80049f0 <HAL_RCC_OscConfig+0x52c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	2b05      	cmp	r3, #5
 80049a2:	d115      	bne.n	80049d0 <HAL_RCC_OscConfig+0x50c>
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	4a07      	ldr	r2, [pc, #28]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049ac:	f043 0304 	orr.w	r3, r3, #4
 80049b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ba:	4a03      	ldr	r2, [pc, #12]	@ (80049c8 <HAL_RCC_OscConfig+0x504>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049c4:	e014      	b.n	80049f0 <HAL_RCC_OscConfig+0x52c>
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	40007000 	.word	0x40007000
 80049d0:	4b9c      	ldr	r3, [pc, #624]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d6:	4a9b      	ldr	r2, [pc, #620]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80049e0:	4b98      	ldr	r3, [pc, #608]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049e6:	4a97      	ldr	r2, [pc, #604]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d016      	beq.n	8004a26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f8:	f7fd fb78 	bl	80020ec <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a00:	f7fd fb74 	bl	80020ec <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e12a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a16:	4b8b      	ldr	r3, [pc, #556]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ed      	beq.n	8004a00 <HAL_RCC_OscConfig+0x53c>
 8004a24:	e015      	b.n	8004a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a26:	f7fd fb61 	bl	80020ec <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2e:	f7fd fb5d 	bl	80020ec <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e113      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a44:	4b7f      	ldr	r3, [pc, #508]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1ed      	bne.n	8004a2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a52:	7ffb      	ldrb	r3, [r7, #31]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a58:	4b7a      	ldr	r3, [pc, #488]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5c:	4a79      	ldr	r2, [pc, #484]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80fe 	beq.w	8004c6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	f040 80d0 	bne.w	8004c18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a78:	4b72      	ldr	r3, [pc, #456]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0203 	and.w	r2, r3, #3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d130      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	3b01      	subs	r3, #1
 8004a98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d127      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d11f      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ab8:	2a07      	cmp	r2, #7
 8004aba:	bf14      	ite	ne
 8004abc:	2201      	movne	r2, #1
 8004abe:	2200      	moveq	r2, #0
 8004ac0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d113      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d109      	bne.n	8004aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	085b      	lsrs	r3, r3, #1
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d06e      	beq.n	8004bcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d069      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004af4:	4b53      	ldr	r3, [pc, #332]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b00:	4b50      	ldr	r3, [pc, #320]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0ad      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b10:	4b4c      	ldr	r3, [pc, #304]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a4b      	ldr	r2, [pc, #300]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b1c:	f7fd fae6 	bl	80020ec <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b24:	f7fd fae2 	bl	80020ec <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e09a      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b36:	4b43      	ldr	r3, [pc, #268]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f0      	bne.n	8004b24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b42:	4b40      	ldr	r3, [pc, #256]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4b40      	ldr	r3, [pc, #256]	@ (8004c48 <HAL_RCC_OscConfig+0x784>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b52:	3a01      	subs	r2, #1
 8004b54:	0112      	lsls	r2, r2, #4
 8004b56:	4311      	orrs	r1, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b5c:	0212      	lsls	r2, r2, #8
 8004b5e:	4311      	orrs	r1, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b64:	0852      	lsrs	r2, r2, #1
 8004b66:	3a01      	subs	r2, #1
 8004b68:	0552      	lsls	r2, r2, #21
 8004b6a:	4311      	orrs	r1, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b70:	0852      	lsrs	r2, r2, #1
 8004b72:	3a01      	subs	r2, #1
 8004b74:	0652      	lsls	r2, r2, #25
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b7c:	0912      	lsrs	r2, r2, #4
 8004b7e:	0452      	lsls	r2, r2, #17
 8004b80:	430a      	orrs	r2, r1
 8004b82:	4930      	ldr	r1, [pc, #192]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b88:	4b2e      	ldr	r3, [pc, #184]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b94:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a2a      	ldr	r2, [pc, #168]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba0:	f7fd faa4 	bl	80020ec <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba8:	f7fd faa0 	bl	80020ec <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e058      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	4b22      	ldr	r3, [pc, #136]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bc6:	e050      	b.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e04f      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d148      	bne.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a19      	ldr	r2, [pc, #100]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be4:	4b17      	ldr	r3, [pc, #92]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4a16      	ldr	r2, [pc, #88]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bf0:	f7fd fa7c 	bl	80020ec <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fd fa78 	bl	80020ec <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e030      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x734>
 8004c16:	e028      	b.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d023      	beq.n	8004c66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1e:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a08      	ldr	r2, [pc, #32]	@ (8004c44 <HAL_RCC_OscConfig+0x780>)
 8004c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2a:	f7fd fa5f 	bl	80020ec <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c30:	e00c      	b.n	8004c4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c32:	f7fd fa5b 	bl	80020ec <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d905      	bls.n	8004c4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e013      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
 8004c44:	40021000 	.word	0x40021000
 8004c48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4c:	4b09      	ldr	r3, [pc, #36]	@ (8004c74 <HAL_RCC_OscConfig+0x7b0>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1ec      	bne.n	8004c32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <HAL_RCC_OscConfig+0x7b0>)
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	4905      	ldr	r1, [pc, #20]	@ (8004c74 <HAL_RCC_OscConfig+0x7b0>)
 8004c5e:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <HAL_RCC_OscConfig+0x7b4>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	60cb      	str	r3, [r1, #12]
 8004c64:	e001      	b.n	8004c6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3720      	adds	r7, #32
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000
 8004c78:	feeefffc 	.word	0xfeeefffc

08004c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e0e7      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c90:	4b75      	ldr	r3, [pc, #468]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d910      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b72      	ldr	r3, [pc, #456]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4970      	ldr	r1, [pc, #448]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b6e      	ldr	r3, [pc, #440]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0cf      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	4b66      	ldr	r3, [pc, #408]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d908      	bls.n	8004cee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cdc:	4b63      	ldr	r3, [pc, #396]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4960      	ldr	r1, [pc, #384]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d04c      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d107      	bne.n	8004d12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d02:	4b5a      	ldr	r3, [pc, #360]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d121      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e0a6      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d107      	bne.n	8004d2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1a:	4b54      	ldr	r3, [pc, #336]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d115      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e09a      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004d32:	4b4e      	ldr	r3, [pc, #312]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e08e      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d42:	4b4a      	ldr	r3, [pc, #296]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e086      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d52:	4b46      	ldr	r3, [pc, #280]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f023 0203 	bic.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4943      	ldr	r1, [pc, #268]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d64:	f7fd f9c2 	bl	80020ec <HAL_GetTick>
 8004d68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d6c:	f7fd f9be 	bl	80020ec <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e06e      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	4b3a      	ldr	r3, [pc, #232]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 020c 	and.w	r2, r3, #12
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d1eb      	bne.n	8004d6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d010      	beq.n	8004dc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	4b31      	ldr	r3, [pc, #196]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d208      	bcs.n	8004dc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	492b      	ldr	r1, [pc, #172]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc2:	4b29      	ldr	r3, [pc, #164]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d210      	bcs.n	8004df2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd0:	4b25      	ldr	r3, [pc, #148]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f023 0207 	bic.w	r2, r3, #7
 8004dd8:	4923      	ldr	r1, [pc, #140]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de0:	4b21      	ldr	r3, [pc, #132]	@ (8004e68 <HAL_RCC_ClockConfig+0x1ec>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d001      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e036      	b.n	8004e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4918      	ldr	r1, [pc, #96]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e1c:	4b13      	ldr	r3, [pc, #76]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4910      	ldr	r1, [pc, #64]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e30:	f000 f824 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8004e34:	4602      	mov	r2, r0
 8004e36:	4b0d      	ldr	r3, [pc, #52]	@ (8004e6c <HAL_RCC_ClockConfig+0x1f0>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	490b      	ldr	r1, [pc, #44]	@ (8004e70 <HAL_RCC_ClockConfig+0x1f4>)
 8004e42:	5ccb      	ldrb	r3, [r1, r3]
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	4a09      	ldr	r2, [pc, #36]	@ (8004e74 <HAL_RCC_ClockConfig+0x1f8>)
 8004e4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e50:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_ClockConfig+0x1fc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fc fc91 	bl	800177c <HAL_InitTick>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40022000 	.word	0x40022000
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	0800a03c 	.word	0x0800a03c
 8004e74:	20000008 	.word	0x20000008
 8004e78:	2000000c 	.word	0x2000000c

08004e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	@ 0x24
 8004e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	2300      	movs	r3, #0
 8004e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
 8004e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e94:	4b3b      	ldr	r3, [pc, #236]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	2b0c      	cmp	r3, #12
 8004ea8:	d121      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d11e      	bne.n	8004eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004eb0:	4b34      	ldr	r3, [pc, #208]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0308 	and.w	r3, r3, #8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ebc:	4b31      	ldr	r3, [pc, #196]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ec2:	0a1b      	lsrs	r3, r3, #8
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e005      	b.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8004f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eec:	e00a      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d102      	bne.n	8004efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ef4:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	e004      	b.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d101      	bne.n	8004f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f00:	4b23      	ldr	r3, [pc, #140]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b0c      	cmp	r3, #12
 8004f08:	d134      	bne.n	8004f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d003      	beq.n	8004f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d003      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0xac>
 8004f20:	e005      	b.n	8004f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f22:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8004f24:	617b      	str	r3, [r7, #20]
      break;
 8004f26:	e005      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f28:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f2a:	617b      	str	r3, [r7, #20]
      break;
 8004f2c:	e002      	b.n	8004f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	617b      	str	r3, [r7, #20]
      break;
 8004f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f34:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	3301      	adds	r3, #1
 8004f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f42:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	fb03 f202 	mul.w	r2, r3, r2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	0e5b      	lsrs	r3, r3, #25
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	3301      	adds	r3, #1
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f74:	69bb      	ldr	r3, [r7, #24]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3724      	adds	r7, #36	@ 0x24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40021000 	.word	0x40021000
 8004f88:	0800a054 	.word	0x0800a054
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	007a1200 	.word	0x007a1200

08004f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f98:	4b03      	ldr	r3, [pc, #12]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000008 	.word	0x20000008

08004fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004fb0:	f7ff fff0 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	4904      	ldr	r1, [pc, #16]	@ (8004fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800a04c 	.word	0x0800a04c

08004fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004fdc:	f7ff ffda 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	4b06      	ldr	r3, [pc, #24]	@ (8004ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	0adb      	lsrs	r3, r3, #11
 8004fe8:	f003 0307 	and.w	r3, r3, #7
 8004fec:	4904      	ldr	r1, [pc, #16]	@ (8005000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004fee:	5ccb      	ldrb	r3, [r1, r3]
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40021000 	.word	0x40021000
 8005000:	0800a04c 	.word	0x0800a04c

08005004 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	220f      	movs	r2, #15
 8005012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005014:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0203 	and.w	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005020:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800502c:	4b0c      	ldr	r3, [pc, #48]	@ (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005038:	4b09      	ldr	r3, [pc, #36]	@ (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005046:	4b07      	ldr	r3, [pc, #28]	@ (8005064 <HAL_RCC_GetClockConfig+0x60>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0207 	and.w	r2, r3, #7
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	40022000 	.word	0x40022000

08005068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005074:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005080:	f7ff f9bc 	bl	80043fc <HAL_PWREx_GetVoltageRange>
 8005084:	6178      	str	r0, [r7, #20]
 8005086:	e014      	b.n	80050b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005088:	4b25      	ldr	r3, [pc, #148]	@ (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508c:	4a24      	ldr	r2, [pc, #144]	@ (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800508e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005092:	6593      	str	r3, [r2, #88]	@ 0x58
 8005094:	4b22      	ldr	r3, [pc, #136]	@ (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050a0:	f7ff f9ac 	bl	80043fc <HAL_PWREx_GetVoltageRange>
 80050a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b8:	d10b      	bne.n	80050d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b80      	cmp	r3, #128	@ 0x80
 80050be:	d919      	bls.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80050c4:	d902      	bls.n	80050cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050c6:	2302      	movs	r3, #2
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e013      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050cc:	2301      	movs	r3, #1
 80050ce:	613b      	str	r3, [r7, #16]
 80050d0:	e010      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b80      	cmp	r3, #128	@ 0x80
 80050d6:	d902      	bls.n	80050de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80050d8:	2303      	movs	r3, #3
 80050da:	613b      	str	r3, [r7, #16]
 80050dc:	e00a      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b80      	cmp	r3, #128	@ 0x80
 80050e2:	d102      	bne.n	80050ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80050e4:	2302      	movs	r3, #2
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	e004      	b.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b70      	cmp	r3, #112	@ 0x70
 80050ee:	d101      	bne.n	80050f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80050f0:	2301      	movs	r3, #1
 80050f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f023 0207 	bic.w	r2, r3, #7
 80050fc:	4909      	ldr	r1, [pc, #36]	@ (8005124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	4313      	orrs	r3, r2
 8005102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005104:	4b07      	ldr	r3, [pc, #28]	@ (8005124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	429a      	cmp	r2, r3
 8005110:	d001      	beq.n	8005116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e000      	b.n	8005118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40021000 	.word	0x40021000
 8005124:	40022000 	.word	0x40022000

08005128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005130:	2300      	movs	r3, #0
 8005132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005134:	2300      	movs	r3, #0
 8005136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005140:	2b00      	cmp	r3, #0
 8005142:	d041      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005148:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800514c:	d02a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800514e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005152:	d824      	bhi.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005154:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005158:	d008      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800515a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800515e:	d81e      	bhi.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005168:	d010      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800516a:	e018      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800516c:	4b86      	ldr	r3, [pc, #536]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	4a85      	ldr	r2, [pc, #532]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005178:	e015      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3304      	adds	r3, #4
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fabb 	bl	80056fc <RCCEx_PLLSAI1_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800518a:	e00c      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3320      	adds	r3, #32
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fba6 	bl	80058e4 <RCCEx_PLLSAI2_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800519c:	e003      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	74fb      	strb	r3, [r7, #19]
      break;
 80051a2:	e000      	b.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80051a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10b      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051ac:	4b76      	ldr	r3, [pc, #472]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051ba:	4973      	ldr	r1, [pc, #460]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80051c2:	e001      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d041      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051dc:	d02a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80051de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051e2:	d824      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051e8:	d008      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80051ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051ee:	d81e      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80051f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051f8:	d010      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80051fa:	e018      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051fc:	4b62      	ldr	r3, [pc, #392]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4a61      	ldr	r2, [pc, #388]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005208:	e015      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	3304      	adds	r3, #4
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa73 	bl	80056fc <RCCEx_PLLSAI1_Config>
 8005216:	4603      	mov	r3, r0
 8005218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800521a:	e00c      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3320      	adds	r3, #32
 8005220:	2100      	movs	r1, #0
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fb5e 	bl	80058e4 <RCCEx_PLLSAI2_Config>
 8005228:	4603      	mov	r3, r0
 800522a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800522c:	e003      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	74fb      	strb	r3, [r7, #19]
      break;
 8005232:	e000      	b.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005236:	7cfb      	ldrb	r3, [r7, #19]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800523c:	4b52      	ldr	r3, [pc, #328]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005242:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800524a:	494f      	ldr	r1, [pc, #316]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005252:	e001      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80a0 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800526a:	4b47      	ldr	r3, [pc, #284]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005280:	4b41      	ldr	r3, [pc, #260]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005284:	4a40      	ldr	r2, [pc, #256]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800528a:	6593      	str	r3, [r2, #88]	@ 0x58
 800528c:	4b3e      	ldr	r3, [pc, #248]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005298:	2301      	movs	r3, #1
 800529a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800529c:	4b3b      	ldr	r3, [pc, #236]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a3a      	ldr	r2, [pc, #232]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052a8:	f7fc ff20 	bl	80020ec <HAL_GetTick>
 80052ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052ae:	e009      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b0:	f7fc ff1c 	bl	80020ec <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d902      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	74fb      	strb	r3, [r7, #19]
        break;
 80052c2:	e005      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80052c4:	4b31      	ldr	r3, [pc, #196]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ef      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80052d0:	7cfb      	ldrb	r3, [r7, #19]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d15c      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01f      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d019      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f4:	4b24      	ldr	r3, [pc, #144]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005300:	4b21      	ldr	r3, [pc, #132]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005306:	4a20      	ldr	r2, [pc, #128]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800530c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005310:	4b1d      	ldr	r3, [pc, #116]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005316:	4a1c      	ldr	r2, [pc, #112]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005320:	4a19      	ldr	r2, [pc, #100]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fc fedb 	bl	80020ec <HAL_GetTick>
 8005336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005338:	e00b      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533a:	f7fc fed7 	bl	80020ec <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005348:	4293      	cmp	r3, r2
 800534a:	d902      	bls.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	74fb      	strb	r3, [r7, #19]
            break;
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005352:	4b0d      	ldr	r3, [pc, #52]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0ec      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005366:	4b08      	ldr	r3, [pc, #32]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005376:	4904      	ldr	r1, [pc, #16]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800537e:	e009      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005394:	7c7b      	ldrb	r3, [r7, #17]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4b9e      	ldr	r3, [pc, #632]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	4a9d      	ldr	r2, [pc, #628]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b2:	4b98      	ldr	r3, [pc, #608]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f023 0203 	bic.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c0:	4994      	ldr	r1, [pc, #592]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f023 020c 	bic.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e2:	498c      	ldr	r1, [pc, #560]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f6:	4b87      	ldr	r3, [pc, #540]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005404:	4983      	ldr	r1, [pc, #524]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005418:	4b7e      	ldr	r3, [pc, #504]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	497b      	ldr	r1, [pc, #492]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800543a:	4b76      	ldr	r3, [pc, #472]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005448:	4972      	ldr	r1, [pc, #456]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800545c:	4b6d      	ldr	r3, [pc, #436]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800546a:	496a      	ldr	r1, [pc, #424]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800547e:	4b65      	ldr	r3, [pc, #404]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800548c:	4961      	ldr	r1, [pc, #388]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054a0:	4b5c      	ldr	r3, [pc, #368]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ae:	4959      	ldr	r1, [pc, #356]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054c2:	4b54      	ldr	r3, [pc, #336]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d0:	4950      	ldr	r1, [pc, #320]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054e4:	4b4b      	ldr	r3, [pc, #300]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f2:	4948      	ldr	r1, [pc, #288]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005506:	4b43      	ldr	r3, [pc, #268]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005514:	493f      	ldr	r1, [pc, #252]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d028      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005528:	4b3a      	ldr	r3, [pc, #232]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005536:	4937      	ldr	r1, [pc, #220]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005546:	d106      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	4b32      	ldr	r3, [pc, #200]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a31      	ldr	r2, [pc, #196]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005552:	60d3      	str	r3, [r2, #12]
 8005554:	e011      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800555a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800555e:	d10c      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	2101      	movs	r1, #1
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f8c8 	bl	80056fc <RCCEx_PLLSAI1_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005570:	7cfb      	ldrb	r3, [r7, #19]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005576:	7cfb      	ldrb	r3, [r7, #19]
 8005578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d028      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005586:	4b23      	ldr	r3, [pc, #140]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005594:	491f      	ldr	r1, [pc, #124]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055a4:	d106      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055b0:	60d3      	str	r3, [r2, #12]
 80055b2:	e011      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055bc:	d10c      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3304      	adds	r3, #4
 80055c2:	2101      	movs	r1, #1
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 f899 	bl	80056fc <RCCEx_PLLSAI1_Config>
 80055ca:	4603      	mov	r3, r0
 80055cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055ce:	7cfb      	ldrb	r3, [r7, #19]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80055d4:	7cfb      	ldrb	r3, [r7, #19]
 80055d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d02b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f2:	4908      	ldr	r1, [pc, #32]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005602:	d109      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005604:	4b03      	ldr	r3, [pc, #12]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a02      	ldr	r2, [pc, #8]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800560e:	60d3      	str	r3, [r2, #12]
 8005610:	e014      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005620:	d10c      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	2101      	movs	r1, #1
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f867 	bl	80056fc <RCCEx_PLLSAI1_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005638:	7cfb      	ldrb	r3, [r7, #19]
 800563a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02f      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005648:	4b2b      	ldr	r3, [pc, #172]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005656:	4928      	ldr	r1, [pc, #160]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005666:	d10d      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3304      	adds	r3, #4
 800566c:	2102      	movs	r1, #2
 800566e:	4618      	mov	r0, r3
 8005670:	f000 f844 	bl	80056fc <RCCEx_PLLSAI1_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d014      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800567e:	7cfb      	ldrb	r3, [r7, #19]
 8005680:	74bb      	strb	r3, [r7, #18]
 8005682:	e011      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	3320      	adds	r3, #32
 8005692:	2102      	movs	r1, #2
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f925 	bl	80058e4 <RCCEx_PLLSAI2_Config>
 800569a:	4603      	mov	r3, r0
 800569c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800569e:	7cfb      	ldrb	r3, [r7, #19]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80056a4:	7cfb      	ldrb	r3, [r7, #19]
 80056a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80056b4:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056c2:	490d      	ldr	r1, [pc, #52]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056d6:	4b08      	ldr	r3, [pc, #32]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056e6:	4904      	ldr	r1, [pc, #16]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80056ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021000 	.word	0x40021000

080056fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800570a:	4b75      	ldr	r3, [pc, #468]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d018      	beq.n	8005748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005716:	4b72      	ldr	r3, [pc, #456]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0203 	and.w	r2, r3, #3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	429a      	cmp	r2, r3
 8005724:	d10d      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
       ||
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800572e:	4b6c      	ldr	r3, [pc, #432]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	091b      	lsrs	r3, r3, #4
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
       ||
 800573e:	429a      	cmp	r2, r3
 8005740:	d047      	beq.n	80057d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e044      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b03      	cmp	r3, #3
 800574e:	d018      	beq.n	8005782 <RCCEx_PLLSAI1_Config+0x86>
 8005750:	2b03      	cmp	r3, #3
 8005752:	d825      	bhi.n	80057a0 <RCCEx_PLLSAI1_Config+0xa4>
 8005754:	2b01      	cmp	r3, #1
 8005756:	d002      	beq.n	800575e <RCCEx_PLLSAI1_Config+0x62>
 8005758:	2b02      	cmp	r3, #2
 800575a:	d009      	beq.n	8005770 <RCCEx_PLLSAI1_Config+0x74>
 800575c:	e020      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800575e:	4b60      	ldr	r3, [pc, #384]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11d      	bne.n	80057a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800576e:	e01a      	b.n	80057a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005770:	4b5b      	ldr	r3, [pc, #364]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005778:	2b00      	cmp	r3, #0
 800577a:	d116      	bne.n	80057aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005780:	e013      	b.n	80057aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005782:	4b57      	ldr	r3, [pc, #348]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10f      	bne.n	80057ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800578e:	4b54      	ldr	r3, [pc, #336]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d109      	bne.n	80057ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800579e:	e006      	b.n	80057ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	73fb      	strb	r3, [r7, #15]
      break;
 80057a4:	e004      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80057ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10d      	bne.n	80057d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057b6:	4b4a      	ldr	r3, [pc, #296]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6819      	ldr	r1, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	430b      	orrs	r3, r1
 80057cc:	4944      	ldr	r1, [pc, #272]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d17d      	bne.n	80058d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80057d8:	4b41      	ldr	r3, [pc, #260]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a40      	ldr	r2, [pc, #256]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057e4:	f7fc fc82 	bl	80020ec <HAL_GetTick>
 80057e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057ea:	e009      	b.n	8005800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ec:	f7fc fc7e 	bl	80020ec <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d902      	bls.n	8005800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	73fb      	strb	r3, [r7, #15]
        break;
 80057fe:	e005      	b.n	800580c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005800:	4b37      	ldr	r3, [pc, #220]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ef      	bne.n	80057ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d160      	bne.n	80058d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d111      	bne.n	800583c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005818:	4b31      	ldr	r3, [pc, #196]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6892      	ldr	r2, [r2, #8]
 8005828:	0211      	lsls	r1, r2, #8
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68d2      	ldr	r2, [r2, #12]
 800582e:	0912      	lsrs	r2, r2, #4
 8005830:	0452      	lsls	r2, r2, #17
 8005832:	430a      	orrs	r2, r1
 8005834:	492a      	ldr	r1, [pc, #168]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	610b      	str	r3, [r1, #16]
 800583a:	e027      	b.n	800588c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d112      	bne.n	8005868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005842:	4b27      	ldr	r3, [pc, #156]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800584a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6892      	ldr	r2, [r2, #8]
 8005852:	0211      	lsls	r1, r2, #8
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6912      	ldr	r2, [r2, #16]
 8005858:	0852      	lsrs	r2, r2, #1
 800585a:	3a01      	subs	r2, #1
 800585c:	0552      	lsls	r2, r2, #21
 800585e:	430a      	orrs	r2, r1
 8005860:	491f      	ldr	r1, [pc, #124]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005862:	4313      	orrs	r3, r2
 8005864:	610b      	str	r3, [r1, #16]
 8005866:	e011      	b.n	800588c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005868:	4b1d      	ldr	r3, [pc, #116]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005870:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	0211      	lsls	r1, r2, #8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6952      	ldr	r2, [r2, #20]
 800587e:	0852      	lsrs	r2, r2, #1
 8005880:	3a01      	subs	r2, #1
 8005882:	0652      	lsls	r2, r2, #25
 8005884:	430a      	orrs	r2, r1
 8005886:	4916      	ldr	r1, [pc, #88]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005888:	4313      	orrs	r3, r2
 800588a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800588c:	4b14      	ldr	r3, [pc, #80]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fc fc28 	bl	80020ec <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058a0:	f7fc fc24 	bl	80020ec <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
          break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058b4:	4b0a      	ldr	r3, [pc, #40]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80058c6:	4b06      	ldr	r3, [pc, #24]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	4904      	ldr	r1, [pc, #16]	@ (80058e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000

080058e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058f2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d018      	beq.n	8005930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058fe:	4b67      	ldr	r3, [pc, #412]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0203 	and.w	r2, r3, #3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d10d      	bne.n	800592a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
       ||
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005916:	4b61      	ldr	r3, [pc, #388]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f003 0307 	and.w	r3, r3, #7
 8005920:	1c5a      	adds	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	685b      	ldr	r3, [r3, #4]
       ||
 8005926:	429a      	cmp	r2, r3
 8005928:	d047      	beq.n	80059ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	73fb      	strb	r3, [r7, #15]
 800592e:	e044      	b.n	80059ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d018      	beq.n	800596a <RCCEx_PLLSAI2_Config+0x86>
 8005938:	2b03      	cmp	r3, #3
 800593a:	d825      	bhi.n	8005988 <RCCEx_PLLSAI2_Config+0xa4>
 800593c:	2b01      	cmp	r3, #1
 800593e:	d002      	beq.n	8005946 <RCCEx_PLLSAI2_Config+0x62>
 8005940:	2b02      	cmp	r3, #2
 8005942:	d009      	beq.n	8005958 <RCCEx_PLLSAI2_Config+0x74>
 8005944:	e020      	b.n	8005988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005946:	4b55      	ldr	r3, [pc, #340]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11d      	bne.n	800598e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005956:	e01a      	b.n	800598e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005958:	4b50      	ldr	r3, [pc, #320]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005960:	2b00      	cmp	r3, #0
 8005962:	d116      	bne.n	8005992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005968:	e013      	b.n	8005992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800596a:	4b4c      	ldr	r3, [pc, #304]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10f      	bne.n	8005996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005976:	4b49      	ldr	r3, [pc, #292]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005986:	e006      	b.n	8005996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
      break;
 800598c:	e004      	b.n	8005998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800598e:	bf00      	nop
 8005990:	e002      	b.n	8005998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005992:	bf00      	nop
 8005994:	e000      	b.n	8005998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005996:	bf00      	nop
    }

    if(status == HAL_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800599e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	3b01      	subs	r3, #1
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	430b      	orrs	r3, r1
 80059b4:	4939      	ldr	r1, [pc, #228]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d167      	bne.n	8005a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80059c0:	4b36      	ldr	r3, [pc, #216]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a35      	ldr	r2, [pc, #212]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80059ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059cc:	f7fc fb8e 	bl	80020ec <HAL_GetTick>
 80059d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059d2:	e009      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80059d4:	f7fc fb8a 	bl	80020ec <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d902      	bls.n	80059e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	73fb      	strb	r3, [r7, #15]
        break;
 80059e6:	e005      	b.n	80059f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80059e8:	4b2c      	ldr	r3, [pc, #176]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ef      	bne.n	80059d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059f4:	7bfb      	ldrb	r3, [r7, #15]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d14a      	bne.n	8005a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d111      	bne.n	8005a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a00:	4b26      	ldr	r3, [pc, #152]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6892      	ldr	r2, [r2, #8]
 8005a10:	0211      	lsls	r1, r2, #8
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68d2      	ldr	r2, [r2, #12]
 8005a16:	0912      	lsrs	r2, r2, #4
 8005a18:	0452      	lsls	r2, r2, #17
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	491f      	ldr	r1, [pc, #124]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	614b      	str	r3, [r1, #20]
 8005a22:	e011      	b.n	8005a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a24:	4b1d      	ldr	r3, [pc, #116]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6892      	ldr	r2, [r2, #8]
 8005a34:	0211      	lsls	r1, r2, #8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	6912      	ldr	r2, [r2, #16]
 8005a3a:	0852      	lsrs	r2, r2, #1
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	0652      	lsls	r2, r2, #25
 8005a40:	430a      	orrs	r2, r1
 8005a42:	4916      	ldr	r1, [pc, #88]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a48:	4b14      	ldr	r3, [pc, #80]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a13      	ldr	r2, [pc, #76]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fc fb4a 	bl	80020ec <HAL_GetTick>
 8005a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a5a:	e009      	b.n	8005a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a5c:	f7fc fb46 	bl	80020ec <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d902      	bls.n	8005a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a6e:	e005      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a70:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ef      	beq.n	8005a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d106      	bne.n	8005a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a82:	4b06      	ldr	r3, [pc, #24]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a84:	695a      	ldr	r2, [r3, #20]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	4904      	ldr	r1, [pc, #16]	@ (8005a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000

08005aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e095      	b.n	8005bde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d108      	bne.n	8005acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ac2:	d009      	beq.n	8005ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61da      	str	r2, [r3, #28]
 8005aca:	e005      	b.n	8005ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d106      	bne.n	8005af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7fb faec 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b18:	d902      	bls.n	8005b20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e002      	b.n	8005b26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b2e:	d007      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b38:	d002      	beq.n	8005b40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b82:	ea42 0103 	orr.w	r1, r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	0c1b      	lsrs	r3, r3, #16
 8005b9c:	f003 0204 	and.w	r2, r3, #4
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba4:	f003 0310 	and.w	r3, r3, #16
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005bbc:	ea42 0103 	orr.w	r1, r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b082      	sub	sp, #8
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e049      	b.n	8005c8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d106      	bne.n	8005c12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7fc f89d 	bl	8001d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f000 fe4f 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3708      	adds	r7, #8
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e04f      	b.n	8005d4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0201 	orr.w	r2, r2, #1
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a23      	ldr	r2, [pc, #140]	@ (8005d58 <HAL_TIM_Base_Start_IT+0xc4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d01d      	beq.n	8005d0a <HAL_TIM_Base_Start_IT+0x76>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cd6:	d018      	beq.n	8005d0a <HAL_TIM_Base_Start_IT+0x76>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8005d5c <HAL_TIM_Base_Start_IT+0xc8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d013      	beq.n	8005d0a <HAL_TIM_Base_Start_IT+0x76>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d60 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00e      	beq.n	8005d0a <HAL_TIM_Base_Start_IT+0x76>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1c      	ldr	r2, [pc, #112]	@ (8005d64 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d009      	beq.n	8005d0a <HAL_TIM_Base_Start_IT+0x76>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8005d68 <HAL_TIM_Base_Start_IT+0xd4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d004      	beq.n	8005d0a <HAL_TIM_Base_Start_IT+0x76>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a19      	ldr	r2, [pc, #100]	@ (8005d6c <HAL_TIM_Base_Start_IT+0xd8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d115      	bne.n	8005d36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	4b17      	ldr	r3, [pc, #92]	@ (8005d70 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d015      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0xb4>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d22:	d011      	beq.n	8005d48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d34:	e008      	b.n	8005d48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0201 	orr.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e000      	b.n	8005d4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	40012c00 	.word	0x40012c00
 8005d5c:	40000400 	.word	0x40000400
 8005d60:	40000800 	.word	0x40000800
 8005d64:	40000c00 	.word	0x40000c00
 8005d68:	40013400 	.word	0x40013400
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	00010007 	.word	0x00010007

08005d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d101      	bne.n	8005d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e049      	b.n	8005e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d106      	bne.n	8005da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 f841 	bl	8005e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3304      	adds	r3, #4
 8005db0:	4619      	mov	r1, r3
 8005db2:	4610      	mov	r0, r2
 8005db4:	f000 fd88 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <HAL_TIM_PWM_Start+0x24>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	bf14      	ite	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	2300      	moveq	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	e03c      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x9e>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d109      	bne.n	8005e76 <HAL_TIM_PWM_Start+0x3e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	bf14      	ite	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	2300      	moveq	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	e02f      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x9e>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d109      	bne.n	8005e90 <HAL_TIM_PWM_Start+0x58>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	e022      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x9e>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2b0c      	cmp	r3, #12
 8005e94:	d109      	bne.n	8005eaa <HAL_TIM_PWM_Start+0x72>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	bf14      	ite	ne
 8005ea2:	2301      	movne	r3, #1
 8005ea4:	2300      	moveq	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	e015      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x9e>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b10      	cmp	r3, #16
 8005eae:	d109      	bne.n	8005ec4 <HAL_TIM_PWM_Start+0x8c>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	e008      	b.n	8005ed6 <HAL_TIM_PWM_Start+0x9e>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	bf14      	ite	ne
 8005ed0:	2301      	movne	r3, #1
 8005ed2:	2300      	moveq	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e09c      	b.n	8006018 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <HAL_TIM_PWM_Start+0xb6>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eec:	e023      	b.n	8005f36 <HAL_TIM_PWM_Start+0xfe>
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	2b04      	cmp	r3, #4
 8005ef2:	d104      	bne.n	8005efe <HAL_TIM_PWM_Start+0xc6>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005efc:	e01b      	b.n	8005f36 <HAL_TIM_PWM_Start+0xfe>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d104      	bne.n	8005f0e <HAL_TIM_PWM_Start+0xd6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f0c:	e013      	b.n	8005f36 <HAL_TIM_PWM_Start+0xfe>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b0c      	cmp	r3, #12
 8005f12:	d104      	bne.n	8005f1e <HAL_TIM_PWM_Start+0xe6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f1c:	e00b      	b.n	8005f36 <HAL_TIM_PWM_Start+0xfe>
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	2b10      	cmp	r3, #16
 8005f22:	d104      	bne.n	8005f2e <HAL_TIM_PWM_Start+0xf6>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f2c:	e003      	b.n	8005f36 <HAL_TIM_PWM_Start+0xfe>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2202      	movs	r2, #2
 8005f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 f8d8 	bl	80070f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a35      	ldr	r2, [pc, #212]	@ (8006020 <HAL_TIM_PWM_Start+0x1e8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x13e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a34      	ldr	r2, [pc, #208]	@ (8006024 <HAL_TIM_PWM_Start+0x1ec>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x13e>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a32      	ldr	r2, [pc, #200]	@ (8006028 <HAL_TIM_PWM_Start+0x1f0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x13e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a31      	ldr	r2, [pc, #196]	@ (800602c <HAL_TIM_PWM_Start+0x1f4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x13e>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2f      	ldr	r2, [pc, #188]	@ (8006030 <HAL_TIM_PWM_Start+0x1f8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d101      	bne.n	8005f7a <HAL_TIM_PWM_Start+0x142>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <HAL_TIM_PWM_Start+0x144>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a22      	ldr	r2, [pc, #136]	@ (8006020 <HAL_TIM_PWM_Start+0x1e8>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d01d      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x19e>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa2:	d018      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x19e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a22      	ldr	r2, [pc, #136]	@ (8006034 <HAL_TIM_PWM_Start+0x1fc>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x19e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a21      	ldr	r2, [pc, #132]	@ (8006038 <HAL_TIM_PWM_Start+0x200>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x19e>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800603c <HAL_TIM_PWM_Start+0x204>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x19e>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <HAL_TIM_PWM_Start+0x1ec>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x19e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a15      	ldr	r2, [pc, #84]	@ (8006028 <HAL_TIM_PWM_Start+0x1f0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d115      	bne.n	8006002 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	4b18      	ldr	r3, [pc, #96]	@ (8006040 <HAL_TIM_PWM_Start+0x208>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b06      	cmp	r3, #6
 8005fe6:	d015      	beq.n	8006014 <HAL_TIM_PWM_Start+0x1dc>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fee:	d011      	beq.n	8006014 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006000:	e008      	b.n	8006014 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0201 	orr.w	r2, r2, #1
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e000      	b.n	8006016 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400
 8006028:	40014000 	.word	0x40014000
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	00010007 	.word	0x00010007

08006044 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d101      	bne.n	8006058 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e097      	b.n	8006188 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d106      	bne.n	8006072 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fb fe2d 	bl	8001ccc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6812      	ldr	r2, [r2, #0]
 8006084:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006088:	f023 0307 	bic.w	r3, r3, #7
 800608c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f000 fc15 	bl	80068c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	4313      	orrs	r3, r2
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80060e4:	f023 030c 	bic.w	r3, r3, #12
 80060e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	4313      	orrs	r3, r2
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	691b      	ldr	r3, [r3, #16]
 800610c:	011a      	lsls	r2, r3, #4
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	031b      	lsls	r3, r3, #12
 8006114:	4313      	orrs	r3, r2
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006122:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800612a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	4313      	orrs	r3, r2
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d110      	bne.n	80061e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d102      	bne.n	80061cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80061c6:	7b7b      	ldrb	r3, [r7, #13]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d001      	beq.n	80061d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e069      	b.n	80062a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2202      	movs	r2, #2
 80061dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061e0:	e031      	b.n	8006246 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b04      	cmp	r3, #4
 80061e6:	d110      	bne.n	800620a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061e8:	7bbb      	ldrb	r3, [r7, #14]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d102      	bne.n	80061f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061ee:	7b3b      	ldrb	r3, [r7, #12]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d001      	beq.n	80061f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e055      	b.n	80062a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006208:	e01d      	b.n	8006246 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d108      	bne.n	8006222 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006210:	7bbb      	ldrb	r3, [r7, #14]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d105      	bne.n	8006222 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006216:	7b7b      	ldrb	r3, [r7, #13]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d102      	bne.n	8006222 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800621c:	7b3b      	ldrb	r3, [r7, #12]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d001      	beq.n	8006226 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e03e      	b.n	80062a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_TIM_Encoder_Start+0xc4>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b04      	cmp	r3, #4
 8006250:	d008      	beq.n	8006264 <HAL_TIM_Encoder_Start+0xd4>
 8006252:	e00f      	b.n	8006274 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2201      	movs	r2, #1
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f000 ff49 	bl	80070f4 <TIM_CCxChannelCmd>
      break;
 8006262:	e016      	b.n	8006292 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2201      	movs	r2, #1
 800626a:	2104      	movs	r1, #4
 800626c:	4618      	mov	r0, r3
 800626e:	f000 ff41 	bl	80070f4 <TIM_CCxChannelCmd>
      break;
 8006272:	e00e      	b.n	8006292 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2201      	movs	r2, #1
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 ff39 	bl	80070f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	2104      	movs	r1, #4
 800628a:	4618      	mov	r0, r3
 800628c:	f000 ff32 	bl	80070f4 <TIM_CCxChannelCmd>
      break;
 8006290:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0201 	orr.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d020      	beq.n	8006310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01b      	beq.n	8006310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f06f 0202 	mvn.w	r2, #2
 80062e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	f003 0303 	and.w	r3, r3, #3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fac7 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 80062fc:	e005      	b.n	800630a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fab9 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 faca 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d020      	beq.n	800635c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01b      	beq.n	800635c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0204 	mvn.w	r2, #4
 800632c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 faa1 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 8006348:	e005      	b.n	8006356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 fa93 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 faa4 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d020      	beq.n	80063a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01b      	beq.n	80063a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0208 	mvn.w	r2, #8
 8006378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2204      	movs	r2, #4
 800637e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fa7b 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 8006394:	e005      	b.n	80063a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa6d 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fa7e 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f003 0310 	and.w	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d020      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d01b      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0210 	mvn.w	r2, #16
 80063c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2208      	movs	r2, #8
 80063ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa55 	bl	800688a <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa47 	bl	8006876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa58 	bl	800689e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0201 	mvn.w	r2, #1
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fa fe06 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641e:	2b00      	cmp	r3, #0
 8006420:	d104      	bne.n	800642c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00c      	beq.n	8006446 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006432:	2b00      	cmp	r3, #0
 8006434:	d007      	beq.n	8006446 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800643e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ff0f 	bl	8007264 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00c      	beq.n	800646a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006456:	2b00      	cmp	r3, #0
 8006458:	d007      	beq.n	800646a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 ff07 	bl	8007278 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00c      	beq.n	800648e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647a:	2b00      	cmp	r3, #0
 800647c:	d007      	beq.n	800648e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fa12 	bl	80068b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d00c      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0220 	mvn.w	r2, #32
 80064aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fecf 	bl	8007250 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064b2:	bf00      	nop
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e0ff      	b.n	80066da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b14      	cmp	r3, #20
 80064e6:	f200 80f0 	bhi.w	80066ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064ea:	a201      	add	r2, pc, #4	@ (adr r2, 80064f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006545 	.word	0x08006545
 80064f4:	080066cb 	.word	0x080066cb
 80064f8:	080066cb 	.word	0x080066cb
 80064fc:	080066cb 	.word	0x080066cb
 8006500:	08006585 	.word	0x08006585
 8006504:	080066cb 	.word	0x080066cb
 8006508:	080066cb 	.word	0x080066cb
 800650c:	080066cb 	.word	0x080066cb
 8006510:	080065c7 	.word	0x080065c7
 8006514:	080066cb 	.word	0x080066cb
 8006518:	080066cb 	.word	0x080066cb
 800651c:	080066cb 	.word	0x080066cb
 8006520:	08006607 	.word	0x08006607
 8006524:	080066cb 	.word	0x080066cb
 8006528:	080066cb 	.word	0x080066cb
 800652c:	080066cb 	.word	0x080066cb
 8006530:	08006649 	.word	0x08006649
 8006534:	080066cb 	.word	0x080066cb
 8006538:	080066cb 	.word	0x080066cb
 800653c:	080066cb 	.word	0x080066cb
 8006540:	08006689 	.word	0x08006689
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fa62 	bl	8006a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0208 	orr.w	r2, r2, #8
 800655e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0204 	bic.w	r2, r2, #4
 800656e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6999      	ldr	r1, [r3, #24]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	619a      	str	r2, [r3, #24]
      break;
 8006582:	e0a5      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fad2 	bl	8006b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6999      	ldr	r1, [r3, #24]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	619a      	str	r2, [r3, #24]
      break;
 80065c4:	e084      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fb3b 	bl	8006c48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0208 	orr.w	r2, r2, #8
 80065e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0204 	bic.w	r2, r2, #4
 80065f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69d9      	ldr	r1, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	61da      	str	r2, [r3, #28]
      break;
 8006604:	e064      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fba3 	bl	8006d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69d9      	ldr	r1, [r3, #28]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	021a      	lsls	r2, r3, #8
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	61da      	str	r2, [r3, #28]
      break;
 8006646:	e043      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fbec 	bl	8006e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0208 	orr.w	r2, r2, #8
 8006662:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0204 	bic.w	r2, r2, #4
 8006672:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006686:	e023      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fc30 	bl	8006ef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	021a      	lsls	r2, r3, #8
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80066c8:	e002      	b.n	80066d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	75fb      	strb	r3, [r7, #23]
      break;
 80066ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop

080066e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ee:	2300      	movs	r3, #0
 80066f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIM_ConfigClockSource+0x1c>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e0b6      	b.n	800686e <HAL_TIM_ConfigClockSource+0x18a>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800671e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800672a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800673c:	d03e      	beq.n	80067bc <HAL_TIM_ConfigClockSource+0xd8>
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006742:	f200 8087 	bhi.w	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	f000 8086 	beq.w	800685a <HAL_TIM_ConfigClockSource+0x176>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006752:	d87f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006754:	2b70      	cmp	r3, #112	@ 0x70
 8006756:	d01a      	beq.n	800678e <HAL_TIM_ConfigClockSource+0xaa>
 8006758:	2b70      	cmp	r3, #112	@ 0x70
 800675a:	d87b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 800675c:	2b60      	cmp	r3, #96	@ 0x60
 800675e:	d050      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x11e>
 8006760:	2b60      	cmp	r3, #96	@ 0x60
 8006762:	d877      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006764:	2b50      	cmp	r3, #80	@ 0x50
 8006766:	d03c      	beq.n	80067e2 <HAL_TIM_ConfigClockSource+0xfe>
 8006768:	2b50      	cmp	r3, #80	@ 0x50
 800676a:	d873      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 800676c:	2b40      	cmp	r3, #64	@ 0x40
 800676e:	d058      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0x13e>
 8006770:	2b40      	cmp	r3, #64	@ 0x40
 8006772:	d86f      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006774:	2b30      	cmp	r3, #48	@ 0x30
 8006776:	d064      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 8006778:	2b30      	cmp	r3, #48	@ 0x30
 800677a:	d86b      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 800677c:	2b20      	cmp	r3, #32
 800677e:	d060      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d867      	bhi.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d05c      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 8006788:	2b10      	cmp	r3, #16
 800678a:	d05a      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x15e>
 800678c:	e062      	b.n	8006854 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800679e:	f000 fc89 	bl	80070b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	609a      	str	r2, [r3, #8]
      break;
 80067ba:	e04f      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067cc:	f000 fc72 	bl	80070b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	689a      	ldr	r2, [r3, #8]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067de:	609a      	str	r2, [r3, #8]
      break;
 80067e0:	e03c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ee:	461a      	mov	r2, r3
 80067f0:	f000 fbe6 	bl	8006fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2150      	movs	r1, #80	@ 0x50
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 fc3f 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006800:	e02c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800680e:	461a      	mov	r2, r3
 8006810:	f000 fc05 	bl	800701e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2160      	movs	r1, #96	@ 0x60
 800681a:	4618      	mov	r0, r3
 800681c:	f000 fc2f 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006820:	e01c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	461a      	mov	r2, r3
 8006830:	f000 fbc6 	bl	8006fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2140      	movs	r1, #64	@ 0x40
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fc1f 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006840:	e00c      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	4610      	mov	r0, r2
 800684e:	f000 fc16 	bl	800707e <TIM_ITRx_SetConfig>
      break;
 8006852:	e003      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e000      	b.n	800685c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800685a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800686c:	7bfb      	ldrb	r3, [r7, #15]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006876:	b480      	push	{r7}
 8006878:	b083      	sub	sp, #12
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800688a:	b480      	push	{r7}
 800688c:	b083      	sub	sp, #12
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b2:	b480      	push	{r7}
 80068b4:	b083      	sub	sp, #12
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a46      	ldr	r2, [pc, #280]	@ (80069f4 <TIM_Base_SetConfig+0x12c>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e6:	d00f      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a43      	ldr	r2, [pc, #268]	@ (80069f8 <TIM_Base_SetConfig+0x130>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a42      	ldr	r2, [pc, #264]	@ (80069fc <TIM_Base_SetConfig+0x134>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a41      	ldr	r2, [pc, #260]	@ (8006a00 <TIM_Base_SetConfig+0x138>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a40      	ldr	r2, [pc, #256]	@ (8006a04 <TIM_Base_SetConfig+0x13c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800690e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a35      	ldr	r2, [pc, #212]	@ (80069f4 <TIM_Base_SetConfig+0x12c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d01f      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006928:	d01b      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a32      	ldr	r2, [pc, #200]	@ (80069f8 <TIM_Base_SetConfig+0x130>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d017      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a31      	ldr	r2, [pc, #196]	@ (80069fc <TIM_Base_SetConfig+0x134>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a30      	ldr	r2, [pc, #192]	@ (8006a00 <TIM_Base_SetConfig+0x138>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d00f      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a2f      	ldr	r2, [pc, #188]	@ (8006a04 <TIM_Base_SetConfig+0x13c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00b      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a2e      	ldr	r2, [pc, #184]	@ (8006a08 <TIM_Base_SetConfig+0x140>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a2d      	ldr	r2, [pc, #180]	@ (8006a0c <TIM_Base_SetConfig+0x144>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <TIM_Base_SetConfig+0x9a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a10 <TIM_Base_SetConfig+0x148>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d108      	bne.n	8006974 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4313      	orrs	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a16      	ldr	r2, [pc, #88]	@ (80069f4 <TIM_Base_SetConfig+0x12c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00f      	beq.n	80069c0 <TIM_Base_SetConfig+0xf8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a18      	ldr	r2, [pc, #96]	@ (8006a04 <TIM_Base_SetConfig+0x13c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <TIM_Base_SetConfig+0xf8>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a17      	ldr	r2, [pc, #92]	@ (8006a08 <TIM_Base_SetConfig+0x140>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d007      	beq.n	80069c0 <TIM_Base_SetConfig+0xf8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a16      	ldr	r2, [pc, #88]	@ (8006a0c <TIM_Base_SetConfig+0x144>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0xf8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a15      	ldr	r2, [pc, #84]	@ (8006a10 <TIM_Base_SetConfig+0x148>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d105      	bne.n	80069e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f023 0201 	bic.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	611a      	str	r2, [r3, #16]
  }
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40000c00 	.word	0x40000c00
 8006a04:	40013400 	.word	0x40013400
 8006a08:	40014000 	.word	0x40014000
 8006a0c:	40014400 	.word	0x40014400
 8006a10:	40014800 	.word	0x40014800

08006a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	f023 0201 	bic.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0303 	bic.w	r3, r3, #3
 8006a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f023 0302 	bic.w	r3, r3, #2
 8006a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8006b20 <TIM_OC1_SetConfig+0x10c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d00f      	beq.n	8006a94 <TIM_OC1_SetConfig+0x80>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a2b      	ldr	r2, [pc, #172]	@ (8006b24 <TIM_OC1_SetConfig+0x110>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00b      	beq.n	8006a94 <TIM_OC1_SetConfig+0x80>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006b28 <TIM_OC1_SetConfig+0x114>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d007      	beq.n	8006a94 <TIM_OC1_SetConfig+0x80>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a29      	ldr	r2, [pc, #164]	@ (8006b2c <TIM_OC1_SetConfig+0x118>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d003      	beq.n	8006a94 <TIM_OC1_SetConfig+0x80>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a28      	ldr	r2, [pc, #160]	@ (8006b30 <TIM_OC1_SetConfig+0x11c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d10c      	bne.n	8006aae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f023 0308 	bic.w	r3, r3, #8
 8006a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f023 0304 	bic.w	r3, r3, #4
 8006aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <TIM_OC1_SetConfig+0x10c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00f      	beq.n	8006ad6 <TIM_OC1_SetConfig+0xc2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b24 <TIM_OC1_SetConfig+0x110>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d00b      	beq.n	8006ad6 <TIM_OC1_SetConfig+0xc2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a19      	ldr	r2, [pc, #100]	@ (8006b28 <TIM_OC1_SetConfig+0x114>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d007      	beq.n	8006ad6 <TIM_OC1_SetConfig+0xc2>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a18      	ldr	r2, [pc, #96]	@ (8006b2c <TIM_OC1_SetConfig+0x118>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d003      	beq.n	8006ad6 <TIM_OC1_SetConfig+0xc2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a17      	ldr	r2, [pc, #92]	@ (8006b30 <TIM_OC1_SetConfig+0x11c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d111      	bne.n	8006afa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	621a      	str	r2, [r3, #32]
}
 8006b14:	bf00      	nop
 8006b16:	371c      	adds	r7, #28
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	40012c00 	.word	0x40012c00
 8006b24:	40013400 	.word	0x40013400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40014400 	.word	0x40014400
 8006b30:	40014800 	.word	0x40014800

08006b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1b      	ldr	r3, [r3, #32]
 8006b48:	f023 0210 	bic.w	r2, r3, #16
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	021b      	lsls	r3, r3, #8
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	f023 0320 	bic.w	r3, r3, #32
 8006b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a28      	ldr	r2, [pc, #160]	@ (8006c34 <TIM_OC2_SetConfig+0x100>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC2_SetConfig+0x6c>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a27      	ldr	r2, [pc, #156]	@ (8006c38 <TIM_OC2_SetConfig+0x104>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10d      	bne.n	8006bbc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	011b      	lsls	r3, r3, #4
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8006c34 <TIM_OC2_SetConfig+0x100>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00f      	beq.n	8006be4 <TIM_OC2_SetConfig+0xb0>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c38 <TIM_OC2_SetConfig+0x104>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <TIM_OC2_SetConfig+0xb0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1b      	ldr	r2, [pc, #108]	@ (8006c3c <TIM_OC2_SetConfig+0x108>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d007      	beq.n	8006be4 <TIM_OC2_SetConfig+0xb0>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8006c40 <TIM_OC2_SetConfig+0x10c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_OC2_SetConfig+0xb0>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a19      	ldr	r2, [pc, #100]	@ (8006c44 <TIM_OC2_SetConfig+0x110>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d113      	bne.n	8006c0c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	695b      	ldr	r3, [r3, #20]
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	621a      	str	r2, [r3, #32]
}
 8006c26:	bf00      	nop
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	40012c00 	.word	0x40012c00
 8006c38:	40013400 	.word	0x40013400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40014400 	.word	0x40014400
 8006c44:	40014800 	.word	0x40014800

08006c48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69db      	ldr	r3, [r3, #28]
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0303 	bic.w	r3, r3, #3
 8006c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a27      	ldr	r2, [pc, #156]	@ (8006d44 <TIM_OC3_SetConfig+0xfc>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d003      	beq.n	8006cb2 <TIM_OC3_SetConfig+0x6a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a26      	ldr	r2, [pc, #152]	@ (8006d48 <TIM_OC3_SetConfig+0x100>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d10d      	bne.n	8006cce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <TIM_OC3_SetConfig+0xfc>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00f      	beq.n	8006cf6 <TIM_OC3_SetConfig+0xae>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a1b      	ldr	r2, [pc, #108]	@ (8006d48 <TIM_OC3_SetConfig+0x100>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00b      	beq.n	8006cf6 <TIM_OC3_SetConfig+0xae>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d4c <TIM_OC3_SetConfig+0x104>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <TIM_OC3_SetConfig+0xae>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a19      	ldr	r2, [pc, #100]	@ (8006d50 <TIM_OC3_SetConfig+0x108>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d003      	beq.n	8006cf6 <TIM_OC3_SetConfig+0xae>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a18      	ldr	r2, [pc, #96]	@ (8006d54 <TIM_OC3_SetConfig+0x10c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d113      	bne.n	8006d1e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	011b      	lsls	r3, r3, #4
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	621a      	str	r2, [r3, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	40012c00 	.word	0x40012c00
 8006d48:	40013400 	.word	0x40013400
 8006d4c:	40014000 	.word	0x40014000
 8006d50:	40014400 	.word	0x40014400
 8006d54:	40014800 	.word	0x40014800

08006d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	021b      	lsls	r3, r3, #8
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	031b      	lsls	r3, r3, #12
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	4313      	orrs	r3, r2
 8006db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a18      	ldr	r2, [pc, #96]	@ (8006e18 <TIM_OC4_SetConfig+0xc0>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00f      	beq.n	8006ddc <TIM_OC4_SetConfig+0x84>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a17      	ldr	r2, [pc, #92]	@ (8006e1c <TIM_OC4_SetConfig+0xc4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d00b      	beq.n	8006ddc <TIM_OC4_SetConfig+0x84>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a16      	ldr	r2, [pc, #88]	@ (8006e20 <TIM_OC4_SetConfig+0xc8>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d007      	beq.n	8006ddc <TIM_OC4_SetConfig+0x84>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a15      	ldr	r2, [pc, #84]	@ (8006e24 <TIM_OC4_SetConfig+0xcc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d003      	beq.n	8006ddc <TIM_OC4_SetConfig+0x84>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a14      	ldr	r2, [pc, #80]	@ (8006e28 <TIM_OC4_SetConfig+0xd0>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d109      	bne.n	8006df0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006de2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	695b      	ldr	r3, [r3, #20]
 8006de8:	019b      	lsls	r3, r3, #6
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40013400 	.word	0x40013400
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <TIM_OC5_SetConfig+0xb4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a16      	ldr	r2, [pc, #88]	@ (8006ee4 <TIM_OC5_SetConfig+0xb8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a15      	ldr	r2, [pc, #84]	@ (8006ee8 <TIM_OC5_SetConfig+0xbc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a14      	ldr	r2, [pc, #80]	@ (8006eec <TIM_OC5_SetConfig+0xc0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_OC5_SetConfig+0x7a>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	@ (8006ef0 <TIM_OC5_SetConfig+0xc4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d109      	bne.n	8006eba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	697a      	ldr	r2, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	685a      	ldr	r2, [r3, #4]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	621a      	str	r2, [r3, #32]
}
 8006ed4:	bf00      	nop
 8006ed6:	371c      	adds	r7, #28
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40013400 	.word	0x40013400
 8006ee8:	40014000 	.word	0x40014000
 8006eec:	40014400 	.word	0x40014400
 8006ef0:	40014800 	.word	0x40014800

08006ef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	021b      	lsls	r3, r3, #8
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	051b      	lsls	r3, r3, #20
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <TIM_OC6_SetConfig+0xb8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00f      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a17      	ldr	r2, [pc, #92]	@ (8006fb0 <TIM_OC6_SetConfig+0xbc>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d00b      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a16      	ldr	r2, [pc, #88]	@ (8006fb4 <TIM_OC6_SetConfig+0xc0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d007      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a15      	ldr	r2, [pc, #84]	@ (8006fb8 <TIM_OC6_SetConfig+0xc4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC6_SetConfig+0x7c>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a14      	ldr	r2, [pc, #80]	@ (8006fbc <TIM_OC6_SetConfig+0xc8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d109      	bne.n	8006f84 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40013400 	.word	0x40013400
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400
 8006fbc:	40014800 	.word	0x40014800

08006fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f023 0201 	bic.w	r2, r3, #1
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	011b      	lsls	r3, r3, #4
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f023 030a 	bic.w	r3, r3, #10
 8006ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	4313      	orrs	r3, r2
 8007004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	621a      	str	r2, [r3, #32]
}
 8007012:	bf00      	nop
 8007014:	371c      	adds	r7, #28
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800701e:	b480      	push	{r7}
 8007020:	b087      	sub	sp, #28
 8007022:	af00      	add	r7, sp, #0
 8007024:	60f8      	str	r0, [r7, #12]
 8007026:	60b9      	str	r1, [r7, #8]
 8007028:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f023 0210 	bic.w	r2, r3, #16
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800705a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	621a      	str	r2, [r3, #32]
}
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr

0800707e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800707e:	b480      	push	{r7}
 8007080:	b085      	sub	sp, #20
 8007082:	af00      	add	r7, sp, #0
 8007084:	6078      	str	r0, [r7, #4]
 8007086:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007094:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	f043 0307 	orr.w	r3, r3, #7
 80070a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	609a      	str	r2, [r3, #8]
}
 80070a8:	bf00      	nop
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	021a      	lsls	r2, r3, #8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4313      	orrs	r3, r2
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	4313      	orrs	r3, r2
 80070e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	609a      	str	r2, [r3, #8]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f003 031f 	and.w	r3, r3, #31
 8007106:	2201      	movs	r2, #1
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6a1a      	ldr	r2, [r3, #32]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	43db      	mvns	r3, r3
 8007116:	401a      	ands	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6a1a      	ldr	r2, [r3, #32]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	fa01 f303 	lsl.w	r3, r1, r3
 800712c:	431a      	orrs	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	621a      	str	r2, [r3, #32]
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007150:	2b01      	cmp	r3, #1
 8007152:	d101      	bne.n	8007158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007154:	2302      	movs	r3, #2
 8007156:	e068      	b.n	800722a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a2e      	ldr	r2, [pc, #184]	@ (8007238 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d004      	beq.n	800718c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a2d      	ldr	r2, [pc, #180]	@ (800723c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d108      	bne.n	800719e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007192:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007238 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d01d      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ca:	d018      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007240 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d013      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a1a      	ldr	r2, [pc, #104]	@ (8007244 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d00e      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a18      	ldr	r2, [pc, #96]	@ (8007248 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d009      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a13      	ldr	r2, [pc, #76]	@ (800723c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d004      	beq.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a14      	ldr	r2, [pc, #80]	@ (800724c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d10c      	bne.n	8007218 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007204:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4313      	orrs	r3, r2
 800720e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	40012c00 	.word	0x40012c00
 800723c:	40013400 	.word	0x40013400
 8007240:	40000400 	.word	0x40000400
 8007244:	40000800 	.word	0x40000800
 8007248:	40000c00 	.word	0x40000c00
 800724c:	40014000 	.word	0x40014000

08007250 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e040      	b.n	8007320 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fa fe1c 	bl	8001eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2224      	movs	r2, #36	@ 0x24
 80072b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0201 	bic.w	r2, r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fc32 	bl	8007b3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f977 	bl	80075cc <UART_SetConfig>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d101      	bne.n	80072e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e01b      	b.n	8007320 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fcb1 	bl	8007c80 <UART_CheckIdleState>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3708      	adds	r7, #8
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b08a      	sub	sp, #40	@ 0x28
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	4613      	mov	r3, r2
 8007336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800733c:	2b20      	cmp	r3, #32
 800733e:	d177      	bne.n	8007430 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_UART_Transmit+0x24>
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e070      	b.n	8007432 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2221      	movs	r2, #33	@ 0x21
 800735c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800735e:	f7fa fec5 	bl	80020ec <HAL_GetTick>
 8007362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	88fa      	ldrh	r2, [r7, #6]
 8007368:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737c:	d108      	bne.n	8007390 <HAL_UART_Transmit+0x68>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d104      	bne.n	8007390 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e003      	b.n	8007398 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007398:	e02f      	b.n	80073fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2200      	movs	r2, #0
 80073a2:	2180      	movs	r1, #128	@ 0x80
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fd13 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e03b      	b.n	8007432 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	881a      	ldrh	r2, [r3, #0]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073cc:	b292      	uxth	r2, r2
 80073ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	3302      	adds	r3, #2
 80073d4:	61bb      	str	r3, [r7, #24]
 80073d6:	e007      	b.n	80073e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	781a      	ldrb	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	3301      	adds	r3, #1
 80073e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1c9      	bne.n	800739a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2200      	movs	r2, #0
 800740e:	2140      	movs	r1, #64	@ 0x40
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fcdd 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e005      	b.n	8007432 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	e000      	b.n	8007432 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007430:	2302      	movs	r3, #2
  }
}
 8007432:	4618      	mov	r0, r3
 8007434:	3720      	adds	r7, #32
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b08a      	sub	sp, #40	@ 0x28
 800743e:	af02      	add	r7, sp, #8
 8007440:	60f8      	str	r0, [r7, #12]
 8007442:	60b9      	str	r1, [r7, #8]
 8007444:	603b      	str	r3, [r7, #0]
 8007446:	4613      	mov	r3, r2
 8007448:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007450:	2b20      	cmp	r3, #32
 8007452:	f040 80b6 	bne.w	80075c2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_UART_Receive+0x28>
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e0ae      	b.n	80075c4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2222      	movs	r2, #34	@ 0x22
 8007472:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800747c:	f7fa fe36 	bl	80020ec <HAL_GetTick>
 8007480:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	88fa      	ldrh	r2, [r7, #6]
 8007486:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	88fa      	ldrh	r2, [r7, #6]
 800748e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749a:	d10e      	bne.n	80074ba <HAL_UART_Receive+0x80>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <HAL_UART_Receive+0x76>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074ae:	e02d      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	22ff      	movs	r2, #255	@ 0xff
 80074b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074b8:	e028      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <HAL_UART_Receive+0xa4>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d104      	bne.n	80074d4 <HAL_UART_Receive+0x9a>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	22ff      	movs	r2, #255	@ 0xff
 80074ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074d2:	e01b      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	227f      	movs	r2, #127	@ 0x7f
 80074d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074dc:	e016      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074e6:	d10d      	bne.n	8007504 <HAL_UART_Receive+0xca>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <HAL_UART_Receive+0xc0>
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	227f      	movs	r2, #127	@ 0x7f
 80074f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074f8:	e008      	b.n	800750c <HAL_UART_Receive+0xd2>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	223f      	movs	r2, #63	@ 0x3f
 80074fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007502:	e003      	b.n	800750c <HAL_UART_Receive+0xd2>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007512:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800751c:	d108      	bne.n	8007530 <HAL_UART_Receive+0xf6>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	61bb      	str	r3, [r7, #24]
 800752e:	e003      	b.n	8007538 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007538:	e037      	b.n	80075aa <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	2120      	movs	r1, #32
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fc43 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e033      	b.n	80075c4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10c      	bne.n	800757c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007568:	b29a      	uxth	r2, r3
 800756a:	8a7b      	ldrh	r3, [r7, #18]
 800756c:	4013      	ands	r3, r2
 800756e:	b29a      	uxth	r2, r3
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	3302      	adds	r3, #2
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e00d      	b.n	8007598 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007582:	b29b      	uxth	r3, r3
 8007584:	b2da      	uxtb	r2, r3
 8007586:	8a7b      	ldrh	r3, [r7, #18]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	4013      	ands	r3, r2
 800758c:	b2da      	uxtb	r2, r3
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	3301      	adds	r3, #1
 8007596:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1c1      	bne.n	800753a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	e000      	b.n	80075c4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075d0:	b08a      	sub	sp, #40	@ 0x28
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	431a      	orrs	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	431a      	orrs	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	4ba4      	ldr	r3, [pc, #656]	@ (800788c <UART_SetConfig+0x2c0>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007604:	430b      	orrs	r3, r1
 8007606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a99      	ldr	r2, [pc, #612]	@ (8007890 <UART_SetConfig+0x2c4>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d004      	beq.n	8007638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6a1b      	ldr	r3, [r3, #32]
 8007632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007634:	4313      	orrs	r3, r2
 8007636:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007648:	430a      	orrs	r2, r1
 800764a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a90      	ldr	r2, [pc, #576]	@ (8007894 <UART_SetConfig+0x2c8>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d126      	bne.n	80076a4 <UART_SetConfig+0xd8>
 8007656:	4b90      	ldr	r3, [pc, #576]	@ (8007898 <UART_SetConfig+0x2cc>)
 8007658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	2b03      	cmp	r3, #3
 8007662:	d81b      	bhi.n	800769c <UART_SetConfig+0xd0>
 8007664:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <UART_SetConfig+0xa0>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	0800767d 	.word	0x0800767d
 8007670:	0800768d 	.word	0x0800768d
 8007674:	08007685 	.word	0x08007685
 8007678:	08007695 	.word	0x08007695
 800767c:	2301      	movs	r3, #1
 800767e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007682:	e116      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007684:	2302      	movs	r3, #2
 8007686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800768a:	e112      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800768c:	2304      	movs	r3, #4
 800768e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007692:	e10e      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007694:	2308      	movs	r3, #8
 8007696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800769a:	e10a      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800769c:	2310      	movs	r3, #16
 800769e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076a2:	e106      	b.n	80078b2 <UART_SetConfig+0x2e6>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a7c      	ldr	r2, [pc, #496]	@ (800789c <UART_SetConfig+0x2d0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d138      	bne.n	8007720 <UART_SetConfig+0x154>
 80076ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007898 <UART_SetConfig+0x2cc>)
 80076b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076b4:	f003 030c 	and.w	r3, r3, #12
 80076b8:	2b0c      	cmp	r3, #12
 80076ba:	d82d      	bhi.n	8007718 <UART_SetConfig+0x14c>
 80076bc:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <UART_SetConfig+0xf8>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076f9 	.word	0x080076f9
 80076c8:	08007719 	.word	0x08007719
 80076cc:	08007719 	.word	0x08007719
 80076d0:	08007719 	.word	0x08007719
 80076d4:	08007709 	.word	0x08007709
 80076d8:	08007719 	.word	0x08007719
 80076dc:	08007719 	.word	0x08007719
 80076e0:	08007719 	.word	0x08007719
 80076e4:	08007701 	.word	0x08007701
 80076e8:	08007719 	.word	0x08007719
 80076ec:	08007719 	.word	0x08007719
 80076f0:	08007719 	.word	0x08007719
 80076f4:	08007711 	.word	0x08007711
 80076f8:	2300      	movs	r3, #0
 80076fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076fe:	e0d8      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007700:	2302      	movs	r3, #2
 8007702:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007706:	e0d4      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007708:	2304      	movs	r3, #4
 800770a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800770e:	e0d0      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007710:	2308      	movs	r3, #8
 8007712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007716:	e0cc      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007718:	2310      	movs	r3, #16
 800771a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800771e:	e0c8      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a5e      	ldr	r2, [pc, #376]	@ (80078a0 <UART_SetConfig+0x2d4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d125      	bne.n	8007776 <UART_SetConfig+0x1aa>
 800772a:	4b5b      	ldr	r3, [pc, #364]	@ (8007898 <UART_SetConfig+0x2cc>)
 800772c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007730:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007734:	2b30      	cmp	r3, #48	@ 0x30
 8007736:	d016      	beq.n	8007766 <UART_SetConfig+0x19a>
 8007738:	2b30      	cmp	r3, #48	@ 0x30
 800773a:	d818      	bhi.n	800776e <UART_SetConfig+0x1a2>
 800773c:	2b20      	cmp	r3, #32
 800773e:	d00a      	beq.n	8007756 <UART_SetConfig+0x18a>
 8007740:	2b20      	cmp	r3, #32
 8007742:	d814      	bhi.n	800776e <UART_SetConfig+0x1a2>
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <UART_SetConfig+0x182>
 8007748:	2b10      	cmp	r3, #16
 800774a:	d008      	beq.n	800775e <UART_SetConfig+0x192>
 800774c:	e00f      	b.n	800776e <UART_SetConfig+0x1a2>
 800774e:	2300      	movs	r3, #0
 8007750:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007754:	e0ad      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007756:	2302      	movs	r3, #2
 8007758:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800775c:	e0a9      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800775e:	2304      	movs	r3, #4
 8007760:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007764:	e0a5      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007766:	2308      	movs	r3, #8
 8007768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800776c:	e0a1      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800776e:	2310      	movs	r3, #16
 8007770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007774:	e09d      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a4a      	ldr	r2, [pc, #296]	@ (80078a4 <UART_SetConfig+0x2d8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d125      	bne.n	80077cc <UART_SetConfig+0x200>
 8007780:	4b45      	ldr	r3, [pc, #276]	@ (8007898 <UART_SetConfig+0x2cc>)
 8007782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007786:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800778a:	2bc0      	cmp	r3, #192	@ 0xc0
 800778c:	d016      	beq.n	80077bc <UART_SetConfig+0x1f0>
 800778e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007790:	d818      	bhi.n	80077c4 <UART_SetConfig+0x1f8>
 8007792:	2b80      	cmp	r3, #128	@ 0x80
 8007794:	d00a      	beq.n	80077ac <UART_SetConfig+0x1e0>
 8007796:	2b80      	cmp	r3, #128	@ 0x80
 8007798:	d814      	bhi.n	80077c4 <UART_SetConfig+0x1f8>
 800779a:	2b00      	cmp	r3, #0
 800779c:	d002      	beq.n	80077a4 <UART_SetConfig+0x1d8>
 800779e:	2b40      	cmp	r3, #64	@ 0x40
 80077a0:	d008      	beq.n	80077b4 <UART_SetConfig+0x1e8>
 80077a2:	e00f      	b.n	80077c4 <UART_SetConfig+0x1f8>
 80077a4:	2300      	movs	r3, #0
 80077a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077aa:	e082      	b.n	80078b2 <UART_SetConfig+0x2e6>
 80077ac:	2302      	movs	r3, #2
 80077ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077b2:	e07e      	b.n	80078b2 <UART_SetConfig+0x2e6>
 80077b4:	2304      	movs	r3, #4
 80077b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ba:	e07a      	b.n	80078b2 <UART_SetConfig+0x2e6>
 80077bc:	2308      	movs	r3, #8
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077c2:	e076      	b.n	80078b2 <UART_SetConfig+0x2e6>
 80077c4:	2310      	movs	r3, #16
 80077c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ca:	e072      	b.n	80078b2 <UART_SetConfig+0x2e6>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a35      	ldr	r2, [pc, #212]	@ (80078a8 <UART_SetConfig+0x2dc>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d12a      	bne.n	800782c <UART_SetConfig+0x260>
 80077d6:	4b30      	ldr	r3, [pc, #192]	@ (8007898 <UART_SetConfig+0x2cc>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077e4:	d01a      	beq.n	800781c <UART_SetConfig+0x250>
 80077e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077ea:	d81b      	bhi.n	8007824 <UART_SetConfig+0x258>
 80077ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077f0:	d00c      	beq.n	800780c <UART_SetConfig+0x240>
 80077f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077f6:	d815      	bhi.n	8007824 <UART_SetConfig+0x258>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <UART_SetConfig+0x238>
 80077fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007800:	d008      	beq.n	8007814 <UART_SetConfig+0x248>
 8007802:	e00f      	b.n	8007824 <UART_SetConfig+0x258>
 8007804:	2300      	movs	r3, #0
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e052      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800780c:	2302      	movs	r3, #2
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e04e      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781a:	e04a      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007822:	e046      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800782a:	e042      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a17      	ldr	r2, [pc, #92]	@ (8007890 <UART_SetConfig+0x2c4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d13a      	bne.n	80078ac <UART_SetConfig+0x2e0>
 8007836:	4b18      	ldr	r3, [pc, #96]	@ (8007898 <UART_SetConfig+0x2cc>)
 8007838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007840:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007844:	d01a      	beq.n	800787c <UART_SetConfig+0x2b0>
 8007846:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800784a:	d81b      	bhi.n	8007884 <UART_SetConfig+0x2b8>
 800784c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007850:	d00c      	beq.n	800786c <UART_SetConfig+0x2a0>
 8007852:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007856:	d815      	bhi.n	8007884 <UART_SetConfig+0x2b8>
 8007858:	2b00      	cmp	r3, #0
 800785a:	d003      	beq.n	8007864 <UART_SetConfig+0x298>
 800785c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007860:	d008      	beq.n	8007874 <UART_SetConfig+0x2a8>
 8007862:	e00f      	b.n	8007884 <UART_SetConfig+0x2b8>
 8007864:	2300      	movs	r3, #0
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800786a:	e022      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800786c:	2302      	movs	r3, #2
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007872:	e01e      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007874:	2304      	movs	r3, #4
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800787a:	e01a      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800787c:	2308      	movs	r3, #8
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007882:	e016      	b.n	80078b2 <UART_SetConfig+0x2e6>
 8007884:	2310      	movs	r3, #16
 8007886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800788a:	e012      	b.n	80078b2 <UART_SetConfig+0x2e6>
 800788c:	efff69f3 	.word	0xefff69f3
 8007890:	40008000 	.word	0x40008000
 8007894:	40013800 	.word	0x40013800
 8007898:	40021000 	.word	0x40021000
 800789c:	40004400 	.word	0x40004400
 80078a0:	40004800 	.word	0x40004800
 80078a4:	40004c00 	.word	0x40004c00
 80078a8:	40005000 	.word	0x40005000
 80078ac:	2310      	movs	r3, #16
 80078ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a9f      	ldr	r2, [pc, #636]	@ (8007b34 <UART_SetConfig+0x568>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d17a      	bne.n	80079b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d824      	bhi.n	800790e <UART_SetConfig+0x342>
 80078c4:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <UART_SetConfig+0x300>)
 80078c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ca:	bf00      	nop
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	0800790f 	.word	0x0800790f
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	0800790f 	.word	0x0800790f
 80078dc:	080078ff 	.word	0x080078ff
 80078e0:	0800790f 	.word	0x0800790f
 80078e4:	0800790f 	.word	0x0800790f
 80078e8:	0800790f 	.word	0x0800790f
 80078ec:	08007907 	.word	0x08007907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f0:	f7fd fb5c 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80078f4:	61f8      	str	r0, [r7, #28]
        break;
 80078f6:	e010      	b.n	800791a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f8:	4b8f      	ldr	r3, [pc, #572]	@ (8007b38 <UART_SetConfig+0x56c>)
 80078fa:	61fb      	str	r3, [r7, #28]
        break;
 80078fc:	e00d      	b.n	800791a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fe:	f7fd fabd 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8007902:	61f8      	str	r0, [r7, #28]
        break;
 8007904:	e009      	b.n	800791a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007906:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800790a:	61fb      	str	r3, [r7, #28]
        break;
 800790c:	e005      	b.n	800791a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007918:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 80fb 	beq.w	8007b18 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	429a      	cmp	r2, r3
 8007930:	d305      	bcc.n	800793e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007938:	69fa      	ldr	r2, [r7, #28]
 800793a:	429a      	cmp	r2, r3
 800793c:	d903      	bls.n	8007946 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007944:	e0e8      	b.n	8007b18 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2200      	movs	r2, #0
 800794a:	461c      	mov	r4, r3
 800794c:	4615      	mov	r5, r2
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	022b      	lsls	r3, r5, #8
 8007958:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800795c:	0222      	lsls	r2, r4, #8
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	6849      	ldr	r1, [r1, #4]
 8007962:	0849      	lsrs	r1, r1, #1
 8007964:	2000      	movs	r0, #0
 8007966:	4688      	mov	r8, r1
 8007968:	4681      	mov	r9, r0
 800796a:	eb12 0a08 	adds.w	sl, r2, r8
 800796e:	eb43 0b09 	adc.w	fp, r3, r9
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	603b      	str	r3, [r7, #0]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007980:	4650      	mov	r0, sl
 8007982:	4659      	mov	r1, fp
 8007984:	f7f8 fe30 	bl	80005e8 <__aeabi_uldivmod>
 8007988:	4602      	mov	r2, r0
 800798a:	460b      	mov	r3, r1
 800798c:	4613      	mov	r3, r2
 800798e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007996:	d308      	bcc.n	80079aa <UART_SetConfig+0x3de>
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800799e:	d204      	bcs.n	80079aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	60da      	str	r2, [r3, #12]
 80079a8:	e0b6      	b.n	8007b18 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079b0:	e0b2      	b.n	8007b18 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ba:	d15e      	bne.n	8007a7a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80079bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	d828      	bhi.n	8007a16 <UART_SetConfig+0x44a>
 80079c4:	a201      	add	r2, pc, #4	@ (adr r2, 80079cc <UART_SetConfig+0x400>)
 80079c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ca:	bf00      	nop
 80079cc:	080079f1 	.word	0x080079f1
 80079d0:	080079f9 	.word	0x080079f9
 80079d4:	08007a01 	.word	0x08007a01
 80079d8:	08007a17 	.word	0x08007a17
 80079dc:	08007a07 	.word	0x08007a07
 80079e0:	08007a17 	.word	0x08007a17
 80079e4:	08007a17 	.word	0x08007a17
 80079e8:	08007a17 	.word	0x08007a17
 80079ec:	08007a0f 	.word	0x08007a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f0:	f7fd fadc 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 80079f4:	61f8      	str	r0, [r7, #28]
        break;
 80079f6:	e014      	b.n	8007a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079f8:	f7fd faee 	bl	8004fd8 <HAL_RCC_GetPCLK2Freq>
 80079fc:	61f8      	str	r0, [r7, #28]
        break;
 80079fe:	e010      	b.n	8007a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a00:	4b4d      	ldr	r3, [pc, #308]	@ (8007b38 <UART_SetConfig+0x56c>)
 8007a02:	61fb      	str	r3, [r7, #28]
        break;
 8007a04:	e00d      	b.n	8007a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a06:	f7fd fa39 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8007a0a:	61f8      	str	r0, [r7, #28]
        break;
 8007a0c:	e009      	b.n	8007a22 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a12:	61fb      	str	r3, [r7, #28]
        break;
 8007a14:	e005      	b.n	8007a22 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d077      	beq.n	8007b18 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a28:	69fb      	ldr	r3, [r7, #28]
 8007a2a:	005a      	lsls	r2, r3, #1
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	441a      	add	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b0f      	cmp	r3, #15
 8007a42:	d916      	bls.n	8007a72 <UART_SetConfig+0x4a6>
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a4a:	d212      	bcs.n	8007a72 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f023 030f 	bic.w	r3, r3, #15
 8007a54:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	8afb      	ldrh	r3, [r7, #22]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	8afa      	ldrh	r2, [r7, #22]
 8007a6e:	60da      	str	r2, [r3, #12]
 8007a70:	e052      	b.n	8007b18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a78:	e04e      	b.n	8007b18 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	d827      	bhi.n	8007ad2 <UART_SetConfig+0x506>
 8007a82:	a201      	add	r2, pc, #4	@ (adr r2, 8007a88 <UART_SetConfig+0x4bc>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007aad 	.word	0x08007aad
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007abd 	.word	0x08007abd
 8007a94:	08007ad3 	.word	0x08007ad3
 8007a98:	08007ac3 	.word	0x08007ac3
 8007a9c:	08007ad3 	.word	0x08007ad3
 8007aa0:	08007ad3 	.word	0x08007ad3
 8007aa4:	08007ad3 	.word	0x08007ad3
 8007aa8:	08007acb 	.word	0x08007acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007aac:	f7fd fa7e 	bl	8004fac <HAL_RCC_GetPCLK1Freq>
 8007ab0:	61f8      	str	r0, [r7, #28]
        break;
 8007ab2:	e014      	b.n	8007ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ab4:	f7fd fa90 	bl	8004fd8 <HAL_RCC_GetPCLK2Freq>
 8007ab8:	61f8      	str	r0, [r7, #28]
        break;
 8007aba:	e010      	b.n	8007ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007abc:	4b1e      	ldr	r3, [pc, #120]	@ (8007b38 <UART_SetConfig+0x56c>)
 8007abe:	61fb      	str	r3, [r7, #28]
        break;
 8007ac0:	e00d      	b.n	8007ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ac2:	f7fd f9db 	bl	8004e7c <HAL_RCC_GetSysClockFreq>
 8007ac6:	61f8      	str	r0, [r7, #28]
        break;
 8007ac8:	e009      	b.n	8007ade <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ace:	61fb      	str	r3, [r7, #28]
        break;
 8007ad0:	e005      	b.n	8007ade <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007adc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d019      	beq.n	8007b18 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	085a      	lsrs	r2, r3, #1
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	441a      	add	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	2b0f      	cmp	r3, #15
 8007afc:	d909      	bls.n	8007b12 <UART_SetConfig+0x546>
 8007afe:	69bb      	ldr	r3, [r7, #24]
 8007b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b04:	d205      	bcs.n	8007b12 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	60da      	str	r2, [r3, #12]
 8007b10:	e002      	b.n	8007b18 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3728      	adds	r7, #40	@ 0x28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b32:	bf00      	nop
 8007b34:	40008000 	.word	0x40008000
 8007b38:	00f42400 	.word	0x00f42400

08007b3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00a      	beq.n	8007b66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	430a      	orrs	r2, r1
 8007b86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	430a      	orrs	r2, r1
 8007bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf2:	f003 0320 	and.w	r3, r3, #32
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d01a      	beq.n	8007c52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c3a:	d10a      	bne.n	8007c52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]
  }
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b098      	sub	sp, #96	@ 0x60
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c90:	f7fa fa2c 	bl	80020ec <HAL_GetTick>
 8007c94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d12e      	bne.n	8007d02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ca4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cac:	2200      	movs	r2, #0
 8007cae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 f88c 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d021      	beq.n	8007d02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cde:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ce4:	e841 2300 	strex	r3, r2, [r1]
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1e6      	bne.n	8007cbe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e062      	b.n	8007dc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b04      	cmp	r3, #4
 8007d0e:	d149      	bne.n	8007da4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f856 	bl	8007dd0 <UART_WaitOnFlagUntilTimeout>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d03c      	beq.n	8007da4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	e853 3f00 	ldrex	r3, [r3]
 8007d36:	623b      	str	r3, [r7, #32]
   return(result);
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d50:	e841 2300 	strex	r3, r2, [r1]
 8007d54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e6      	bne.n	8007d2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3308      	adds	r3, #8
 8007d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0301 	bic.w	r3, r3, #1
 8007d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3308      	adds	r3, #8
 8007d7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d7c:	61fa      	str	r2, [r7, #28]
 8007d7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d80:	69b9      	ldr	r1, [r7, #24]
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	e841 2300 	strex	r3, r2, [r1]
 8007d88:	617b      	str	r3, [r7, #20]
   return(result);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1e5      	bne.n	8007d5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e011      	b.n	8007dc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2220      	movs	r2, #32
 8007dae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3758      	adds	r7, #88	@ 0x58
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de0:	e04f      	b.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de8:	d04b      	beq.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dea:	f7fa f97f 	bl	80020ec <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d302      	bcc.n	8007e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e04e      	b.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d037      	beq.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b80      	cmp	r3, #128	@ 0x80
 8007e16:	d034      	beq.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b40      	cmp	r3, #64	@ 0x40
 8007e1c:	d031      	beq.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d110      	bne.n	8007e4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2208      	movs	r2, #8
 8007e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f000 f838 	bl	8007eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2208      	movs	r2, #8
 8007e3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e029      	b.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69db      	ldr	r3, [r3, #28]
 8007e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e5c:	d111      	bne.n	8007e82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 f81e 	bl	8007eaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2220      	movs	r2, #32
 8007e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e00f      	b.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69da      	ldr	r2, [r3, #28]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	bf0c      	ite	eq
 8007e92:	2301      	moveq	r3, #1
 8007e94:	2300      	movne	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	79fb      	ldrb	r3, [r7, #7]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d0a0      	beq.n	8007de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b095      	sub	sp, #84	@ 0x54
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eba:	e853 3f00 	ldrex	r3, [r3]
 8007ebe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ed0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ed2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ed6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e6      	bne.n	8007eb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	e853 3f00 	ldrex	r3, [r3]
 8007ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	f023 0301 	bic.w	r3, r3, #1
 8007efa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3308      	adds	r3, #8
 8007f02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f0c:	e841 2300 	strex	r3, r2, [r1]
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1e5      	bne.n	8007ee4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d118      	bne.n	8007f52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f023 0310 	bic.w	r3, r3, #16
 8007f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f3e:	61bb      	str	r3, [r7, #24]
 8007f40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f42:	6979      	ldr	r1, [r7, #20]
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	e841 2300 	strex	r3, r2, [r1]
 8007f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1e6      	bne.n	8007f20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007f66:	bf00      	nop
 8007f68:	3754      	adds	r7, #84	@ 0x54
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
	...

08007f74 <std>:
 8007f74:	2300      	movs	r3, #0
 8007f76:	b510      	push	{r4, lr}
 8007f78:	4604      	mov	r4, r0
 8007f7a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f82:	6083      	str	r3, [r0, #8]
 8007f84:	8181      	strh	r1, [r0, #12]
 8007f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f88:	81c2      	strh	r2, [r0, #14]
 8007f8a:	6183      	str	r3, [r0, #24]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	2208      	movs	r2, #8
 8007f90:	305c      	adds	r0, #92	@ 0x5c
 8007f92:	f000 fa2d 	bl	80083f0 <memset>
 8007f96:	4b0d      	ldr	r3, [pc, #52]	@ (8007fcc <std+0x58>)
 8007f98:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <std+0x5c>)
 8007f9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd4 <std+0x60>)
 8007fa0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd8 <std+0x64>)
 8007fa4:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <std+0x68>)
 8007fa8:	6224      	str	r4, [r4, #32]
 8007faa:	429c      	cmp	r4, r3
 8007fac:	d006      	beq.n	8007fbc <std+0x48>
 8007fae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fb2:	4294      	cmp	r4, r2
 8007fb4:	d002      	beq.n	8007fbc <std+0x48>
 8007fb6:	33d0      	adds	r3, #208	@ 0xd0
 8007fb8:	429c      	cmp	r4, r3
 8007fba:	d105      	bne.n	8007fc8 <std+0x54>
 8007fbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc4:	f000 ba8c 	b.w	80084e0 <__retarget_lock_init_recursive>
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	bf00      	nop
 8007fcc:	08008241 	.word	0x08008241
 8007fd0:	08008263 	.word	0x08008263
 8007fd4:	0800829b 	.word	0x0800829b
 8007fd8:	080082bf 	.word	0x080082bf
 8007fdc:	2000083c 	.word	0x2000083c

08007fe0 <stdio_exit_handler>:
 8007fe0:	4a02      	ldr	r2, [pc, #8]	@ (8007fec <stdio_exit_handler+0xc>)
 8007fe2:	4903      	ldr	r1, [pc, #12]	@ (8007ff0 <stdio_exit_handler+0x10>)
 8007fe4:	4803      	ldr	r0, [pc, #12]	@ (8007ff4 <stdio_exit_handler+0x14>)
 8007fe6:	f000 b869 	b.w	80080bc <_fwalk_sglue>
 8007fea:	bf00      	nop
 8007fec:	20000014 	.word	0x20000014
 8007ff0:	0800904d 	.word	0x0800904d
 8007ff4:	20000024 	.word	0x20000024

08007ff8 <cleanup_stdio>:
 8007ff8:	6841      	ldr	r1, [r0, #4]
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800802c <cleanup_stdio+0x34>)
 8007ffc:	4299      	cmp	r1, r3
 8007ffe:	b510      	push	{r4, lr}
 8008000:	4604      	mov	r4, r0
 8008002:	d001      	beq.n	8008008 <cleanup_stdio+0x10>
 8008004:	f001 f822 	bl	800904c <_fflush_r>
 8008008:	68a1      	ldr	r1, [r4, #8]
 800800a:	4b09      	ldr	r3, [pc, #36]	@ (8008030 <cleanup_stdio+0x38>)
 800800c:	4299      	cmp	r1, r3
 800800e:	d002      	beq.n	8008016 <cleanup_stdio+0x1e>
 8008010:	4620      	mov	r0, r4
 8008012:	f001 f81b 	bl	800904c <_fflush_r>
 8008016:	68e1      	ldr	r1, [r4, #12]
 8008018:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <cleanup_stdio+0x3c>)
 800801a:	4299      	cmp	r1, r3
 800801c:	d004      	beq.n	8008028 <cleanup_stdio+0x30>
 800801e:	4620      	mov	r0, r4
 8008020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008024:	f001 b812 	b.w	800904c <_fflush_r>
 8008028:	bd10      	pop	{r4, pc}
 800802a:	bf00      	nop
 800802c:	2000083c 	.word	0x2000083c
 8008030:	200008a4 	.word	0x200008a4
 8008034:	2000090c 	.word	0x2000090c

08008038 <global_stdio_init.part.0>:
 8008038:	b510      	push	{r4, lr}
 800803a:	4b0b      	ldr	r3, [pc, #44]	@ (8008068 <global_stdio_init.part.0+0x30>)
 800803c:	4c0b      	ldr	r4, [pc, #44]	@ (800806c <global_stdio_init.part.0+0x34>)
 800803e:	4a0c      	ldr	r2, [pc, #48]	@ (8008070 <global_stdio_init.part.0+0x38>)
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	4620      	mov	r0, r4
 8008044:	2200      	movs	r2, #0
 8008046:	2104      	movs	r1, #4
 8008048:	f7ff ff94 	bl	8007f74 <std>
 800804c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008050:	2201      	movs	r2, #1
 8008052:	2109      	movs	r1, #9
 8008054:	f7ff ff8e 	bl	8007f74 <std>
 8008058:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800805c:	2202      	movs	r2, #2
 800805e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008062:	2112      	movs	r1, #18
 8008064:	f7ff bf86 	b.w	8007f74 <std>
 8008068:	20000974 	.word	0x20000974
 800806c:	2000083c 	.word	0x2000083c
 8008070:	08007fe1 	.word	0x08007fe1

08008074 <__sfp_lock_acquire>:
 8008074:	4801      	ldr	r0, [pc, #4]	@ (800807c <__sfp_lock_acquire+0x8>)
 8008076:	f000 ba34 	b.w	80084e2 <__retarget_lock_acquire_recursive>
 800807a:	bf00      	nop
 800807c:	2000097d 	.word	0x2000097d

08008080 <__sfp_lock_release>:
 8008080:	4801      	ldr	r0, [pc, #4]	@ (8008088 <__sfp_lock_release+0x8>)
 8008082:	f000 ba2f 	b.w	80084e4 <__retarget_lock_release_recursive>
 8008086:	bf00      	nop
 8008088:	2000097d 	.word	0x2000097d

0800808c <__sinit>:
 800808c:	b510      	push	{r4, lr}
 800808e:	4604      	mov	r4, r0
 8008090:	f7ff fff0 	bl	8008074 <__sfp_lock_acquire>
 8008094:	6a23      	ldr	r3, [r4, #32]
 8008096:	b11b      	cbz	r3, 80080a0 <__sinit+0x14>
 8008098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809c:	f7ff bff0 	b.w	8008080 <__sfp_lock_release>
 80080a0:	4b04      	ldr	r3, [pc, #16]	@ (80080b4 <__sinit+0x28>)
 80080a2:	6223      	str	r3, [r4, #32]
 80080a4:	4b04      	ldr	r3, [pc, #16]	@ (80080b8 <__sinit+0x2c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1f5      	bne.n	8008098 <__sinit+0xc>
 80080ac:	f7ff ffc4 	bl	8008038 <global_stdio_init.part.0>
 80080b0:	e7f2      	b.n	8008098 <__sinit+0xc>
 80080b2:	bf00      	nop
 80080b4:	08007ff9 	.word	0x08007ff9
 80080b8:	20000974 	.word	0x20000974

080080bc <_fwalk_sglue>:
 80080bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080c0:	4607      	mov	r7, r0
 80080c2:	4688      	mov	r8, r1
 80080c4:	4614      	mov	r4, r2
 80080c6:	2600      	movs	r6, #0
 80080c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080cc:	f1b9 0901 	subs.w	r9, r9, #1
 80080d0:	d505      	bpl.n	80080de <_fwalk_sglue+0x22>
 80080d2:	6824      	ldr	r4, [r4, #0]
 80080d4:	2c00      	cmp	r4, #0
 80080d6:	d1f7      	bne.n	80080c8 <_fwalk_sglue+0xc>
 80080d8:	4630      	mov	r0, r6
 80080da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080de:	89ab      	ldrh	r3, [r5, #12]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d907      	bls.n	80080f4 <_fwalk_sglue+0x38>
 80080e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080e8:	3301      	adds	r3, #1
 80080ea:	d003      	beq.n	80080f4 <_fwalk_sglue+0x38>
 80080ec:	4629      	mov	r1, r5
 80080ee:	4638      	mov	r0, r7
 80080f0:	47c0      	blx	r8
 80080f2:	4306      	orrs	r6, r0
 80080f4:	3568      	adds	r5, #104	@ 0x68
 80080f6:	e7e9      	b.n	80080cc <_fwalk_sglue+0x10>

080080f8 <iprintf>:
 80080f8:	b40f      	push	{r0, r1, r2, r3}
 80080fa:	b507      	push	{r0, r1, r2, lr}
 80080fc:	4906      	ldr	r1, [pc, #24]	@ (8008118 <iprintf+0x20>)
 80080fe:	ab04      	add	r3, sp, #16
 8008100:	6808      	ldr	r0, [r1, #0]
 8008102:	f853 2b04 	ldr.w	r2, [r3], #4
 8008106:	6881      	ldr	r1, [r0, #8]
 8008108:	9301      	str	r3, [sp, #4]
 800810a:	f000 fc75 	bl	80089f8 <_vfiprintf_r>
 800810e:	b003      	add	sp, #12
 8008110:	f85d eb04 	ldr.w	lr, [sp], #4
 8008114:	b004      	add	sp, #16
 8008116:	4770      	bx	lr
 8008118:	20000020 	.word	0x20000020

0800811c <_puts_r>:
 800811c:	6a03      	ldr	r3, [r0, #32]
 800811e:	b570      	push	{r4, r5, r6, lr}
 8008120:	6884      	ldr	r4, [r0, #8]
 8008122:	4605      	mov	r5, r0
 8008124:	460e      	mov	r6, r1
 8008126:	b90b      	cbnz	r3, 800812c <_puts_r+0x10>
 8008128:	f7ff ffb0 	bl	800808c <__sinit>
 800812c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800812e:	07db      	lsls	r3, r3, #31
 8008130:	d405      	bmi.n	800813e <_puts_r+0x22>
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	0598      	lsls	r0, r3, #22
 8008136:	d402      	bmi.n	800813e <_puts_r+0x22>
 8008138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800813a:	f000 f9d2 	bl	80084e2 <__retarget_lock_acquire_recursive>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	0719      	lsls	r1, r3, #28
 8008142:	d502      	bpl.n	800814a <_puts_r+0x2e>
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d135      	bne.n	80081b6 <_puts_r+0x9a>
 800814a:	4621      	mov	r1, r4
 800814c:	4628      	mov	r0, r5
 800814e:	f000 f8f9 	bl	8008344 <__swsetup_r>
 8008152:	b380      	cbz	r0, 80081b6 <_puts_r+0x9a>
 8008154:	f04f 35ff 	mov.w	r5, #4294967295
 8008158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800815a:	07da      	lsls	r2, r3, #31
 800815c:	d405      	bmi.n	800816a <_puts_r+0x4e>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	059b      	lsls	r3, r3, #22
 8008162:	d402      	bmi.n	800816a <_puts_r+0x4e>
 8008164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008166:	f000 f9bd 	bl	80084e4 <__retarget_lock_release_recursive>
 800816a:	4628      	mov	r0, r5
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	2b00      	cmp	r3, #0
 8008170:	da04      	bge.n	800817c <_puts_r+0x60>
 8008172:	69a2      	ldr	r2, [r4, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	dc17      	bgt.n	80081a8 <_puts_r+0x8c>
 8008178:	290a      	cmp	r1, #10
 800817a:	d015      	beq.n	80081a8 <_puts_r+0x8c>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	6022      	str	r2, [r4, #0]
 8008182:	7019      	strb	r1, [r3, #0]
 8008184:	68a3      	ldr	r3, [r4, #8]
 8008186:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800818a:	3b01      	subs	r3, #1
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	2900      	cmp	r1, #0
 8008190:	d1ed      	bne.n	800816e <_puts_r+0x52>
 8008192:	2b00      	cmp	r3, #0
 8008194:	da11      	bge.n	80081ba <_puts_r+0x9e>
 8008196:	4622      	mov	r2, r4
 8008198:	210a      	movs	r1, #10
 800819a:	4628      	mov	r0, r5
 800819c:	f000 f893 	bl	80082c6 <__swbuf_r>
 80081a0:	3001      	adds	r0, #1
 80081a2:	d0d7      	beq.n	8008154 <_puts_r+0x38>
 80081a4:	250a      	movs	r5, #10
 80081a6:	e7d7      	b.n	8008158 <_puts_r+0x3c>
 80081a8:	4622      	mov	r2, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 f88b 	bl	80082c6 <__swbuf_r>
 80081b0:	3001      	adds	r0, #1
 80081b2:	d1e7      	bne.n	8008184 <_puts_r+0x68>
 80081b4:	e7ce      	b.n	8008154 <_puts_r+0x38>
 80081b6:	3e01      	subs	r6, #1
 80081b8:	e7e4      	b.n	8008184 <_puts_r+0x68>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	220a      	movs	r2, #10
 80081c2:	701a      	strb	r2, [r3, #0]
 80081c4:	e7ee      	b.n	80081a4 <_puts_r+0x88>
	...

080081c8 <puts>:
 80081c8:	4b02      	ldr	r3, [pc, #8]	@ (80081d4 <puts+0xc>)
 80081ca:	4601      	mov	r1, r0
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	f7ff bfa5 	b.w	800811c <_puts_r>
 80081d2:	bf00      	nop
 80081d4:	20000020 	.word	0x20000020

080081d8 <sniprintf>:
 80081d8:	b40c      	push	{r2, r3}
 80081da:	b530      	push	{r4, r5, lr}
 80081dc:	4b17      	ldr	r3, [pc, #92]	@ (800823c <sniprintf+0x64>)
 80081de:	1e0c      	subs	r4, r1, #0
 80081e0:	681d      	ldr	r5, [r3, #0]
 80081e2:	b09d      	sub	sp, #116	@ 0x74
 80081e4:	da08      	bge.n	80081f8 <sniprintf+0x20>
 80081e6:	238b      	movs	r3, #139	@ 0x8b
 80081e8:	602b      	str	r3, [r5, #0]
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295
 80081ee:	b01d      	add	sp, #116	@ 0x74
 80081f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081f4:	b002      	add	sp, #8
 80081f6:	4770      	bx	lr
 80081f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80081fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008200:	bf14      	ite	ne
 8008202:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008206:	4623      	moveq	r3, r4
 8008208:	9304      	str	r3, [sp, #16]
 800820a:	9307      	str	r3, [sp, #28]
 800820c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008210:	9002      	str	r0, [sp, #8]
 8008212:	9006      	str	r0, [sp, #24]
 8008214:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008218:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800821a:	ab21      	add	r3, sp, #132	@ 0x84
 800821c:	a902      	add	r1, sp, #8
 800821e:	4628      	mov	r0, r5
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	f000 fac3 	bl	80087ac <_svfiprintf_r>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	bfbc      	itt	lt
 800822a:	238b      	movlt	r3, #139	@ 0x8b
 800822c:	602b      	strlt	r3, [r5, #0]
 800822e:	2c00      	cmp	r4, #0
 8008230:	d0dd      	beq.n	80081ee <sniprintf+0x16>
 8008232:	9b02      	ldr	r3, [sp, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	701a      	strb	r2, [r3, #0]
 8008238:	e7d9      	b.n	80081ee <sniprintf+0x16>
 800823a:	bf00      	nop
 800823c:	20000020 	.word	0x20000020

08008240 <__sread>:
 8008240:	b510      	push	{r4, lr}
 8008242:	460c      	mov	r4, r1
 8008244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008248:	f000 f8fc 	bl	8008444 <_read_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	bfab      	itete	ge
 8008250:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008252:	89a3      	ldrhlt	r3, [r4, #12]
 8008254:	181b      	addge	r3, r3, r0
 8008256:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800825a:	bfac      	ite	ge
 800825c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800825e:	81a3      	strhlt	r3, [r4, #12]
 8008260:	bd10      	pop	{r4, pc}

08008262 <__swrite>:
 8008262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008266:	461f      	mov	r7, r3
 8008268:	898b      	ldrh	r3, [r1, #12]
 800826a:	05db      	lsls	r3, r3, #23
 800826c:	4605      	mov	r5, r0
 800826e:	460c      	mov	r4, r1
 8008270:	4616      	mov	r6, r2
 8008272:	d505      	bpl.n	8008280 <__swrite+0x1e>
 8008274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008278:	2302      	movs	r3, #2
 800827a:	2200      	movs	r2, #0
 800827c:	f000 f8d0 	bl	8008420 <_lseek_r>
 8008280:	89a3      	ldrh	r3, [r4, #12]
 8008282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	4632      	mov	r2, r6
 800828e:	463b      	mov	r3, r7
 8008290:	4628      	mov	r0, r5
 8008292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008296:	f000 b8e7 	b.w	8008468 <_write_r>

0800829a <__sseek>:
 800829a:	b510      	push	{r4, lr}
 800829c:	460c      	mov	r4, r1
 800829e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a2:	f000 f8bd 	bl	8008420 <_lseek_r>
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	bf15      	itete	ne
 80082ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082b6:	81a3      	strheq	r3, [r4, #12]
 80082b8:	bf18      	it	ne
 80082ba:	81a3      	strhne	r3, [r4, #12]
 80082bc:	bd10      	pop	{r4, pc}

080082be <__sclose>:
 80082be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c2:	f000 b89d 	b.w	8008400 <_close_r>

080082c6 <__swbuf_r>:
 80082c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c8:	460e      	mov	r6, r1
 80082ca:	4614      	mov	r4, r2
 80082cc:	4605      	mov	r5, r0
 80082ce:	b118      	cbz	r0, 80082d8 <__swbuf_r+0x12>
 80082d0:	6a03      	ldr	r3, [r0, #32]
 80082d2:	b90b      	cbnz	r3, 80082d8 <__swbuf_r+0x12>
 80082d4:	f7ff feda 	bl	800808c <__sinit>
 80082d8:	69a3      	ldr	r3, [r4, #24]
 80082da:	60a3      	str	r3, [r4, #8]
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	071a      	lsls	r2, r3, #28
 80082e0:	d501      	bpl.n	80082e6 <__swbuf_r+0x20>
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	b943      	cbnz	r3, 80082f8 <__swbuf_r+0x32>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4628      	mov	r0, r5
 80082ea:	f000 f82b 	bl	8008344 <__swsetup_r>
 80082ee:	b118      	cbz	r0, 80082f8 <__swbuf_r+0x32>
 80082f0:	f04f 37ff 	mov.w	r7, #4294967295
 80082f4:	4638      	mov	r0, r7
 80082f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	6922      	ldr	r2, [r4, #16]
 80082fc:	1a98      	subs	r0, r3, r2
 80082fe:	6963      	ldr	r3, [r4, #20]
 8008300:	b2f6      	uxtb	r6, r6
 8008302:	4283      	cmp	r3, r0
 8008304:	4637      	mov	r7, r6
 8008306:	dc05      	bgt.n	8008314 <__swbuf_r+0x4e>
 8008308:	4621      	mov	r1, r4
 800830a:	4628      	mov	r0, r5
 800830c:	f000 fe9e 	bl	800904c <_fflush_r>
 8008310:	2800      	cmp	r0, #0
 8008312:	d1ed      	bne.n	80082f0 <__swbuf_r+0x2a>
 8008314:	68a3      	ldr	r3, [r4, #8]
 8008316:	3b01      	subs	r3, #1
 8008318:	60a3      	str	r3, [r4, #8]
 800831a:	6823      	ldr	r3, [r4, #0]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	6022      	str	r2, [r4, #0]
 8008320:	701e      	strb	r6, [r3, #0]
 8008322:	6962      	ldr	r2, [r4, #20]
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	429a      	cmp	r2, r3
 8008328:	d004      	beq.n	8008334 <__swbuf_r+0x6e>
 800832a:	89a3      	ldrh	r3, [r4, #12]
 800832c:	07db      	lsls	r3, r3, #31
 800832e:	d5e1      	bpl.n	80082f4 <__swbuf_r+0x2e>
 8008330:	2e0a      	cmp	r6, #10
 8008332:	d1df      	bne.n	80082f4 <__swbuf_r+0x2e>
 8008334:	4621      	mov	r1, r4
 8008336:	4628      	mov	r0, r5
 8008338:	f000 fe88 	bl	800904c <_fflush_r>
 800833c:	2800      	cmp	r0, #0
 800833e:	d0d9      	beq.n	80082f4 <__swbuf_r+0x2e>
 8008340:	e7d6      	b.n	80082f0 <__swbuf_r+0x2a>
	...

08008344 <__swsetup_r>:
 8008344:	b538      	push	{r3, r4, r5, lr}
 8008346:	4b29      	ldr	r3, [pc, #164]	@ (80083ec <__swsetup_r+0xa8>)
 8008348:	4605      	mov	r5, r0
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	460c      	mov	r4, r1
 800834e:	b118      	cbz	r0, 8008358 <__swsetup_r+0x14>
 8008350:	6a03      	ldr	r3, [r0, #32]
 8008352:	b90b      	cbnz	r3, 8008358 <__swsetup_r+0x14>
 8008354:	f7ff fe9a 	bl	800808c <__sinit>
 8008358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835c:	0719      	lsls	r1, r3, #28
 800835e:	d422      	bmi.n	80083a6 <__swsetup_r+0x62>
 8008360:	06da      	lsls	r2, r3, #27
 8008362:	d407      	bmi.n	8008374 <__swsetup_r+0x30>
 8008364:	2209      	movs	r2, #9
 8008366:	602a      	str	r2, [r5, #0]
 8008368:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	f04f 30ff 	mov.w	r0, #4294967295
 8008372:	e033      	b.n	80083dc <__swsetup_r+0x98>
 8008374:	0758      	lsls	r0, r3, #29
 8008376:	d512      	bpl.n	800839e <__swsetup_r+0x5a>
 8008378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800837a:	b141      	cbz	r1, 800838e <__swsetup_r+0x4a>
 800837c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008380:	4299      	cmp	r1, r3
 8008382:	d002      	beq.n	800838a <__swsetup_r+0x46>
 8008384:	4628      	mov	r0, r5
 8008386:	f000 f8bd 	bl	8008504 <_free_r>
 800838a:	2300      	movs	r3, #0
 800838c:	6363      	str	r3, [r4, #52]	@ 0x34
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008394:	81a3      	strh	r3, [r4, #12]
 8008396:	2300      	movs	r3, #0
 8008398:	6063      	str	r3, [r4, #4]
 800839a:	6923      	ldr	r3, [r4, #16]
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	f043 0308 	orr.w	r3, r3, #8
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	b94b      	cbnz	r3, 80083be <__swsetup_r+0x7a>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083b4:	d003      	beq.n	80083be <__swsetup_r+0x7a>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4628      	mov	r0, r5
 80083ba:	f000 fe95 	bl	80090e8 <__smakebuf_r>
 80083be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c2:	f013 0201 	ands.w	r2, r3, #1
 80083c6:	d00a      	beq.n	80083de <__swsetup_r+0x9a>
 80083c8:	2200      	movs	r2, #0
 80083ca:	60a2      	str	r2, [r4, #8]
 80083cc:	6962      	ldr	r2, [r4, #20]
 80083ce:	4252      	negs	r2, r2
 80083d0:	61a2      	str	r2, [r4, #24]
 80083d2:	6922      	ldr	r2, [r4, #16]
 80083d4:	b942      	cbnz	r2, 80083e8 <__swsetup_r+0xa4>
 80083d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80083da:	d1c5      	bne.n	8008368 <__swsetup_r+0x24>
 80083dc:	bd38      	pop	{r3, r4, r5, pc}
 80083de:	0799      	lsls	r1, r3, #30
 80083e0:	bf58      	it	pl
 80083e2:	6962      	ldrpl	r2, [r4, #20]
 80083e4:	60a2      	str	r2, [r4, #8]
 80083e6:	e7f4      	b.n	80083d2 <__swsetup_r+0x8e>
 80083e8:	2000      	movs	r0, #0
 80083ea:	e7f7      	b.n	80083dc <__swsetup_r+0x98>
 80083ec:	20000020 	.word	0x20000020

080083f0 <memset>:
 80083f0:	4402      	add	r2, r0
 80083f2:	4603      	mov	r3, r0
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d100      	bne.n	80083fa <memset+0xa>
 80083f8:	4770      	bx	lr
 80083fa:	f803 1b01 	strb.w	r1, [r3], #1
 80083fe:	e7f9      	b.n	80083f4 <memset+0x4>

08008400 <_close_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4d06      	ldr	r5, [pc, #24]	@ (800841c <_close_r+0x1c>)
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	4608      	mov	r0, r1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	f7f9 fac7 	bl	800199e <_close>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_close_r+0x1a>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_close_r+0x1a>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	20000978 	.word	0x20000978

08008420 <_lseek_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	@ (8008440 <_lseek_r+0x20>)
 8008424:	4604      	mov	r4, r0
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	2200      	movs	r2, #0
 800842c:	602a      	str	r2, [r5, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	f7f9 fadc 	bl	80019ec <_lseek>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_lseek_r+0x1e>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_lseek_r+0x1e>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	20000978 	.word	0x20000978

08008444 <_read_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	@ (8008464 <_read_r+0x20>)
 8008448:	4604      	mov	r4, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	2200      	movs	r2, #0
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f7f9 fa6a 	bl	800192c <_read>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_read_r+0x1e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_read_r+0x1e>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	20000978 	.word	0x20000978

08008468 <_write_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	@ (8008488 <_write_r+0x20>)
 800846c:	4604      	mov	r4, r0
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	2200      	movs	r2, #0
 8008474:	602a      	str	r2, [r5, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	f7f9 fa75 	bl	8001966 <_write>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_write_r+0x1e>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_write_r+0x1e>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	20000978 	.word	0x20000978

0800848c <__errno>:
 800848c:	4b01      	ldr	r3, [pc, #4]	@ (8008494 <__errno+0x8>)
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20000020 	.word	0x20000020

08008498 <__libc_init_array>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	4d0d      	ldr	r5, [pc, #52]	@ (80084d0 <__libc_init_array+0x38>)
 800849c:	4c0d      	ldr	r4, [pc, #52]	@ (80084d4 <__libc_init_array+0x3c>)
 800849e:	1b64      	subs	r4, r4, r5
 80084a0:	10a4      	asrs	r4, r4, #2
 80084a2:	2600      	movs	r6, #0
 80084a4:	42a6      	cmp	r6, r4
 80084a6:	d109      	bne.n	80084bc <__libc_init_array+0x24>
 80084a8:	4d0b      	ldr	r5, [pc, #44]	@ (80084d8 <__libc_init_array+0x40>)
 80084aa:	4c0c      	ldr	r4, [pc, #48]	@ (80084dc <__libc_init_array+0x44>)
 80084ac:	f000 feda 	bl	8009264 <_init>
 80084b0:	1b64      	subs	r4, r4, r5
 80084b2:	10a4      	asrs	r4, r4, #2
 80084b4:	2600      	movs	r6, #0
 80084b6:	42a6      	cmp	r6, r4
 80084b8:	d105      	bne.n	80084c6 <__libc_init_array+0x2e>
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80084c0:	4798      	blx	r3
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7ee      	b.n	80084a4 <__libc_init_array+0xc>
 80084c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ca:	4798      	blx	r3
 80084cc:	3601      	adds	r6, #1
 80084ce:	e7f2      	b.n	80084b6 <__libc_init_array+0x1e>
 80084d0:	0800a0c0 	.word	0x0800a0c0
 80084d4:	0800a0c0 	.word	0x0800a0c0
 80084d8:	0800a0c0 	.word	0x0800a0c0
 80084dc:	0800a0c4 	.word	0x0800a0c4

080084e0 <__retarget_lock_init_recursive>:
 80084e0:	4770      	bx	lr

080084e2 <__retarget_lock_acquire_recursive>:
 80084e2:	4770      	bx	lr

080084e4 <__retarget_lock_release_recursive>:
 80084e4:	4770      	bx	lr

080084e6 <memcpy>:
 80084e6:	440a      	add	r2, r1
 80084e8:	4291      	cmp	r1, r2
 80084ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80084ee:	d100      	bne.n	80084f2 <memcpy+0xc>
 80084f0:	4770      	bx	lr
 80084f2:	b510      	push	{r4, lr}
 80084f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084fc:	4291      	cmp	r1, r2
 80084fe:	d1f9      	bne.n	80084f4 <memcpy+0xe>
 8008500:	bd10      	pop	{r4, pc}
	...

08008504 <_free_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4605      	mov	r5, r0
 8008508:	2900      	cmp	r1, #0
 800850a:	d041      	beq.n	8008590 <_free_r+0x8c>
 800850c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008510:	1f0c      	subs	r4, r1, #4
 8008512:	2b00      	cmp	r3, #0
 8008514:	bfb8      	it	lt
 8008516:	18e4      	addlt	r4, r4, r3
 8008518:	f000 f8e0 	bl	80086dc <__malloc_lock>
 800851c:	4a1d      	ldr	r2, [pc, #116]	@ (8008594 <_free_r+0x90>)
 800851e:	6813      	ldr	r3, [r2, #0]
 8008520:	b933      	cbnz	r3, 8008530 <_free_r+0x2c>
 8008522:	6063      	str	r3, [r4, #4]
 8008524:	6014      	str	r4, [r2, #0]
 8008526:	4628      	mov	r0, r5
 8008528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800852c:	f000 b8dc 	b.w	80086e8 <__malloc_unlock>
 8008530:	42a3      	cmp	r3, r4
 8008532:	d908      	bls.n	8008546 <_free_r+0x42>
 8008534:	6820      	ldr	r0, [r4, #0]
 8008536:	1821      	adds	r1, r4, r0
 8008538:	428b      	cmp	r3, r1
 800853a:	bf01      	itttt	eq
 800853c:	6819      	ldreq	r1, [r3, #0]
 800853e:	685b      	ldreq	r3, [r3, #4]
 8008540:	1809      	addeq	r1, r1, r0
 8008542:	6021      	streq	r1, [r4, #0]
 8008544:	e7ed      	b.n	8008522 <_free_r+0x1e>
 8008546:	461a      	mov	r2, r3
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	b10b      	cbz	r3, 8008550 <_free_r+0x4c>
 800854c:	42a3      	cmp	r3, r4
 800854e:	d9fa      	bls.n	8008546 <_free_r+0x42>
 8008550:	6811      	ldr	r1, [r2, #0]
 8008552:	1850      	adds	r0, r2, r1
 8008554:	42a0      	cmp	r0, r4
 8008556:	d10b      	bne.n	8008570 <_free_r+0x6c>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	4401      	add	r1, r0
 800855c:	1850      	adds	r0, r2, r1
 800855e:	4283      	cmp	r3, r0
 8008560:	6011      	str	r1, [r2, #0]
 8008562:	d1e0      	bne.n	8008526 <_free_r+0x22>
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	6053      	str	r3, [r2, #4]
 800856a:	4408      	add	r0, r1
 800856c:	6010      	str	r0, [r2, #0]
 800856e:	e7da      	b.n	8008526 <_free_r+0x22>
 8008570:	d902      	bls.n	8008578 <_free_r+0x74>
 8008572:	230c      	movs	r3, #12
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	e7d6      	b.n	8008526 <_free_r+0x22>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	1821      	adds	r1, r4, r0
 800857c:	428b      	cmp	r3, r1
 800857e:	bf04      	itt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	6063      	str	r3, [r4, #4]
 8008586:	bf04      	itt	eq
 8008588:	1809      	addeq	r1, r1, r0
 800858a:	6021      	streq	r1, [r4, #0]
 800858c:	6054      	str	r4, [r2, #4]
 800858e:	e7ca      	b.n	8008526 <_free_r+0x22>
 8008590:	bd38      	pop	{r3, r4, r5, pc}
 8008592:	bf00      	nop
 8008594:	20000984 	.word	0x20000984

08008598 <sbrk_aligned>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4e0f      	ldr	r6, [pc, #60]	@ (80085d8 <sbrk_aligned+0x40>)
 800859c:	460c      	mov	r4, r1
 800859e:	6831      	ldr	r1, [r6, #0]
 80085a0:	4605      	mov	r5, r0
 80085a2:	b911      	cbnz	r1, 80085aa <sbrk_aligned+0x12>
 80085a4:	f000 fe18 	bl	80091d8 <_sbrk_r>
 80085a8:	6030      	str	r0, [r6, #0]
 80085aa:	4621      	mov	r1, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 fe13 	bl	80091d8 <_sbrk_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	d103      	bne.n	80085be <sbrk_aligned+0x26>
 80085b6:	f04f 34ff 	mov.w	r4, #4294967295
 80085ba:	4620      	mov	r0, r4
 80085bc:	bd70      	pop	{r4, r5, r6, pc}
 80085be:	1cc4      	adds	r4, r0, #3
 80085c0:	f024 0403 	bic.w	r4, r4, #3
 80085c4:	42a0      	cmp	r0, r4
 80085c6:	d0f8      	beq.n	80085ba <sbrk_aligned+0x22>
 80085c8:	1a21      	subs	r1, r4, r0
 80085ca:	4628      	mov	r0, r5
 80085cc:	f000 fe04 	bl	80091d8 <_sbrk_r>
 80085d0:	3001      	adds	r0, #1
 80085d2:	d1f2      	bne.n	80085ba <sbrk_aligned+0x22>
 80085d4:	e7ef      	b.n	80085b6 <sbrk_aligned+0x1e>
 80085d6:	bf00      	nop
 80085d8:	20000980 	.word	0x20000980

080085dc <_malloc_r>:
 80085dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e0:	1ccd      	adds	r5, r1, #3
 80085e2:	f025 0503 	bic.w	r5, r5, #3
 80085e6:	3508      	adds	r5, #8
 80085e8:	2d0c      	cmp	r5, #12
 80085ea:	bf38      	it	cc
 80085ec:	250c      	movcc	r5, #12
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	4606      	mov	r6, r0
 80085f2:	db01      	blt.n	80085f8 <_malloc_r+0x1c>
 80085f4:	42a9      	cmp	r1, r5
 80085f6:	d904      	bls.n	8008602 <_malloc_r+0x26>
 80085f8:	230c      	movs	r3, #12
 80085fa:	6033      	str	r3, [r6, #0]
 80085fc:	2000      	movs	r0, #0
 80085fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008602:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086d8 <_malloc_r+0xfc>
 8008606:	f000 f869 	bl	80086dc <__malloc_lock>
 800860a:	f8d8 3000 	ldr.w	r3, [r8]
 800860e:	461c      	mov	r4, r3
 8008610:	bb44      	cbnz	r4, 8008664 <_malloc_r+0x88>
 8008612:	4629      	mov	r1, r5
 8008614:	4630      	mov	r0, r6
 8008616:	f7ff ffbf 	bl	8008598 <sbrk_aligned>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	4604      	mov	r4, r0
 800861e:	d158      	bne.n	80086d2 <_malloc_r+0xf6>
 8008620:	f8d8 4000 	ldr.w	r4, [r8]
 8008624:	4627      	mov	r7, r4
 8008626:	2f00      	cmp	r7, #0
 8008628:	d143      	bne.n	80086b2 <_malloc_r+0xd6>
 800862a:	2c00      	cmp	r4, #0
 800862c:	d04b      	beq.n	80086c6 <_malloc_r+0xea>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	4639      	mov	r1, r7
 8008632:	4630      	mov	r0, r6
 8008634:	eb04 0903 	add.w	r9, r4, r3
 8008638:	f000 fdce 	bl	80091d8 <_sbrk_r>
 800863c:	4581      	cmp	r9, r0
 800863e:	d142      	bne.n	80086c6 <_malloc_r+0xea>
 8008640:	6821      	ldr	r1, [r4, #0]
 8008642:	1a6d      	subs	r5, r5, r1
 8008644:	4629      	mov	r1, r5
 8008646:	4630      	mov	r0, r6
 8008648:	f7ff ffa6 	bl	8008598 <sbrk_aligned>
 800864c:	3001      	adds	r0, #1
 800864e:	d03a      	beq.n	80086c6 <_malloc_r+0xea>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	442b      	add	r3, r5
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	f8d8 3000 	ldr.w	r3, [r8]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	bb62      	cbnz	r2, 80086b8 <_malloc_r+0xdc>
 800865e:	f8c8 7000 	str.w	r7, [r8]
 8008662:	e00f      	b.n	8008684 <_malloc_r+0xa8>
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	1b52      	subs	r2, r2, r5
 8008668:	d420      	bmi.n	80086ac <_malloc_r+0xd0>
 800866a:	2a0b      	cmp	r2, #11
 800866c:	d917      	bls.n	800869e <_malloc_r+0xc2>
 800866e:	1961      	adds	r1, r4, r5
 8008670:	42a3      	cmp	r3, r4
 8008672:	6025      	str	r5, [r4, #0]
 8008674:	bf18      	it	ne
 8008676:	6059      	strne	r1, [r3, #4]
 8008678:	6863      	ldr	r3, [r4, #4]
 800867a:	bf08      	it	eq
 800867c:	f8c8 1000 	streq.w	r1, [r8]
 8008680:	5162      	str	r2, [r4, r5]
 8008682:	604b      	str	r3, [r1, #4]
 8008684:	4630      	mov	r0, r6
 8008686:	f000 f82f 	bl	80086e8 <__malloc_unlock>
 800868a:	f104 000b 	add.w	r0, r4, #11
 800868e:	1d23      	adds	r3, r4, #4
 8008690:	f020 0007 	bic.w	r0, r0, #7
 8008694:	1ac2      	subs	r2, r0, r3
 8008696:	bf1c      	itt	ne
 8008698:	1a1b      	subne	r3, r3, r0
 800869a:	50a3      	strne	r3, [r4, r2]
 800869c:	e7af      	b.n	80085fe <_malloc_r+0x22>
 800869e:	6862      	ldr	r2, [r4, #4]
 80086a0:	42a3      	cmp	r3, r4
 80086a2:	bf0c      	ite	eq
 80086a4:	f8c8 2000 	streq.w	r2, [r8]
 80086a8:	605a      	strne	r2, [r3, #4]
 80086aa:	e7eb      	b.n	8008684 <_malloc_r+0xa8>
 80086ac:	4623      	mov	r3, r4
 80086ae:	6864      	ldr	r4, [r4, #4]
 80086b0:	e7ae      	b.n	8008610 <_malloc_r+0x34>
 80086b2:	463c      	mov	r4, r7
 80086b4:	687f      	ldr	r7, [r7, #4]
 80086b6:	e7b6      	b.n	8008626 <_malloc_r+0x4a>
 80086b8:	461a      	mov	r2, r3
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	42a3      	cmp	r3, r4
 80086be:	d1fb      	bne.n	80086b8 <_malloc_r+0xdc>
 80086c0:	2300      	movs	r3, #0
 80086c2:	6053      	str	r3, [r2, #4]
 80086c4:	e7de      	b.n	8008684 <_malloc_r+0xa8>
 80086c6:	230c      	movs	r3, #12
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 f80c 	bl	80086e8 <__malloc_unlock>
 80086d0:	e794      	b.n	80085fc <_malloc_r+0x20>
 80086d2:	6005      	str	r5, [r0, #0]
 80086d4:	e7d6      	b.n	8008684 <_malloc_r+0xa8>
 80086d6:	bf00      	nop
 80086d8:	20000984 	.word	0x20000984

080086dc <__malloc_lock>:
 80086dc:	4801      	ldr	r0, [pc, #4]	@ (80086e4 <__malloc_lock+0x8>)
 80086de:	f7ff bf00 	b.w	80084e2 <__retarget_lock_acquire_recursive>
 80086e2:	bf00      	nop
 80086e4:	2000097c 	.word	0x2000097c

080086e8 <__malloc_unlock>:
 80086e8:	4801      	ldr	r0, [pc, #4]	@ (80086f0 <__malloc_unlock+0x8>)
 80086ea:	f7ff befb 	b.w	80084e4 <__retarget_lock_release_recursive>
 80086ee:	bf00      	nop
 80086f0:	2000097c 	.word	0x2000097c

080086f4 <__ssputs_r>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	688e      	ldr	r6, [r1, #8]
 80086fa:	461f      	mov	r7, r3
 80086fc:	42be      	cmp	r6, r7
 80086fe:	680b      	ldr	r3, [r1, #0]
 8008700:	4682      	mov	sl, r0
 8008702:	460c      	mov	r4, r1
 8008704:	4690      	mov	r8, r2
 8008706:	d82d      	bhi.n	8008764 <__ssputs_r+0x70>
 8008708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800870c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008710:	d026      	beq.n	8008760 <__ssputs_r+0x6c>
 8008712:	6965      	ldr	r5, [r4, #20]
 8008714:	6909      	ldr	r1, [r1, #16]
 8008716:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800871a:	eba3 0901 	sub.w	r9, r3, r1
 800871e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008722:	1c7b      	adds	r3, r7, #1
 8008724:	444b      	add	r3, r9
 8008726:	106d      	asrs	r5, r5, #1
 8008728:	429d      	cmp	r5, r3
 800872a:	bf38      	it	cc
 800872c:	461d      	movcc	r5, r3
 800872e:	0553      	lsls	r3, r2, #21
 8008730:	d527      	bpl.n	8008782 <__ssputs_r+0x8e>
 8008732:	4629      	mov	r1, r5
 8008734:	f7ff ff52 	bl	80085dc <_malloc_r>
 8008738:	4606      	mov	r6, r0
 800873a:	b360      	cbz	r0, 8008796 <__ssputs_r+0xa2>
 800873c:	6921      	ldr	r1, [r4, #16]
 800873e:	464a      	mov	r2, r9
 8008740:	f7ff fed1 	bl	80084e6 <memcpy>
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800874a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874e:	81a3      	strh	r3, [r4, #12]
 8008750:	6126      	str	r6, [r4, #16]
 8008752:	6165      	str	r5, [r4, #20]
 8008754:	444e      	add	r6, r9
 8008756:	eba5 0509 	sub.w	r5, r5, r9
 800875a:	6026      	str	r6, [r4, #0]
 800875c:	60a5      	str	r5, [r4, #8]
 800875e:	463e      	mov	r6, r7
 8008760:	42be      	cmp	r6, r7
 8008762:	d900      	bls.n	8008766 <__ssputs_r+0x72>
 8008764:	463e      	mov	r6, r7
 8008766:	6820      	ldr	r0, [r4, #0]
 8008768:	4632      	mov	r2, r6
 800876a:	4641      	mov	r1, r8
 800876c:	f000 fcf8 	bl	8009160 <memmove>
 8008770:	68a3      	ldr	r3, [r4, #8]
 8008772:	1b9b      	subs	r3, r3, r6
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	4433      	add	r3, r6
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	2000      	movs	r0, #0
 800877e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008782:	462a      	mov	r2, r5
 8008784:	f000 fd38 	bl	80091f8 <_realloc_r>
 8008788:	4606      	mov	r6, r0
 800878a:	2800      	cmp	r0, #0
 800878c:	d1e0      	bne.n	8008750 <__ssputs_r+0x5c>
 800878e:	6921      	ldr	r1, [r4, #16]
 8008790:	4650      	mov	r0, sl
 8008792:	f7ff feb7 	bl	8008504 <_free_r>
 8008796:	230c      	movs	r3, #12
 8008798:	f8ca 3000 	str.w	r3, [sl]
 800879c:	89a3      	ldrh	r3, [r4, #12]
 800879e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	f04f 30ff 	mov.w	r0, #4294967295
 80087a8:	e7e9      	b.n	800877e <__ssputs_r+0x8a>
	...

080087ac <_svfiprintf_r>:
 80087ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b0:	4698      	mov	r8, r3
 80087b2:	898b      	ldrh	r3, [r1, #12]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	b09d      	sub	sp, #116	@ 0x74
 80087b8:	4607      	mov	r7, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	4614      	mov	r4, r2
 80087be:	d510      	bpl.n	80087e2 <_svfiprintf_r+0x36>
 80087c0:	690b      	ldr	r3, [r1, #16]
 80087c2:	b973      	cbnz	r3, 80087e2 <_svfiprintf_r+0x36>
 80087c4:	2140      	movs	r1, #64	@ 0x40
 80087c6:	f7ff ff09 	bl	80085dc <_malloc_r>
 80087ca:	6028      	str	r0, [r5, #0]
 80087cc:	6128      	str	r0, [r5, #16]
 80087ce:	b930      	cbnz	r0, 80087de <_svfiprintf_r+0x32>
 80087d0:	230c      	movs	r3, #12
 80087d2:	603b      	str	r3, [r7, #0]
 80087d4:	f04f 30ff 	mov.w	r0, #4294967295
 80087d8:	b01d      	add	sp, #116	@ 0x74
 80087da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087de:	2340      	movs	r3, #64	@ 0x40
 80087e0:	616b      	str	r3, [r5, #20]
 80087e2:	2300      	movs	r3, #0
 80087e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e6:	2320      	movs	r3, #32
 80087e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f0:	2330      	movs	r3, #48	@ 0x30
 80087f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008990 <_svfiprintf_r+0x1e4>
 80087f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087fa:	f04f 0901 	mov.w	r9, #1
 80087fe:	4623      	mov	r3, r4
 8008800:	469a      	mov	sl, r3
 8008802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008806:	b10a      	cbz	r2, 800880c <_svfiprintf_r+0x60>
 8008808:	2a25      	cmp	r2, #37	@ 0x25
 800880a:	d1f9      	bne.n	8008800 <_svfiprintf_r+0x54>
 800880c:	ebba 0b04 	subs.w	fp, sl, r4
 8008810:	d00b      	beq.n	800882a <_svfiprintf_r+0x7e>
 8008812:	465b      	mov	r3, fp
 8008814:	4622      	mov	r2, r4
 8008816:	4629      	mov	r1, r5
 8008818:	4638      	mov	r0, r7
 800881a:	f7ff ff6b 	bl	80086f4 <__ssputs_r>
 800881e:	3001      	adds	r0, #1
 8008820:	f000 80a7 	beq.w	8008972 <_svfiprintf_r+0x1c6>
 8008824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008826:	445a      	add	r2, fp
 8008828:	9209      	str	r2, [sp, #36]	@ 0x24
 800882a:	f89a 3000 	ldrb.w	r3, [sl]
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 809f 	beq.w	8008972 <_svfiprintf_r+0x1c6>
 8008834:	2300      	movs	r3, #0
 8008836:	f04f 32ff 	mov.w	r2, #4294967295
 800883a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800883e:	f10a 0a01 	add.w	sl, sl, #1
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	9307      	str	r3, [sp, #28]
 8008846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800884a:	931a      	str	r3, [sp, #104]	@ 0x68
 800884c:	4654      	mov	r4, sl
 800884e:	2205      	movs	r2, #5
 8008850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008854:	484e      	ldr	r0, [pc, #312]	@ (8008990 <_svfiprintf_r+0x1e4>)
 8008856:	f7f7 fcbb 	bl	80001d0 <memchr>
 800885a:	9a04      	ldr	r2, [sp, #16]
 800885c:	b9d8      	cbnz	r0, 8008896 <_svfiprintf_r+0xea>
 800885e:	06d0      	lsls	r0, r2, #27
 8008860:	bf44      	itt	mi
 8008862:	2320      	movmi	r3, #32
 8008864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008868:	0711      	lsls	r1, r2, #28
 800886a:	bf44      	itt	mi
 800886c:	232b      	movmi	r3, #43	@ 0x2b
 800886e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008872:	f89a 3000 	ldrb.w	r3, [sl]
 8008876:	2b2a      	cmp	r3, #42	@ 0x2a
 8008878:	d015      	beq.n	80088a6 <_svfiprintf_r+0xfa>
 800887a:	9a07      	ldr	r2, [sp, #28]
 800887c:	4654      	mov	r4, sl
 800887e:	2000      	movs	r0, #0
 8008880:	f04f 0c0a 	mov.w	ip, #10
 8008884:	4621      	mov	r1, r4
 8008886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888a:	3b30      	subs	r3, #48	@ 0x30
 800888c:	2b09      	cmp	r3, #9
 800888e:	d94b      	bls.n	8008928 <_svfiprintf_r+0x17c>
 8008890:	b1b0      	cbz	r0, 80088c0 <_svfiprintf_r+0x114>
 8008892:	9207      	str	r2, [sp, #28]
 8008894:	e014      	b.n	80088c0 <_svfiprintf_r+0x114>
 8008896:	eba0 0308 	sub.w	r3, r0, r8
 800889a:	fa09 f303 	lsl.w	r3, r9, r3
 800889e:	4313      	orrs	r3, r2
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	46a2      	mov	sl, r4
 80088a4:	e7d2      	b.n	800884c <_svfiprintf_r+0xa0>
 80088a6:	9b03      	ldr	r3, [sp, #12]
 80088a8:	1d19      	adds	r1, r3, #4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	9103      	str	r1, [sp, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	bfbb      	ittet	lt
 80088b2:	425b      	neglt	r3, r3
 80088b4:	f042 0202 	orrlt.w	r2, r2, #2
 80088b8:	9307      	strge	r3, [sp, #28]
 80088ba:	9307      	strlt	r3, [sp, #28]
 80088bc:	bfb8      	it	lt
 80088be:	9204      	strlt	r2, [sp, #16]
 80088c0:	7823      	ldrb	r3, [r4, #0]
 80088c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c4:	d10a      	bne.n	80088dc <_svfiprintf_r+0x130>
 80088c6:	7863      	ldrb	r3, [r4, #1]
 80088c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ca:	d132      	bne.n	8008932 <_svfiprintf_r+0x186>
 80088cc:	9b03      	ldr	r3, [sp, #12]
 80088ce:	1d1a      	adds	r2, r3, #4
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	9203      	str	r2, [sp, #12]
 80088d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d8:	3402      	adds	r4, #2
 80088da:	9305      	str	r3, [sp, #20]
 80088dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089a0 <_svfiprintf_r+0x1f4>
 80088e0:	7821      	ldrb	r1, [r4, #0]
 80088e2:	2203      	movs	r2, #3
 80088e4:	4650      	mov	r0, sl
 80088e6:	f7f7 fc73 	bl	80001d0 <memchr>
 80088ea:	b138      	cbz	r0, 80088fc <_svfiprintf_r+0x150>
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	eba0 000a 	sub.w	r0, r0, sl
 80088f2:	2240      	movs	r2, #64	@ 0x40
 80088f4:	4082      	lsls	r2, r0
 80088f6:	4313      	orrs	r3, r2
 80088f8:	3401      	adds	r4, #1
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008900:	4824      	ldr	r0, [pc, #144]	@ (8008994 <_svfiprintf_r+0x1e8>)
 8008902:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008906:	2206      	movs	r2, #6
 8008908:	f7f7 fc62 	bl	80001d0 <memchr>
 800890c:	2800      	cmp	r0, #0
 800890e:	d036      	beq.n	800897e <_svfiprintf_r+0x1d2>
 8008910:	4b21      	ldr	r3, [pc, #132]	@ (8008998 <_svfiprintf_r+0x1ec>)
 8008912:	bb1b      	cbnz	r3, 800895c <_svfiprintf_r+0x1b0>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	3307      	adds	r3, #7
 8008918:	f023 0307 	bic.w	r3, r3, #7
 800891c:	3308      	adds	r3, #8
 800891e:	9303      	str	r3, [sp, #12]
 8008920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008922:	4433      	add	r3, r6
 8008924:	9309      	str	r3, [sp, #36]	@ 0x24
 8008926:	e76a      	b.n	80087fe <_svfiprintf_r+0x52>
 8008928:	fb0c 3202 	mla	r2, ip, r2, r3
 800892c:	460c      	mov	r4, r1
 800892e:	2001      	movs	r0, #1
 8008930:	e7a8      	b.n	8008884 <_svfiprintf_r+0xd8>
 8008932:	2300      	movs	r3, #0
 8008934:	3401      	adds	r4, #1
 8008936:	9305      	str	r3, [sp, #20]
 8008938:	4619      	mov	r1, r3
 800893a:	f04f 0c0a 	mov.w	ip, #10
 800893e:	4620      	mov	r0, r4
 8008940:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008944:	3a30      	subs	r2, #48	@ 0x30
 8008946:	2a09      	cmp	r2, #9
 8008948:	d903      	bls.n	8008952 <_svfiprintf_r+0x1a6>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0c6      	beq.n	80088dc <_svfiprintf_r+0x130>
 800894e:	9105      	str	r1, [sp, #20]
 8008950:	e7c4      	b.n	80088dc <_svfiprintf_r+0x130>
 8008952:	fb0c 2101 	mla	r1, ip, r1, r2
 8008956:	4604      	mov	r4, r0
 8008958:	2301      	movs	r3, #1
 800895a:	e7f0      	b.n	800893e <_svfiprintf_r+0x192>
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	462a      	mov	r2, r5
 8008962:	4b0e      	ldr	r3, [pc, #56]	@ (800899c <_svfiprintf_r+0x1f0>)
 8008964:	a904      	add	r1, sp, #16
 8008966:	4638      	mov	r0, r7
 8008968:	f3af 8000 	nop.w
 800896c:	1c42      	adds	r2, r0, #1
 800896e:	4606      	mov	r6, r0
 8008970:	d1d6      	bne.n	8008920 <_svfiprintf_r+0x174>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	065b      	lsls	r3, r3, #25
 8008976:	f53f af2d 	bmi.w	80087d4 <_svfiprintf_r+0x28>
 800897a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800897c:	e72c      	b.n	80087d8 <_svfiprintf_r+0x2c>
 800897e:	ab03      	add	r3, sp, #12
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	462a      	mov	r2, r5
 8008984:	4b05      	ldr	r3, [pc, #20]	@ (800899c <_svfiprintf_r+0x1f0>)
 8008986:	a904      	add	r1, sp, #16
 8008988:	4638      	mov	r0, r7
 800898a:	f000 f9bb 	bl	8008d04 <_printf_i>
 800898e:	e7ed      	b.n	800896c <_svfiprintf_r+0x1c0>
 8008990:	0800a084 	.word	0x0800a084
 8008994:	0800a08e 	.word	0x0800a08e
 8008998:	00000000 	.word	0x00000000
 800899c:	080086f5 	.word	0x080086f5
 80089a0:	0800a08a 	.word	0x0800a08a

080089a4 <__sfputc_r>:
 80089a4:	6893      	ldr	r3, [r2, #8]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	b410      	push	{r4}
 80089ac:	6093      	str	r3, [r2, #8]
 80089ae:	da08      	bge.n	80089c2 <__sfputc_r+0x1e>
 80089b0:	6994      	ldr	r4, [r2, #24]
 80089b2:	42a3      	cmp	r3, r4
 80089b4:	db01      	blt.n	80089ba <__sfputc_r+0x16>
 80089b6:	290a      	cmp	r1, #10
 80089b8:	d103      	bne.n	80089c2 <__sfputc_r+0x1e>
 80089ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089be:	f7ff bc82 	b.w	80082c6 <__swbuf_r>
 80089c2:	6813      	ldr	r3, [r2, #0]
 80089c4:	1c58      	adds	r0, r3, #1
 80089c6:	6010      	str	r0, [r2, #0]
 80089c8:	7019      	strb	r1, [r3, #0]
 80089ca:	4608      	mov	r0, r1
 80089cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <__sfputs_r>:
 80089d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d4:	4606      	mov	r6, r0
 80089d6:	460f      	mov	r7, r1
 80089d8:	4614      	mov	r4, r2
 80089da:	18d5      	adds	r5, r2, r3
 80089dc:	42ac      	cmp	r4, r5
 80089de:	d101      	bne.n	80089e4 <__sfputs_r+0x12>
 80089e0:	2000      	movs	r0, #0
 80089e2:	e007      	b.n	80089f4 <__sfputs_r+0x22>
 80089e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089e8:	463a      	mov	r2, r7
 80089ea:	4630      	mov	r0, r6
 80089ec:	f7ff ffda 	bl	80089a4 <__sfputc_r>
 80089f0:	1c43      	adds	r3, r0, #1
 80089f2:	d1f3      	bne.n	80089dc <__sfputs_r+0xa>
 80089f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089f8 <_vfiprintf_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	460d      	mov	r5, r1
 80089fe:	b09d      	sub	sp, #116	@ 0x74
 8008a00:	4614      	mov	r4, r2
 8008a02:	4698      	mov	r8, r3
 8008a04:	4606      	mov	r6, r0
 8008a06:	b118      	cbz	r0, 8008a10 <_vfiprintf_r+0x18>
 8008a08:	6a03      	ldr	r3, [r0, #32]
 8008a0a:	b90b      	cbnz	r3, 8008a10 <_vfiprintf_r+0x18>
 8008a0c:	f7ff fb3e 	bl	800808c <__sinit>
 8008a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a12:	07d9      	lsls	r1, r3, #31
 8008a14:	d405      	bmi.n	8008a22 <_vfiprintf_r+0x2a>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_vfiprintf_r+0x2a>
 8008a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a1e:	f7ff fd60 	bl	80084e2 <__retarget_lock_acquire_recursive>
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	071b      	lsls	r3, r3, #28
 8008a26:	d501      	bpl.n	8008a2c <_vfiprintf_r+0x34>
 8008a28:	692b      	ldr	r3, [r5, #16]
 8008a2a:	b99b      	cbnz	r3, 8008a54 <_vfiprintf_r+0x5c>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7ff fc88 	bl	8008344 <__swsetup_r>
 8008a34:	b170      	cbz	r0, 8008a54 <_vfiprintf_r+0x5c>
 8008a36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a38:	07dc      	lsls	r4, r3, #31
 8008a3a:	d504      	bpl.n	8008a46 <_vfiprintf_r+0x4e>
 8008a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a40:	b01d      	add	sp, #116	@ 0x74
 8008a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	0598      	lsls	r0, r3, #22
 8008a4a:	d4f7      	bmi.n	8008a3c <_vfiprintf_r+0x44>
 8008a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a4e:	f7ff fd49 	bl	80084e4 <__retarget_lock_release_recursive>
 8008a52:	e7f3      	b.n	8008a3c <_vfiprintf_r+0x44>
 8008a54:	2300      	movs	r3, #0
 8008a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a58:	2320      	movs	r3, #32
 8008a5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a62:	2330      	movs	r3, #48	@ 0x30
 8008a64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c14 <_vfiprintf_r+0x21c>
 8008a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a6c:	f04f 0901 	mov.w	r9, #1
 8008a70:	4623      	mov	r3, r4
 8008a72:	469a      	mov	sl, r3
 8008a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a78:	b10a      	cbz	r2, 8008a7e <_vfiprintf_r+0x86>
 8008a7a:	2a25      	cmp	r2, #37	@ 0x25
 8008a7c:	d1f9      	bne.n	8008a72 <_vfiprintf_r+0x7a>
 8008a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a82:	d00b      	beq.n	8008a9c <_vfiprintf_r+0xa4>
 8008a84:	465b      	mov	r3, fp
 8008a86:	4622      	mov	r2, r4
 8008a88:	4629      	mov	r1, r5
 8008a8a:	4630      	mov	r0, r6
 8008a8c:	f7ff ffa1 	bl	80089d2 <__sfputs_r>
 8008a90:	3001      	adds	r0, #1
 8008a92:	f000 80a7 	beq.w	8008be4 <_vfiprintf_r+0x1ec>
 8008a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a98:	445a      	add	r2, fp
 8008a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f000 809f 	beq.w	8008be4 <_vfiprintf_r+0x1ec>
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab0:	f10a 0a01 	add.w	sl, sl, #1
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	9307      	str	r3, [sp, #28]
 8008ab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008abc:	931a      	str	r3, [sp, #104]	@ 0x68
 8008abe:	4654      	mov	r4, sl
 8008ac0:	2205      	movs	r2, #5
 8008ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac6:	4853      	ldr	r0, [pc, #332]	@ (8008c14 <_vfiprintf_r+0x21c>)
 8008ac8:	f7f7 fb82 	bl	80001d0 <memchr>
 8008acc:	9a04      	ldr	r2, [sp, #16]
 8008ace:	b9d8      	cbnz	r0, 8008b08 <_vfiprintf_r+0x110>
 8008ad0:	06d1      	lsls	r1, r2, #27
 8008ad2:	bf44      	itt	mi
 8008ad4:	2320      	movmi	r3, #32
 8008ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ada:	0713      	lsls	r3, r2, #28
 8008adc:	bf44      	itt	mi
 8008ade:	232b      	movmi	r3, #43	@ 0x2b
 8008ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aea:	d015      	beq.n	8008b18 <_vfiprintf_r+0x120>
 8008aec:	9a07      	ldr	r2, [sp, #28]
 8008aee:	4654      	mov	r4, sl
 8008af0:	2000      	movs	r0, #0
 8008af2:	f04f 0c0a 	mov.w	ip, #10
 8008af6:	4621      	mov	r1, r4
 8008af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008afc:	3b30      	subs	r3, #48	@ 0x30
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	d94b      	bls.n	8008b9a <_vfiprintf_r+0x1a2>
 8008b02:	b1b0      	cbz	r0, 8008b32 <_vfiprintf_r+0x13a>
 8008b04:	9207      	str	r2, [sp, #28]
 8008b06:	e014      	b.n	8008b32 <_vfiprintf_r+0x13a>
 8008b08:	eba0 0308 	sub.w	r3, r0, r8
 8008b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	46a2      	mov	sl, r4
 8008b16:	e7d2      	b.n	8008abe <_vfiprintf_r+0xc6>
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	1d19      	adds	r1, r3, #4
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	9103      	str	r1, [sp, #12]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	bfbb      	ittet	lt
 8008b24:	425b      	neglt	r3, r3
 8008b26:	f042 0202 	orrlt.w	r2, r2, #2
 8008b2a:	9307      	strge	r3, [sp, #28]
 8008b2c:	9307      	strlt	r3, [sp, #28]
 8008b2e:	bfb8      	it	lt
 8008b30:	9204      	strlt	r2, [sp, #16]
 8008b32:	7823      	ldrb	r3, [r4, #0]
 8008b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b36:	d10a      	bne.n	8008b4e <_vfiprintf_r+0x156>
 8008b38:	7863      	ldrb	r3, [r4, #1]
 8008b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b3c:	d132      	bne.n	8008ba4 <_vfiprintf_r+0x1ac>
 8008b3e:	9b03      	ldr	r3, [sp, #12]
 8008b40:	1d1a      	adds	r2, r3, #4
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	9203      	str	r2, [sp, #12]
 8008b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b4a:	3402      	adds	r4, #2
 8008b4c:	9305      	str	r3, [sp, #20]
 8008b4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c24 <_vfiprintf_r+0x22c>
 8008b52:	7821      	ldrb	r1, [r4, #0]
 8008b54:	2203      	movs	r2, #3
 8008b56:	4650      	mov	r0, sl
 8008b58:	f7f7 fb3a 	bl	80001d0 <memchr>
 8008b5c:	b138      	cbz	r0, 8008b6e <_vfiprintf_r+0x176>
 8008b5e:	9b04      	ldr	r3, [sp, #16]
 8008b60:	eba0 000a 	sub.w	r0, r0, sl
 8008b64:	2240      	movs	r2, #64	@ 0x40
 8008b66:	4082      	lsls	r2, r0
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	3401      	adds	r4, #1
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b72:	4829      	ldr	r0, [pc, #164]	@ (8008c18 <_vfiprintf_r+0x220>)
 8008b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b78:	2206      	movs	r2, #6
 8008b7a:	f7f7 fb29 	bl	80001d0 <memchr>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	d03f      	beq.n	8008c02 <_vfiprintf_r+0x20a>
 8008b82:	4b26      	ldr	r3, [pc, #152]	@ (8008c1c <_vfiprintf_r+0x224>)
 8008b84:	bb1b      	cbnz	r3, 8008bce <_vfiprintf_r+0x1d6>
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	3307      	adds	r3, #7
 8008b8a:	f023 0307 	bic.w	r3, r3, #7
 8008b8e:	3308      	adds	r3, #8
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b94:	443b      	add	r3, r7
 8008b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b98:	e76a      	b.n	8008a70 <_vfiprintf_r+0x78>
 8008b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	e7a8      	b.n	8008af6 <_vfiprintf_r+0xfe>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	3401      	adds	r4, #1
 8008ba8:	9305      	str	r3, [sp, #20]
 8008baa:	4619      	mov	r1, r3
 8008bac:	f04f 0c0a 	mov.w	ip, #10
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bb6:	3a30      	subs	r2, #48	@ 0x30
 8008bb8:	2a09      	cmp	r2, #9
 8008bba:	d903      	bls.n	8008bc4 <_vfiprintf_r+0x1cc>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0c6      	beq.n	8008b4e <_vfiprintf_r+0x156>
 8008bc0:	9105      	str	r1, [sp, #20]
 8008bc2:	e7c4      	b.n	8008b4e <_vfiprintf_r+0x156>
 8008bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bc8:	4604      	mov	r4, r0
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e7f0      	b.n	8008bb0 <_vfiprintf_r+0x1b8>
 8008bce:	ab03      	add	r3, sp, #12
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	462a      	mov	r2, r5
 8008bd4:	4b12      	ldr	r3, [pc, #72]	@ (8008c20 <_vfiprintf_r+0x228>)
 8008bd6:	a904      	add	r1, sp, #16
 8008bd8:	4630      	mov	r0, r6
 8008bda:	f3af 8000 	nop.w
 8008bde:	4607      	mov	r7, r0
 8008be0:	1c78      	adds	r0, r7, #1
 8008be2:	d1d6      	bne.n	8008b92 <_vfiprintf_r+0x19a>
 8008be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008be6:	07d9      	lsls	r1, r3, #31
 8008be8:	d405      	bmi.n	8008bf6 <_vfiprintf_r+0x1fe>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	059a      	lsls	r2, r3, #22
 8008bee:	d402      	bmi.n	8008bf6 <_vfiprintf_r+0x1fe>
 8008bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bf2:	f7ff fc77 	bl	80084e4 <__retarget_lock_release_recursive>
 8008bf6:	89ab      	ldrh	r3, [r5, #12]
 8008bf8:	065b      	lsls	r3, r3, #25
 8008bfa:	f53f af1f 	bmi.w	8008a3c <_vfiprintf_r+0x44>
 8008bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c00:	e71e      	b.n	8008a40 <_vfiprintf_r+0x48>
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4b05      	ldr	r3, [pc, #20]	@ (8008c20 <_vfiprintf_r+0x228>)
 8008c0a:	a904      	add	r1, sp, #16
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f000 f879 	bl	8008d04 <_printf_i>
 8008c12:	e7e4      	b.n	8008bde <_vfiprintf_r+0x1e6>
 8008c14:	0800a084 	.word	0x0800a084
 8008c18:	0800a08e 	.word	0x0800a08e
 8008c1c:	00000000 	.word	0x00000000
 8008c20:	080089d3 	.word	0x080089d3
 8008c24:	0800a08a 	.word	0x0800a08a

08008c28 <_printf_common>:
 8008c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c2c:	4616      	mov	r6, r2
 8008c2e:	4698      	mov	r8, r3
 8008c30:	688a      	ldr	r2, [r1, #8]
 8008c32:	690b      	ldr	r3, [r1, #16]
 8008c34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	bfb8      	it	lt
 8008c3c:	4613      	movlt	r3, r2
 8008c3e:	6033      	str	r3, [r6, #0]
 8008c40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c44:	4607      	mov	r7, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	b10a      	cbz	r2, 8008c4e <_printf_common+0x26>
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	6033      	str	r3, [r6, #0]
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	0699      	lsls	r1, r3, #26
 8008c52:	bf42      	ittt	mi
 8008c54:	6833      	ldrmi	r3, [r6, #0]
 8008c56:	3302      	addmi	r3, #2
 8008c58:	6033      	strmi	r3, [r6, #0]
 8008c5a:	6825      	ldr	r5, [r4, #0]
 8008c5c:	f015 0506 	ands.w	r5, r5, #6
 8008c60:	d106      	bne.n	8008c70 <_printf_common+0x48>
 8008c62:	f104 0a19 	add.w	sl, r4, #25
 8008c66:	68e3      	ldr	r3, [r4, #12]
 8008c68:	6832      	ldr	r2, [r6, #0]
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	42ab      	cmp	r3, r5
 8008c6e:	dc26      	bgt.n	8008cbe <_printf_common+0x96>
 8008c70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c74:	6822      	ldr	r2, [r4, #0]
 8008c76:	3b00      	subs	r3, #0
 8008c78:	bf18      	it	ne
 8008c7a:	2301      	movne	r3, #1
 8008c7c:	0692      	lsls	r2, r2, #26
 8008c7e:	d42b      	bmi.n	8008cd8 <_printf_common+0xb0>
 8008c80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c84:	4641      	mov	r1, r8
 8008c86:	4638      	mov	r0, r7
 8008c88:	47c8      	blx	r9
 8008c8a:	3001      	adds	r0, #1
 8008c8c:	d01e      	beq.n	8008ccc <_printf_common+0xa4>
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	6922      	ldr	r2, [r4, #16]
 8008c92:	f003 0306 	and.w	r3, r3, #6
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	bf02      	ittt	eq
 8008c9a:	68e5      	ldreq	r5, [r4, #12]
 8008c9c:	6833      	ldreq	r3, [r6, #0]
 8008c9e:	1aed      	subeq	r5, r5, r3
 8008ca0:	68a3      	ldr	r3, [r4, #8]
 8008ca2:	bf0c      	ite	eq
 8008ca4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ca8:	2500      	movne	r5, #0
 8008caa:	4293      	cmp	r3, r2
 8008cac:	bfc4      	itt	gt
 8008cae:	1a9b      	subgt	r3, r3, r2
 8008cb0:	18ed      	addgt	r5, r5, r3
 8008cb2:	2600      	movs	r6, #0
 8008cb4:	341a      	adds	r4, #26
 8008cb6:	42b5      	cmp	r5, r6
 8008cb8:	d11a      	bne.n	8008cf0 <_printf_common+0xc8>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e008      	b.n	8008cd0 <_printf_common+0xa8>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	4652      	mov	r2, sl
 8008cc2:	4641      	mov	r1, r8
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	47c8      	blx	r9
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d103      	bne.n	8008cd4 <_printf_common+0xac>
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd4:	3501      	adds	r5, #1
 8008cd6:	e7c6      	b.n	8008c66 <_printf_common+0x3e>
 8008cd8:	18e1      	adds	r1, r4, r3
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	2030      	movs	r0, #48	@ 0x30
 8008cde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ce2:	4422      	add	r2, r4
 8008ce4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ce8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cec:	3302      	adds	r3, #2
 8008cee:	e7c7      	b.n	8008c80 <_printf_common+0x58>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4622      	mov	r2, r4
 8008cf4:	4641      	mov	r1, r8
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	47c8      	blx	r9
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d0e6      	beq.n	8008ccc <_printf_common+0xa4>
 8008cfe:	3601      	adds	r6, #1
 8008d00:	e7d9      	b.n	8008cb6 <_printf_common+0x8e>
	...

08008d04 <_printf_i>:
 8008d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d08:	7e0f      	ldrb	r7, [r1, #24]
 8008d0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d0c:	2f78      	cmp	r7, #120	@ 0x78
 8008d0e:	4691      	mov	r9, r2
 8008d10:	4680      	mov	r8, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	469a      	mov	sl, r3
 8008d16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d1a:	d807      	bhi.n	8008d2c <_printf_i+0x28>
 8008d1c:	2f62      	cmp	r7, #98	@ 0x62
 8008d1e:	d80a      	bhi.n	8008d36 <_printf_i+0x32>
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	f000 80d2 	beq.w	8008eca <_printf_i+0x1c6>
 8008d26:	2f58      	cmp	r7, #88	@ 0x58
 8008d28:	f000 80b9 	beq.w	8008e9e <_printf_i+0x19a>
 8008d2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d34:	e03a      	b.n	8008dac <_printf_i+0xa8>
 8008d36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d3a:	2b15      	cmp	r3, #21
 8008d3c:	d8f6      	bhi.n	8008d2c <_printf_i+0x28>
 8008d3e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d44 <_printf_i+0x40>)
 8008d40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d44:	08008d9d 	.word	0x08008d9d
 8008d48:	08008db1 	.word	0x08008db1
 8008d4c:	08008d2d 	.word	0x08008d2d
 8008d50:	08008d2d 	.word	0x08008d2d
 8008d54:	08008d2d 	.word	0x08008d2d
 8008d58:	08008d2d 	.word	0x08008d2d
 8008d5c:	08008db1 	.word	0x08008db1
 8008d60:	08008d2d 	.word	0x08008d2d
 8008d64:	08008d2d 	.word	0x08008d2d
 8008d68:	08008d2d 	.word	0x08008d2d
 8008d6c:	08008d2d 	.word	0x08008d2d
 8008d70:	08008eb1 	.word	0x08008eb1
 8008d74:	08008ddb 	.word	0x08008ddb
 8008d78:	08008e6b 	.word	0x08008e6b
 8008d7c:	08008d2d 	.word	0x08008d2d
 8008d80:	08008d2d 	.word	0x08008d2d
 8008d84:	08008ed3 	.word	0x08008ed3
 8008d88:	08008d2d 	.word	0x08008d2d
 8008d8c:	08008ddb 	.word	0x08008ddb
 8008d90:	08008d2d 	.word	0x08008d2d
 8008d94:	08008d2d 	.word	0x08008d2d
 8008d98:	08008e73 	.word	0x08008e73
 8008d9c:	6833      	ldr	r3, [r6, #0]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6032      	str	r2, [r6, #0]
 8008da4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008da8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dac:	2301      	movs	r3, #1
 8008dae:	e09d      	b.n	8008eec <_printf_i+0x1e8>
 8008db0:	6833      	ldr	r3, [r6, #0]
 8008db2:	6820      	ldr	r0, [r4, #0]
 8008db4:	1d19      	adds	r1, r3, #4
 8008db6:	6031      	str	r1, [r6, #0]
 8008db8:	0606      	lsls	r6, r0, #24
 8008dba:	d501      	bpl.n	8008dc0 <_printf_i+0xbc>
 8008dbc:	681d      	ldr	r5, [r3, #0]
 8008dbe:	e003      	b.n	8008dc8 <_printf_i+0xc4>
 8008dc0:	0645      	lsls	r5, r0, #25
 8008dc2:	d5fb      	bpl.n	8008dbc <_printf_i+0xb8>
 8008dc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	da03      	bge.n	8008dd4 <_printf_i+0xd0>
 8008dcc:	232d      	movs	r3, #45	@ 0x2d
 8008dce:	426d      	negs	r5, r5
 8008dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dd4:	4859      	ldr	r0, [pc, #356]	@ (8008f3c <_printf_i+0x238>)
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e011      	b.n	8008dfe <_printf_i+0xfa>
 8008dda:	6821      	ldr	r1, [r4, #0]
 8008ddc:	6833      	ldr	r3, [r6, #0]
 8008dde:	0608      	lsls	r0, r1, #24
 8008de0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008de4:	d402      	bmi.n	8008dec <_printf_i+0xe8>
 8008de6:	0649      	lsls	r1, r1, #25
 8008de8:	bf48      	it	mi
 8008dea:	b2ad      	uxthmi	r5, r5
 8008dec:	2f6f      	cmp	r7, #111	@ 0x6f
 8008dee:	4853      	ldr	r0, [pc, #332]	@ (8008f3c <_printf_i+0x238>)
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	bf14      	ite	ne
 8008df4:	230a      	movne	r3, #10
 8008df6:	2308      	moveq	r3, #8
 8008df8:	2100      	movs	r1, #0
 8008dfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008dfe:	6866      	ldr	r6, [r4, #4]
 8008e00:	60a6      	str	r6, [r4, #8]
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	bfa2      	ittt	ge
 8008e06:	6821      	ldrge	r1, [r4, #0]
 8008e08:	f021 0104 	bicge.w	r1, r1, #4
 8008e0c:	6021      	strge	r1, [r4, #0]
 8008e0e:	b90d      	cbnz	r5, 8008e14 <_printf_i+0x110>
 8008e10:	2e00      	cmp	r6, #0
 8008e12:	d04b      	beq.n	8008eac <_printf_i+0x1a8>
 8008e14:	4616      	mov	r6, r2
 8008e16:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e1a:	fb03 5711 	mls	r7, r3, r1, r5
 8008e1e:	5dc7      	ldrb	r7, [r0, r7]
 8008e20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e24:	462f      	mov	r7, r5
 8008e26:	42bb      	cmp	r3, r7
 8008e28:	460d      	mov	r5, r1
 8008e2a:	d9f4      	bls.n	8008e16 <_printf_i+0x112>
 8008e2c:	2b08      	cmp	r3, #8
 8008e2e:	d10b      	bne.n	8008e48 <_printf_i+0x144>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	07df      	lsls	r7, r3, #31
 8008e34:	d508      	bpl.n	8008e48 <_printf_i+0x144>
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	6861      	ldr	r1, [r4, #4]
 8008e3a:	4299      	cmp	r1, r3
 8008e3c:	bfde      	ittt	le
 8008e3e:	2330      	movle	r3, #48	@ 0x30
 8008e40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e44:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e48:	1b92      	subs	r2, r2, r6
 8008e4a:	6122      	str	r2, [r4, #16]
 8008e4c:	f8cd a000 	str.w	sl, [sp]
 8008e50:	464b      	mov	r3, r9
 8008e52:	aa03      	add	r2, sp, #12
 8008e54:	4621      	mov	r1, r4
 8008e56:	4640      	mov	r0, r8
 8008e58:	f7ff fee6 	bl	8008c28 <_printf_common>
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d14a      	bne.n	8008ef6 <_printf_i+0x1f2>
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	b004      	add	sp, #16
 8008e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	f043 0320 	orr.w	r3, r3, #32
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	4833      	ldr	r0, [pc, #204]	@ (8008f40 <_printf_i+0x23c>)
 8008e74:	2778      	movs	r7, #120	@ 0x78
 8008e76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	6831      	ldr	r1, [r6, #0]
 8008e7e:	061f      	lsls	r7, r3, #24
 8008e80:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e84:	d402      	bmi.n	8008e8c <_printf_i+0x188>
 8008e86:	065f      	lsls	r7, r3, #25
 8008e88:	bf48      	it	mi
 8008e8a:	b2ad      	uxthmi	r5, r5
 8008e8c:	6031      	str	r1, [r6, #0]
 8008e8e:	07d9      	lsls	r1, r3, #31
 8008e90:	bf44      	itt	mi
 8008e92:	f043 0320 	orrmi.w	r3, r3, #32
 8008e96:	6023      	strmi	r3, [r4, #0]
 8008e98:	b11d      	cbz	r5, 8008ea2 <_printf_i+0x19e>
 8008e9a:	2310      	movs	r3, #16
 8008e9c:	e7ac      	b.n	8008df8 <_printf_i+0xf4>
 8008e9e:	4827      	ldr	r0, [pc, #156]	@ (8008f3c <_printf_i+0x238>)
 8008ea0:	e7e9      	b.n	8008e76 <_printf_i+0x172>
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	f023 0320 	bic.w	r3, r3, #32
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	e7f6      	b.n	8008e9a <_printf_i+0x196>
 8008eac:	4616      	mov	r6, r2
 8008eae:	e7bd      	b.n	8008e2c <_printf_i+0x128>
 8008eb0:	6833      	ldr	r3, [r6, #0]
 8008eb2:	6825      	ldr	r5, [r4, #0]
 8008eb4:	6961      	ldr	r1, [r4, #20]
 8008eb6:	1d18      	adds	r0, r3, #4
 8008eb8:	6030      	str	r0, [r6, #0]
 8008eba:	062e      	lsls	r6, r5, #24
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	d501      	bpl.n	8008ec4 <_printf_i+0x1c0>
 8008ec0:	6019      	str	r1, [r3, #0]
 8008ec2:	e002      	b.n	8008eca <_printf_i+0x1c6>
 8008ec4:	0668      	lsls	r0, r5, #25
 8008ec6:	d5fb      	bpl.n	8008ec0 <_printf_i+0x1bc>
 8008ec8:	8019      	strh	r1, [r3, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	6123      	str	r3, [r4, #16]
 8008ece:	4616      	mov	r6, r2
 8008ed0:	e7bc      	b.n	8008e4c <_printf_i+0x148>
 8008ed2:	6833      	ldr	r3, [r6, #0]
 8008ed4:	1d1a      	adds	r2, r3, #4
 8008ed6:	6032      	str	r2, [r6, #0]
 8008ed8:	681e      	ldr	r6, [r3, #0]
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	2100      	movs	r1, #0
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f7f7 f976 	bl	80001d0 <memchr>
 8008ee4:	b108      	cbz	r0, 8008eea <_printf_i+0x1e6>
 8008ee6:	1b80      	subs	r0, r0, r6
 8008ee8:	6060      	str	r0, [r4, #4]
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	6123      	str	r3, [r4, #16]
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ef4:	e7aa      	b.n	8008e4c <_printf_i+0x148>
 8008ef6:	6923      	ldr	r3, [r4, #16]
 8008ef8:	4632      	mov	r2, r6
 8008efa:	4649      	mov	r1, r9
 8008efc:	4640      	mov	r0, r8
 8008efe:	47d0      	blx	sl
 8008f00:	3001      	adds	r0, #1
 8008f02:	d0ad      	beq.n	8008e60 <_printf_i+0x15c>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	079b      	lsls	r3, r3, #30
 8008f08:	d413      	bmi.n	8008f32 <_printf_i+0x22e>
 8008f0a:	68e0      	ldr	r0, [r4, #12]
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	4298      	cmp	r0, r3
 8008f10:	bfb8      	it	lt
 8008f12:	4618      	movlt	r0, r3
 8008f14:	e7a6      	b.n	8008e64 <_printf_i+0x160>
 8008f16:	2301      	movs	r3, #1
 8008f18:	4632      	mov	r2, r6
 8008f1a:	4649      	mov	r1, r9
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	47d0      	blx	sl
 8008f20:	3001      	adds	r0, #1
 8008f22:	d09d      	beq.n	8008e60 <_printf_i+0x15c>
 8008f24:	3501      	adds	r5, #1
 8008f26:	68e3      	ldr	r3, [r4, #12]
 8008f28:	9903      	ldr	r1, [sp, #12]
 8008f2a:	1a5b      	subs	r3, r3, r1
 8008f2c:	42ab      	cmp	r3, r5
 8008f2e:	dcf2      	bgt.n	8008f16 <_printf_i+0x212>
 8008f30:	e7eb      	b.n	8008f0a <_printf_i+0x206>
 8008f32:	2500      	movs	r5, #0
 8008f34:	f104 0619 	add.w	r6, r4, #25
 8008f38:	e7f5      	b.n	8008f26 <_printf_i+0x222>
 8008f3a:	bf00      	nop
 8008f3c:	0800a095 	.word	0x0800a095
 8008f40:	0800a0a6 	.word	0x0800a0a6

08008f44 <__sflush_r>:
 8008f44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4c:	0716      	lsls	r6, r2, #28
 8008f4e:	4605      	mov	r5, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	d454      	bmi.n	8008ffe <__sflush_r+0xba>
 8008f54:	684b      	ldr	r3, [r1, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dc02      	bgt.n	8008f60 <__sflush_r+0x1c>
 8008f5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	dd48      	ble.n	8008ff2 <__sflush_r+0xae>
 8008f60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	d045      	beq.n	8008ff2 <__sflush_r+0xae>
 8008f66:	2300      	movs	r3, #0
 8008f68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f6c:	682f      	ldr	r7, [r5, #0]
 8008f6e:	6a21      	ldr	r1, [r4, #32]
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	d030      	beq.n	8008fd6 <__sflush_r+0x92>
 8008f74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	0759      	lsls	r1, r3, #29
 8008f7a:	d505      	bpl.n	8008f88 <__sflush_r+0x44>
 8008f7c:	6863      	ldr	r3, [r4, #4]
 8008f7e:	1ad2      	subs	r2, r2, r3
 8008f80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f82:	b10b      	cbz	r3, 8008f88 <__sflush_r+0x44>
 8008f84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f86:	1ad2      	subs	r2, r2, r3
 8008f88:	2300      	movs	r3, #0
 8008f8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b0      	blx	r6
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	d106      	bne.n	8008fa6 <__sflush_r+0x62>
 8008f98:	6829      	ldr	r1, [r5, #0]
 8008f9a:	291d      	cmp	r1, #29
 8008f9c:	d82b      	bhi.n	8008ff6 <__sflush_r+0xb2>
 8008f9e:	4a2a      	ldr	r2, [pc, #168]	@ (8009048 <__sflush_r+0x104>)
 8008fa0:	410a      	asrs	r2, r1
 8008fa2:	07d6      	lsls	r6, r2, #31
 8008fa4:	d427      	bmi.n	8008ff6 <__sflush_r+0xb2>
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	6062      	str	r2, [r4, #4]
 8008faa:	04d9      	lsls	r1, r3, #19
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	6022      	str	r2, [r4, #0]
 8008fb0:	d504      	bpl.n	8008fbc <__sflush_r+0x78>
 8008fb2:	1c42      	adds	r2, r0, #1
 8008fb4:	d101      	bne.n	8008fba <__sflush_r+0x76>
 8008fb6:	682b      	ldr	r3, [r5, #0]
 8008fb8:	b903      	cbnz	r3, 8008fbc <__sflush_r+0x78>
 8008fba:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fbe:	602f      	str	r7, [r5, #0]
 8008fc0:	b1b9      	cbz	r1, 8008ff2 <__sflush_r+0xae>
 8008fc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fc6:	4299      	cmp	r1, r3
 8008fc8:	d002      	beq.n	8008fd0 <__sflush_r+0x8c>
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f7ff fa9a 	bl	8008504 <_free_r>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fd4:	e00d      	b.n	8008ff2 <__sflush_r+0xae>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b0      	blx	r6
 8008fdc:	4602      	mov	r2, r0
 8008fde:	1c50      	adds	r0, r2, #1
 8008fe0:	d1c9      	bne.n	8008f76 <__sflush_r+0x32>
 8008fe2:	682b      	ldr	r3, [r5, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0c6      	beq.n	8008f76 <__sflush_r+0x32>
 8008fe8:	2b1d      	cmp	r3, #29
 8008fea:	d001      	beq.n	8008ff0 <__sflush_r+0xac>
 8008fec:	2b16      	cmp	r3, #22
 8008fee:	d11e      	bne.n	800902e <__sflush_r+0xea>
 8008ff0:	602f      	str	r7, [r5, #0]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e022      	b.n	800903c <__sflush_r+0xf8>
 8008ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ffa:	b21b      	sxth	r3, r3
 8008ffc:	e01b      	b.n	8009036 <__sflush_r+0xf2>
 8008ffe:	690f      	ldr	r7, [r1, #16]
 8009000:	2f00      	cmp	r7, #0
 8009002:	d0f6      	beq.n	8008ff2 <__sflush_r+0xae>
 8009004:	0793      	lsls	r3, r2, #30
 8009006:	680e      	ldr	r6, [r1, #0]
 8009008:	bf08      	it	eq
 800900a:	694b      	ldreq	r3, [r1, #20]
 800900c:	600f      	str	r7, [r1, #0]
 800900e:	bf18      	it	ne
 8009010:	2300      	movne	r3, #0
 8009012:	eba6 0807 	sub.w	r8, r6, r7
 8009016:	608b      	str	r3, [r1, #8]
 8009018:	f1b8 0f00 	cmp.w	r8, #0
 800901c:	dde9      	ble.n	8008ff2 <__sflush_r+0xae>
 800901e:	6a21      	ldr	r1, [r4, #32]
 8009020:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009022:	4643      	mov	r3, r8
 8009024:	463a      	mov	r2, r7
 8009026:	4628      	mov	r0, r5
 8009028:	47b0      	blx	r6
 800902a:	2800      	cmp	r0, #0
 800902c:	dc08      	bgt.n	8009040 <__sflush_r+0xfc>
 800902e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009032:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009036:	81a3      	strh	r3, [r4, #12]
 8009038:	f04f 30ff 	mov.w	r0, #4294967295
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009040:	4407      	add	r7, r0
 8009042:	eba8 0800 	sub.w	r8, r8, r0
 8009046:	e7e7      	b.n	8009018 <__sflush_r+0xd4>
 8009048:	dfbffffe 	.word	0xdfbffffe

0800904c <_fflush_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	690b      	ldr	r3, [r1, #16]
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	b913      	cbnz	r3, 800905c <_fflush_r+0x10>
 8009056:	2500      	movs	r5, #0
 8009058:	4628      	mov	r0, r5
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	b118      	cbz	r0, 8009066 <_fflush_r+0x1a>
 800905e:	6a03      	ldr	r3, [r0, #32]
 8009060:	b90b      	cbnz	r3, 8009066 <_fflush_r+0x1a>
 8009062:	f7ff f813 	bl	800808c <__sinit>
 8009066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f3      	beq.n	8009056 <_fflush_r+0xa>
 800906e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009070:	07d0      	lsls	r0, r2, #31
 8009072:	d404      	bmi.n	800907e <_fflush_r+0x32>
 8009074:	0599      	lsls	r1, r3, #22
 8009076:	d402      	bmi.n	800907e <_fflush_r+0x32>
 8009078:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800907a:	f7ff fa32 	bl	80084e2 <__retarget_lock_acquire_recursive>
 800907e:	4628      	mov	r0, r5
 8009080:	4621      	mov	r1, r4
 8009082:	f7ff ff5f 	bl	8008f44 <__sflush_r>
 8009086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009088:	07da      	lsls	r2, r3, #31
 800908a:	4605      	mov	r5, r0
 800908c:	d4e4      	bmi.n	8009058 <_fflush_r+0xc>
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	059b      	lsls	r3, r3, #22
 8009092:	d4e1      	bmi.n	8009058 <_fflush_r+0xc>
 8009094:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009096:	f7ff fa25 	bl	80084e4 <__retarget_lock_release_recursive>
 800909a:	e7dd      	b.n	8009058 <_fflush_r+0xc>

0800909c <__swhatbuf_r>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	460c      	mov	r4, r1
 80090a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a4:	2900      	cmp	r1, #0
 80090a6:	b096      	sub	sp, #88	@ 0x58
 80090a8:	4615      	mov	r5, r2
 80090aa:	461e      	mov	r6, r3
 80090ac:	da0d      	bge.n	80090ca <__swhatbuf_r+0x2e>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090b4:	f04f 0100 	mov.w	r1, #0
 80090b8:	bf14      	ite	ne
 80090ba:	2340      	movne	r3, #64	@ 0x40
 80090bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090c0:	2000      	movs	r0, #0
 80090c2:	6031      	str	r1, [r6, #0]
 80090c4:	602b      	str	r3, [r5, #0]
 80090c6:	b016      	add	sp, #88	@ 0x58
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	466a      	mov	r2, sp
 80090cc:	f000 f862 	bl	8009194 <_fstat_r>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	dbec      	blt.n	80090ae <__swhatbuf_r+0x12>
 80090d4:	9901      	ldr	r1, [sp, #4]
 80090d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090de:	4259      	negs	r1, r3
 80090e0:	4159      	adcs	r1, r3
 80090e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090e6:	e7eb      	b.n	80090c0 <__swhatbuf_r+0x24>

080090e8 <__smakebuf_r>:
 80090e8:	898b      	ldrh	r3, [r1, #12]
 80090ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ec:	079d      	lsls	r5, r3, #30
 80090ee:	4606      	mov	r6, r0
 80090f0:	460c      	mov	r4, r1
 80090f2:	d507      	bpl.n	8009104 <__smakebuf_r+0x1c>
 80090f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090f8:	6023      	str	r3, [r4, #0]
 80090fa:	6123      	str	r3, [r4, #16]
 80090fc:	2301      	movs	r3, #1
 80090fe:	6163      	str	r3, [r4, #20]
 8009100:	b003      	add	sp, #12
 8009102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009104:	ab01      	add	r3, sp, #4
 8009106:	466a      	mov	r2, sp
 8009108:	f7ff ffc8 	bl	800909c <__swhatbuf_r>
 800910c:	9f00      	ldr	r7, [sp, #0]
 800910e:	4605      	mov	r5, r0
 8009110:	4639      	mov	r1, r7
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff fa62 	bl	80085dc <_malloc_r>
 8009118:	b948      	cbnz	r0, 800912e <__smakebuf_r+0x46>
 800911a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800911e:	059a      	lsls	r2, r3, #22
 8009120:	d4ee      	bmi.n	8009100 <__smakebuf_r+0x18>
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	f043 0302 	orr.w	r3, r3, #2
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	e7e2      	b.n	80090f4 <__smakebuf_r+0xc>
 800912e:	89a3      	ldrh	r3, [r4, #12]
 8009130:	6020      	str	r0, [r4, #0]
 8009132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009136:	81a3      	strh	r3, [r4, #12]
 8009138:	9b01      	ldr	r3, [sp, #4]
 800913a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800913e:	b15b      	cbz	r3, 8009158 <__smakebuf_r+0x70>
 8009140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009144:	4630      	mov	r0, r6
 8009146:	f000 f837 	bl	80091b8 <_isatty_r>
 800914a:	b128      	cbz	r0, 8009158 <__smakebuf_r+0x70>
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	f023 0303 	bic.w	r3, r3, #3
 8009152:	f043 0301 	orr.w	r3, r3, #1
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	431d      	orrs	r5, r3
 800915c:	81a5      	strh	r5, [r4, #12]
 800915e:	e7cf      	b.n	8009100 <__smakebuf_r+0x18>

08009160 <memmove>:
 8009160:	4288      	cmp	r0, r1
 8009162:	b510      	push	{r4, lr}
 8009164:	eb01 0402 	add.w	r4, r1, r2
 8009168:	d902      	bls.n	8009170 <memmove+0x10>
 800916a:	4284      	cmp	r4, r0
 800916c:	4623      	mov	r3, r4
 800916e:	d807      	bhi.n	8009180 <memmove+0x20>
 8009170:	1e43      	subs	r3, r0, #1
 8009172:	42a1      	cmp	r1, r4
 8009174:	d008      	beq.n	8009188 <memmove+0x28>
 8009176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800917a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800917e:	e7f8      	b.n	8009172 <memmove+0x12>
 8009180:	4402      	add	r2, r0
 8009182:	4601      	mov	r1, r0
 8009184:	428a      	cmp	r2, r1
 8009186:	d100      	bne.n	800918a <memmove+0x2a>
 8009188:	bd10      	pop	{r4, pc}
 800918a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800918e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009192:	e7f7      	b.n	8009184 <memmove+0x24>

08009194 <_fstat_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	4d07      	ldr	r5, [pc, #28]	@ (80091b4 <_fstat_r+0x20>)
 8009198:	2300      	movs	r3, #0
 800919a:	4604      	mov	r4, r0
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	602b      	str	r3, [r5, #0]
 80091a2:	f7f8 fc08 	bl	80019b6 <_fstat>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d102      	bne.n	80091b0 <_fstat_r+0x1c>
 80091aa:	682b      	ldr	r3, [r5, #0]
 80091ac:	b103      	cbz	r3, 80091b0 <_fstat_r+0x1c>
 80091ae:	6023      	str	r3, [r4, #0]
 80091b0:	bd38      	pop	{r3, r4, r5, pc}
 80091b2:	bf00      	nop
 80091b4:	20000978 	.word	0x20000978

080091b8 <_isatty_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	4d06      	ldr	r5, [pc, #24]	@ (80091d4 <_isatty_r+0x1c>)
 80091bc:	2300      	movs	r3, #0
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	602b      	str	r3, [r5, #0]
 80091c4:	f7f8 fc07 	bl	80019d6 <_isatty>
 80091c8:	1c43      	adds	r3, r0, #1
 80091ca:	d102      	bne.n	80091d2 <_isatty_r+0x1a>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	b103      	cbz	r3, 80091d2 <_isatty_r+0x1a>
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	bd38      	pop	{r3, r4, r5, pc}
 80091d4:	20000978 	.word	0x20000978

080091d8 <_sbrk_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	4d06      	ldr	r5, [pc, #24]	@ (80091f4 <_sbrk_r+0x1c>)
 80091dc:	2300      	movs	r3, #0
 80091de:	4604      	mov	r4, r0
 80091e0:	4608      	mov	r0, r1
 80091e2:	602b      	str	r3, [r5, #0]
 80091e4:	f7f8 fc10 	bl	8001a08 <_sbrk>
 80091e8:	1c43      	adds	r3, r0, #1
 80091ea:	d102      	bne.n	80091f2 <_sbrk_r+0x1a>
 80091ec:	682b      	ldr	r3, [r5, #0]
 80091ee:	b103      	cbz	r3, 80091f2 <_sbrk_r+0x1a>
 80091f0:	6023      	str	r3, [r4, #0]
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	20000978 	.word	0x20000978

080091f8 <_realloc_r>:
 80091f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fc:	4680      	mov	r8, r0
 80091fe:	4615      	mov	r5, r2
 8009200:	460c      	mov	r4, r1
 8009202:	b921      	cbnz	r1, 800920e <_realloc_r+0x16>
 8009204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009208:	4611      	mov	r1, r2
 800920a:	f7ff b9e7 	b.w	80085dc <_malloc_r>
 800920e:	b92a      	cbnz	r2, 800921c <_realloc_r+0x24>
 8009210:	f7ff f978 	bl	8008504 <_free_r>
 8009214:	2400      	movs	r4, #0
 8009216:	4620      	mov	r0, r4
 8009218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800921c:	f000 f81a 	bl	8009254 <_malloc_usable_size_r>
 8009220:	4285      	cmp	r5, r0
 8009222:	4606      	mov	r6, r0
 8009224:	d802      	bhi.n	800922c <_realloc_r+0x34>
 8009226:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800922a:	d8f4      	bhi.n	8009216 <_realloc_r+0x1e>
 800922c:	4629      	mov	r1, r5
 800922e:	4640      	mov	r0, r8
 8009230:	f7ff f9d4 	bl	80085dc <_malloc_r>
 8009234:	4607      	mov	r7, r0
 8009236:	2800      	cmp	r0, #0
 8009238:	d0ec      	beq.n	8009214 <_realloc_r+0x1c>
 800923a:	42b5      	cmp	r5, r6
 800923c:	462a      	mov	r2, r5
 800923e:	4621      	mov	r1, r4
 8009240:	bf28      	it	cs
 8009242:	4632      	movcs	r2, r6
 8009244:	f7ff f94f 	bl	80084e6 <memcpy>
 8009248:	4621      	mov	r1, r4
 800924a:	4640      	mov	r0, r8
 800924c:	f7ff f95a 	bl	8008504 <_free_r>
 8009250:	463c      	mov	r4, r7
 8009252:	e7e0      	b.n	8009216 <_realloc_r+0x1e>

08009254 <_malloc_usable_size_r>:
 8009254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009258:	1f18      	subs	r0, r3, #4
 800925a:	2b00      	cmp	r3, #0
 800925c:	bfbc      	itt	lt
 800925e:	580b      	ldrlt	r3, [r1, r0]
 8009260:	18c0      	addlt	r0, r0, r3
 8009262:	4770      	bx	lr

08009264 <_init>:
 8009264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009266:	bf00      	nop
 8009268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800926a:	bc08      	pop	{r3}
 800926c:	469e      	mov	lr, r3
 800926e:	4770      	bx	lr

08009270 <_fini>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr
