
TD3_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007c64  08007c64  00008c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d34  08007d34  000090a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007d34  08007d34  00008d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d3c  08007d3c  000090a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d3c  08007d3c  00008d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d40  08007d40  00008d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  08007d44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200000a4  08007de8  000090a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08007de8  00009570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bf3e  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a47  00000000  00000000  00025012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  00028a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001396  00000000  00000000  0002a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b84b  00000000  00000000  0002b716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002027e  00000000  00000000  00056f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010ccd8  00000000  00000000  000771df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00183eb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007264  00000000  00000000  00183efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0018b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c4c 	.word	0x08007c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	08007c4c 	.word	0x08007c4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000566:	f107 031c 	add.w	r3, r7, #28
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
 8000580:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000582:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000584:	4a30      	ldr	r2, [pc, #192]	@ (8000648 <MX_ADC1_Init+0xe8>)
 8000586:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000588:	4b2e      	ldr	r3, [pc, #184]	@ (8000644 <MX_ADC1_Init+0xe4>)
 800058a:	2200      	movs	r2, #0
 800058c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800058e:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800059a:	4b2a      	ldr	r3, [pc, #168]	@ (8000644 <MX_ADC1_Init+0xe4>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005a2:	2204      	movs	r2, #4
 80005a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005a6:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005ac:	4b25      	ldr	r3, [pc, #148]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005b2:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80005c0:	4b20      	ldr	r3, [pc, #128]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005c2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80005c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e6:	4817      	ldr	r0, [pc, #92]	@ (8000644 <MX_ADC1_Init+0xe4>)
 80005e8:	f001 fb48 	bl	8001c7c <HAL_ADC_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80005f2:	f000 fac9 	bl	8000b88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4810      	ldr	r0, [pc, #64]	@ (8000644 <MX_ADC1_Init+0xe4>)
 8000602:	f002 fb0d 	bl	8002c20 <HAL_ADCEx_MultiModeConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800060c:	f000 fabc 	bl	8000b88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_ADC1_Init+0xec>)
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2306      	movs	r3, #6
 8000616:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800061c:	237f      	movs	r3, #127	@ 0x7f
 800061e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000620:	2304      	movs	r3, #4
 8000622:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	@ (8000644 <MX_ADC1_Init+0xe4>)
 800062e:	f001 fead 	bl	800238c <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000638:	f000 faa6 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3728      	adds	r7, #40	@ 0x28
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000c0 	.word	0x200000c0
 8000648:	50040000 	.word	0x50040000
 800064c:	25b00200 	.word	0x25b00200

08000650 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0ac      	sub	sp, #176	@ 0xb0
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2288      	movs	r2, #136	@ 0x88
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f006 fc9e 	bl	8006fb2 <memset>
  if(adcHandle->Instance==ADC1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <HAL_ADC_MspInit+0xd8>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d14f      	bne.n	8000720 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000684:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000686:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800068a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800068e:	2302      	movs	r3, #2
 8000690:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000696:	2308      	movs	r3, #8
 8000698:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800069a:	2307      	movs	r3, #7
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80006a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fdf5 	bl	80042a0 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80006bc:	f000 fa64 	bl	8000b88 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80006c0:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a19      	ldr	r2, [pc, #100]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a13      	ldr	r2, [pc, #76]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <HAL_ADC_MspInit+0xdc>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006f0:	2310      	movs	r3, #16
 80006f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006f6:	230b      	movs	r3, #11
 80006f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000706:	4619      	mov	r1, r3
 8000708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070c:	f002 fc1a 	bl	8002f44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	2012      	movs	r0, #18
 8000716:	f002 fbeb 	bl	8002ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800071a:	2012      	movs	r0, #18
 800071c:	f002 fc04 	bl	8002f28 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000720:	bf00      	nop
 8000722:	37b0      	adds	r7, #176	@ 0xb0
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	50040000 	.word	0x50040000
 800072c:	40021000 	.word	0x40021000

08000730 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	@ 0x28
 8000734:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b66      	ldr	r3, [pc, #408]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	4a65      	ldr	r2, [pc, #404]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000752:	4b63      	ldr	r3, [pc, #396]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b60      	ldr	r3, [pc, #384]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	4a5f      	ldr	r2, [pc, #380]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076a:	4b5d      	ldr	r3, [pc, #372]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b5a      	ldr	r3, [pc, #360]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a59      	ldr	r2, [pc, #356]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b57      	ldr	r3, [pc, #348]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b54      	ldr	r3, [pc, #336]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a53      	ldr	r2, [pc, #332]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b51      	ldr	r3, [pc, #324]	@ (80008e0 <MX_GPIO_Init+0x1b0>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2101      	movs	r1, #1
 80007aa:	484e      	ldr	r0, [pc, #312]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007ac:	f002 fd74 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 611a 	mov.w	r1, #2464	@ 0x9a0
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ba:	f002 fd6d 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 80007be:	2200      	movs	r2, #0
 80007c0:	f24e 0136 	movw	r1, #57398	@ 0xe036
 80007c4:	4848      	ldr	r0, [pc, #288]	@ (80008e8 <MX_GPIO_Init+0x1b8>)
 80007c6:	f002 fd67 	bl	8003298 <HAL_GPIO_WritePin>
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2180      	movs	r1, #128	@ 0x80
 80007ce:	4845      	ldr	r0, [pc, #276]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007d0:	f002 fd62 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STEPPER_ENN_GPIO_Port, STEPPER_ENN_Pin, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007de:	f002 fd5b 	bl	8003298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	483a      	ldr	r0, [pc, #232]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 80007fa:	f002 fba3 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin|LED_0_Pin;
 80007fe:	2381      	movs	r3, #129	@ 0x81
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4833      	ldr	r0, [pc, #204]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 8000816:	f002 fb95 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAGNETO_STATUS_Pin;
 800081a:	2302      	movs	r3, #2
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MAGNETO_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	482d      	ldr	r0, [pc, #180]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 800082e:	f002 fb89 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEPPER_DIR_Pin|LED_2_Pin|STEPPER_MS1_Pin
 8000832:	f44f 53cd 	mov.w	r3, #6560	@ 0x19a0
 8000836:	617b      	str	r3, [r7, #20]
                          |STEPPER_ENN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084e:	f002 fb79 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin|BTN_CENTER_Pin|BTN_LEFT_Pin|BTN_TOP_Pin
 8000852:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8000856:	617b      	str	r3, [r7, #20]
                          |BTN_RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000858:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800085c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	481e      	ldr	r0, [pc, #120]	@ (80008e4 <MX_GPIO_Init+0x1b4>)
 800086a:	f002 fb6b 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = MAGNETO_INT_Pin|BTN_BOTTOM_Pin;
 800086e:	f640 0301 	movw	r3, #2049	@ 0x801
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000874:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4818      	ldr	r0, [pc, #96]	@ (80008e8 <MX_GPIO_Init+0x1b8>)
 8000886:	f002 fb5d 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_3_Pin|LED_1_Pin|GPS_ENN_Pin|LED_6_Pin
 800088a:	f24e 0336 	movw	r3, #57398	@ 0xe036
 800088e:	617b      	str	r3, [r7, #20]
                          |LED_4_Pin|LED_5_Pin|LED_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4811      	ldr	r0, [pc, #68]	@ (80008e8 <MX_GPIO_Init+0x1b8>)
 80008a4:	f002 fb4e 	bl	8002f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80008a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008c2:	f002 fb3f 	bl	8002f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2028      	movs	r0, #40	@ 0x28
 80008cc:	f002 fb10 	bl	8002ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d0:	2028      	movs	r0, #40	@ 0x28
 80008d2:	f002 fb29 	bl	8002f28 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	@ 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40021000 	.word	0x40021000
 80008e4:	48000800 	.word	0x48000800
 80008e8:	48000400 	.word	0x48000400

080008ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000964 <MX_I2C1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000968 <MX_I2C1_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_I2C1_Init+0x74>)
 8000928:	f002 fcf1 	bl	800330e <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 f929 	bl	8000b88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <MX_I2C1_Init+0x74>)
 800093a:	f002 fd83 	bl	8003444 <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 f920 	bl	8000b88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	@ (8000960 <MX_I2C1_Init+0x74>)
 800094c:	f002 fdc5 	bl	80034da <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 f917 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000124 	.word	0x20000124
 8000964:	40005400 	.word	0x40005400
 8000968:	10909cec 	.word	0x10909cec

0800096c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b0ac      	sub	sp, #176	@ 0xb0
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2288      	movs	r2, #136	@ 0x88
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f006 fb10 	bl	8006fb2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <HAL_I2C_MspInit+0xb0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d13a      	bne.n	8000a12 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fc79 	bl	80042a0 <HAL_RCCEx_PeriphCLKConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009b4:	f000 f8e8 	bl	8000b88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <HAL_I2C_MspInit+0xb4>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	4a18      	ldr	r2, [pc, #96]	@ (8000a20 <HAL_I2C_MspInit+0xb4>)
 80009be:	f043 0302 	orr.w	r3, r3, #2
 80009c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c4:	4b16      	ldr	r3, [pc, #88]	@ (8000a20 <HAL_I2C_MspInit+0xb4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009d0:	23c0      	movs	r3, #192	@ 0xc0
 80009d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d6:	2312      	movs	r3, #18
 80009d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e8:	2304      	movs	r3, #4
 80009ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009f2:	4619      	mov	r1, r3
 80009f4:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <HAL_I2C_MspInit+0xb8>)
 80009f6:	f002 faa5 	bl	8002f44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	@ (8000a20 <HAL_I2C_MspInit+0xb4>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009fe:	4a08      	ldr	r2, [pc, #32]	@ (8000a20 <HAL_I2C_MspInit+0xb4>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a06:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_I2C_MspInit+0xb4>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	37b0      	adds	r7, #176	@ 0xb0
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40021000 	.word	0x40021000
 8000a24:	48000400 	.word	0x48000400

08000a28 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)

{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a30:	1d39      	adds	r1, r7, #4
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	2201      	movs	r2, #1
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <__io_putchar+0x20>)
 8000a3a:	f005 fb75 	bl	8006128 <HAL_UART_Transmit>

return ch;
 8000a3e:	687b      	ldr	r3, [r7, #4]

}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000398 	.word	0x20000398

08000a4c <__io_getchar>:



int __io_getchar(void)

{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

uint8_t ch = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]

__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000a56:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <__io_getchar+0x38>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	621a      	str	r2, [r3, #32]

HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a5e:	1df9      	adds	r1, r7, #7
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	2201      	movs	r2, #1
 8000a66:	4807      	ldr	r0, [pc, #28]	@ (8000a84 <__io_getchar+0x38>)
 8000a68:	f005 fbe7 	bl	800623a <HAL_UART_Receive>

HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a6c:	1df9      	adds	r1, r7, #7
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	2201      	movs	r2, #1
 8000a74:	4803      	ldr	r0, [pc, #12]	@ (8000a84 <__io_getchar+0x38>)
 8000a76:	f005 fb57 	bl	8006128 <HAL_UART_Transmit>

return ch;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]

}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000398 	.word	0x20000398

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8c:	f000 fee8 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a90:	f000 f817 	bl	8000ac2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a94:	f7ff fe4c 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a98:	f000 fcc8 	bl	800142c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a9c:	f7ff ff26 	bl	80008ec <MX_I2C1_Init>
  MX_SPI2_Init();
 8000aa0:	f000 f878 	bl	8000b94 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000aa4:	f000 fac8 	bl	8001038 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aa8:	f000 fb1a 	bl	80010e0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000aac:	f000 fc8e 	bl	80013cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000ab0:	f7ff fd56 	bl	8000560 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000ab4:	f000 fb8c 	bl	80011d0 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setup();
 8000ab8:	f000 fd8a 	bl	80015d0 <setup>
  while (1)
  {

	  loop();
 8000abc:	f000 fdec 	bl	8001698 <loop>
 8000ac0:	e7fc      	b.n	8000abc <main+0x34>

08000ac2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b096      	sub	sp, #88	@ 0x58
 8000ac6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2244      	movs	r2, #68	@ 0x44
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f006 fa6e 	bl	8006fb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ae8:	f002 fd52 	bl	8003590 <HAL_PWREx_ControlVoltageScaling>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af2:	f000 f849 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af6:	2302      	movs	r3, #2
 8000af8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000afa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b00:	2310      	movs	r3, #16
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b04:	2302      	movs	r3, #2
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b10:	230a      	movs	r3, #10
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b14:	2307      	movs	r3, #7
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fd89 	bl	800363c <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b30:	f000 f82a 	bl	8000b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b34:	230f      	movs	r3, #15
 8000b36:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f003 f951 	bl	8003df4 <HAL_RCC_ClockConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b58:	f000 f816 	bl	8000b88 <Error_Handler>
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	3758      	adds	r7, #88	@ 0x58
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b76:	f000 fe93 	bl	80018a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40001000 	.word	0x40001000

08000b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b8c:	b672      	cpsid	i
}
 8000b8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <Error_Handler+0x8>

08000b94 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <MX_SPI2_Init+0x78>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000ba0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bae:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bb2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bba:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bca:	2230      	movs	r2, #48	@ 0x30
 8000bcc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000be2:	2207      	movs	r2, #7
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bec:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bf2:	4805      	ldr	r0, [pc, #20]	@ (8000c08 <MX_SPI2_Init+0x74>)
 8000bf4:	f004 f810 	bl	8004c18 <HAL_SPI_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bfe:	f7ff ffc3 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000178 	.word	0x20000178
 8000c0c:	40003800 	.word	0x40003800

08000c10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	@ 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a25      	ldr	r2, [pc, #148]	@ (8000cc4 <HAL_SPI_MspInit+0xb4>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d144      	bne.n	8000cbc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c32:	4b25      	ldr	r3, [pc, #148]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c36:	4a24      	ldr	r2, [pc, #144]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c3e:	4b22      	ldr	r3, [pc, #136]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c50:	f043 0304 	orr.w	r3, r3, #4
 8000c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	f003 0304 	and.w	r3, r3, #4
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <HAL_SPI_MspInit+0xb8>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c7a:	230c      	movs	r3, #12
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c8a:	2305      	movs	r3, #5
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <HAL_SPI_MspInit+0xbc>)
 8000c96:	f002 f955 	bl	8002f44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cac:	2305      	movs	r3, #5
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <HAL_SPI_MspInit+0xc0>)
 8000cb8:	f002 f944 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	@ 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40003800 	.word	0x40003800
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000800 	.word	0x48000800
 8000cd0:	48000400 	.word	0x48000400

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	@ 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d2a:	4b34      	ldr	r3, [pc, #208]	@ (8000dfc <HAL_InitTick+0xe0>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2e:	4a33      	ldr	r2, [pc, #204]	@ (8000dfc <HAL_InitTick+0xe0>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d36:	4b31      	ldr	r3, [pc, #196]	@ (8000dfc <HAL_InitTick+0xe0>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d42:	f107 0210 	add.w	r2, r7, #16
 8000d46:	f107 0314 	add.w	r3, r7, #20
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 fa15 	bl	800417c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d103      	bne.n	8000d64 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d5c:	f003 f9e2 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8000d60:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d62:	e004      	b.n	8000d6e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d64:	f003 f9de 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d70:	4a23      	ldr	r2, [pc, #140]	@ (8000e00 <HAL_InitTick+0xe4>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	0c9b      	lsrs	r3, r3, #18
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d7e:	4a22      	ldr	r2, [pc, #136]	@ (8000e08 <HAL_InitTick+0xec>)
 8000d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d82:	4b20      	ldr	r3, [pc, #128]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d84:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000da2:	4818      	ldr	r0, [pc, #96]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000da4:	f003 ffdb 	bl	8004d5e <HAL_TIM_Base_Init>
 8000da8:	4603      	mov	r3, r0
 8000daa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000dae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d11b      	bne.n	8000dee <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000db6:	4813      	ldr	r0, [pc, #76]	@ (8000e04 <HAL_InitTick+0xe8>)
 8000db8:	f004 f828 	bl	8004e0c <HAL_TIM_Base_Start_IT>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d111      	bne.n	8000dee <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dca:	2036      	movs	r0, #54	@ 0x36
 8000dcc:	f002 f8ac 	bl	8002f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b0f      	cmp	r3, #15
 8000dd4:	d808      	bhi.n	8000de8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	6879      	ldr	r1, [r7, #4]
 8000dda:	2036      	movs	r0, #54	@ 0x36
 8000ddc:	f002 f888 	bl	8002ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <HAL_InitTick+0xf0>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e002      	b.n	8000dee <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3738      	adds	r7, #56	@ 0x38
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	200001dc 	.word	0x200001dc
 8000e08:	40001000 	.word	0x40001000
 8000e0c:	20000040 	.word	0x20000040

08000e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <NMI_Handler+0x4>

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <MemManage_Handler+0x4>

08000e28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e74:	4802      	ldr	r0, [pc, #8]	@ (8000e80 <ADC1_2_IRQHandler+0x10>)
 8000e76:	f001 f851 	bl	8001f1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000c0 	.word	0x200000c0

08000e84 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e88:	4802      	ldr	r0, [pc, #8]	@ (8000e94 <TIM4_IRQHandler+0x10>)
 8000e8a:	f004 f936 	bl	80050fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200002c4 	.word	0x200002c4

08000e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_BOTTOM_Pin);
 8000e9c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ea0:	f002 fa12 	bl	80032c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ea4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ea8:	f002 fa0e 	bl	80032c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8000eac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000eb0:	f002 fa0a 	bl	80032c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <TIM6_DAC_IRQHandler+0x10>)
 8000ebe:	f004 f91c 	bl	80050fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200001dc 	.word	0x200001dc

08000ecc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ede:	f7ff fdb5 	bl	8000a4c <__io_getchar>
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
  }

  return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	e009      	b.n	8000f2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	60ba      	str	r2, [r7, #8]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff fd81 	bl	8000a28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697a      	ldr	r2, [r7, #20]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	dbf1      	blt.n	8000f18 <_write+0x12>
  }
  return len;
 8000f34:	687b      	ldr	r3, [r7, #4]
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_close>:

int _close(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f66:	605a      	str	r2, [r3, #4]
  return 0;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr

08000f76 <_isatty>:

int _isatty(int file)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	@ (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	@ (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	@ (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f006 f83a 	bl	8007050 <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	@ (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20018000 	.word	0x20018000
 8001008:	00000400 	.word	0x00000400
 800100c:	20000228 	.word	0x20000228
 8001010:	20000570 	.word	0x20000570

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <SystemInit+0x20>)
 800101a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <SystemInit+0x20>)
 8001020:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001024:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	@ 0x30
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2224      	movs	r2, #36	@ 0x24
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f005 ffb3 	bl	8006fb2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	463b      	mov	r3, r7
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_TIM2_Init+0xa4>)
 8001058:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800105c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800105e:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <MX_TIM2_Init+0xa4>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_TIM2_Init+0xa4>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_TIM2_Init+0xa4>)
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_TIM2_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001078:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_TIM2_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800107e:	2301      	movs	r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <MX_TIM2_Init+0xa4>)
 80010aa:	f003 ff80 	bl	8004fae <HAL_TIM_Encoder_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010b4:	f7ff fd68 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	@ (80010dc <MX_TIM2_Init+0xa4>)
 80010c6:	f004 ff3b 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80010d0:	f7ff fd5a 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3730      	adds	r7, #48	@ 0x30
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000022c 	.word	0x2000022c

080010e0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08e      	sub	sp, #56	@ 0x38
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001112:	4b2d      	ldr	r3, [pc, #180]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001114:	4a2d      	ldr	r2, [pc, #180]	@ (80011cc <MX_TIM3_Init+0xec>)
 8001116:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001118:	4b2b      	ldr	r3, [pc, #172]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b2a      	ldr	r3, [pc, #168]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001126:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800112a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b26      	ldr	r3, [pc, #152]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001132:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001138:	4823      	ldr	r0, [pc, #140]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 800113a:	f003 fe10 	bl	8004d5e <HAL_TIM_Base_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001144:	f7ff fd20 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800114e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001152:	4619      	mov	r1, r3
 8001154:	481c      	ldr	r0, [pc, #112]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001156:	f004 f9eb 	bl	8005530 <HAL_TIM_ConfigClockSource>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001160:	f7ff fd12 	bl	8000b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001164:	4818      	ldr	r0, [pc, #96]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001166:	f003 fec1 	bl	8004eec <HAL_TIM_PWM_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001170:	f7ff fd0a 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 8001184:	f004 fedc 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800118e:	f7ff fcfb 	bl	8000b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001192:	2360      	movs	r3, #96	@ 0x60
 8001194:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	4619      	mov	r1, r3
 80011a8:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 80011aa:	f004 f8ad 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011b4:	f7ff fce8 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011b8:	4803      	ldr	r0, [pc, #12]	@ (80011c8 <MX_TIM3_Init+0xe8>)
 80011ba:	f000 f8d1 	bl	8001360 <HAL_TIM_MspPostInit>

}
 80011be:	bf00      	nop
 80011c0:	3738      	adds	r7, #56	@ 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000278 	.word	0x20000278
 80011cc:	40000400 	.word	0x40000400

080011d0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <MX_TIM4_Init+0x94>)
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <MX_TIM4_Init+0x98>)
 80011f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001264 <MX_TIM4_Init+0x94>)
 80011f6:	224f      	movs	r2, #79	@ 0x4f
 80011f8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <MX_TIM4_Init+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001200:	4b18      	ldr	r3, [pc, #96]	@ (8001264 <MX_TIM4_Init+0x94>)
 8001202:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001206:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <MX_TIM4_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <MX_TIM4_Init+0x94>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001214:	4813      	ldr	r0, [pc, #76]	@ (8001264 <MX_TIM4_Init+0x94>)
 8001216:	f003 fda2 	bl	8004d5e <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001220:	f7ff fcb2 	bl	8000b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001228:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <MX_TIM4_Init+0x94>)
 8001232:	f004 f97d 	bl	8005530 <HAL_TIM_ConfigClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800123c:	f7ff fca4 	bl	8000b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001240:	2320      	movs	r3, #32
 8001242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_TIM4_Init+0x94>)
 800124e:	f004 fe77 	bl	8005f40 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001258:	f7ff fc96 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200002c4 	.word	0x200002c4
 8001268:	40000800 	.word	0x40000800

0800126c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800128c:	d128      	bne.n	80012e0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128e:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001292:	4a15      	ldr	r2, [pc, #84]	@ (80012e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6593      	str	r3, [r2, #88]	@ 0x58
 800129a:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800129c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <HAL_TIM_Encoder_MspInit+0x7c>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012be:	2303      	movs	r3, #3
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012ce:	2301      	movs	r3, #1
 80012d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012dc:	f001 fe32 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	@ 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <HAL_TIM_Base_MspInit+0x68>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d10c      	bne.n	8001318 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012fe:	4b16      	ldr	r3, [pc, #88]	@ (8001358 <HAL_TIM_Base_MspInit+0x6c>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	4a15      	ldr	r2, [pc, #84]	@ (8001358 <HAL_TIM_Base_MspInit+0x6c>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6593      	str	r3, [r2, #88]	@ 0x58
 800130a:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <HAL_TIM_Base_MspInit+0x6c>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001316:	e018      	b.n	800134a <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0f      	ldr	r2, [pc, #60]	@ (800135c <HAL_TIM_Base_MspInit+0x70>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d113      	bne.n	800134a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001322:	4b0d      	ldr	r3, [pc, #52]	@ (8001358 <HAL_TIM_Base_MspInit+0x6c>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	4a0c      	ldr	r2, [pc, #48]	@ (8001358 <HAL_TIM_Base_MspInit+0x6c>)
 8001328:	f043 0304 	orr.w	r3, r3, #4
 800132c:	6593      	str	r3, [r2, #88]	@ 0x58
 800132e:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <HAL_TIM_Base_MspInit+0x6c>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	201e      	movs	r0, #30
 8001340:	f001 fdd6 	bl	8002ef0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001344:	201e      	movs	r0, #30
 8001346:	f001 fdef 	bl	8002f28 <HAL_NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40000400 	.word	0x40000400
 8001358:	40021000 	.word	0x40021000
 800135c:	40000800 	.word	0x40000800

08001360 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <HAL_TIM_MspPostInit+0x64>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d11c      	bne.n	80013bc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_TIM_MspPostInit+0x68>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	4a10      	ldr	r2, [pc, #64]	@ (80013c8 <HAL_TIM_MspPostInit+0x68>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <HAL_TIM_MspPostInit+0x68>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013b8:	f001 fdc4 	bl	8002f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40021000 	.word	0x40021000

080013cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d0:	4b14      	ldr	r3, [pc, #80]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013d2:	4a15      	ldr	r2, [pc, #84]	@ (8001428 <MX_USART1_UART_Init+0x5c>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b11      	ldr	r3, [pc, #68]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 800140a:	2200      	movs	r2, #0
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_USART1_UART_Init+0x58>)
 8001410:	f004 fe3c 	bl	800608c <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800141a:	f7ff fbb5 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000310 	.word	0x20000310
 8001428:	40013800 	.word	0x40013800

0800142c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001430:	4b14      	ldr	r3, [pc, #80]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <MX_USART2_UART_Init+0x5c>)
 8001434:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001436:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800143c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800143e:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001440:	2200      	movs	r2, #0
 8001442:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001444:	4b0f      	ldr	r3, [pc, #60]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001446:	2200      	movs	r2, #0
 8001448:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001452:	220c      	movs	r2, #12
 8001454:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 800145e:	2200      	movs	r2, #0
 8001460:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 800146a:	2200      	movs	r2, #0
 800146c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_USART2_UART_Init+0x58>)
 8001470:	f004 fe0c 	bl	800608c <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800147a:	f7ff fb85 	bl	8000b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000398 	.word	0x20000398
 8001488:	40004400 	.word	0x40004400

0800148c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b0ae      	sub	sp, #184	@ 0xb8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	2288      	movs	r2, #136	@ 0x88
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 fd80 	bl	8006fb2 <memset>
  if(uartHandle->Instance==USART1)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a43      	ldr	r2, [pc, #268]	@ (80015c4 <HAL_UART_MspInit+0x138>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d13d      	bne.n	8001538 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014bc:	2301      	movs	r3, #1
 80014be:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014c0:	2300      	movs	r3, #0
 80014c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fee9 	bl	80042a0 <HAL_RCCEx_PeriphCLKConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014d4:	f7ff fb58 	bl	8000b88 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014d8:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014dc:	4a3a      	ldr	r2, [pc, #232]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 80014de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80014e4:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b35      	ldr	r3, [pc, #212]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 80014f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f4:	4a34      	ldr	r2, [pc, #208]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fc:	4b32      	ldr	r3, [pc, #200]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001508:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800150c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001510:	2302      	movs	r3, #2
 8001512:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151c:	2303      	movs	r3, #3
 800151e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001522:	2307      	movs	r3, #7
 8001524:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800152c:	4619      	mov	r1, r3
 800152e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001532:	f001 fd07 	bl	8002f44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001536:	e040      	b.n	80015ba <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART2)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <HAL_UART_MspInit+0x140>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d13b      	bne.n	80015ba <HAL_UART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001542:	2302      	movs	r3, #2
 8001544:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001546:	2300      	movs	r3, #0
 8001548:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fea6 	bl	80042a0 <HAL_RCCEx_PeriphCLKConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800155a:	f7ff fb15 	bl	8000b88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 8001564:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001568:	6593      	str	r3, [r2, #88]	@ 0x58
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a13      	ldr	r2, [pc, #76]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_UART_MspInit+0x13c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800158e:	230c      	movs	r3, #12
 8001590:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b6:	f001 fcc5 	bl	8002f44 <HAL_GPIO_Init>
}
 80015ba:	bf00      	nop
 80015bc:	37b8      	adds	r7, #184	@ 0xb8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40013800 	.word	0x40013800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40004400 	.word	0x40004400

080015d0 <setup>:
#define ARRAY_SIZE 15

int arrayTest[ARRAY_SIZE]={0, 1,-3, 10,-1, 0, 0, 0, 0, 12, 1024, 10, 45, 6, 4};

void setup()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b0a4      	sub	sp, #144	@ 0x90
 80015d4:	af02      	add	r7, sp, #8
	 int ignored[ARRAY_SIZE]={0};
 80015d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80015da:	223c      	movs	r2, #60	@ 0x3c
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f005 fce7 	bl	8006fb2 <memset>
	 int index,min;
	 getMinPosition(arrayTest, ignored, ARRAY_SIZE,&index,&min);
 80015e4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80015e8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80015ec:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	4613      	mov	r3, r2
 80015f4:	220f      	movs	r2, #15
 80015f6:	4824      	ldr	r0, [pc, #144]	@ (8001688 <setup+0xb8>)
 80015f8:	f000 f855 	bl	80016a6 <getMinPosition>
	 printf("First min at : %d \n\r",index);
 80015fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80015fe:	4619      	mov	r1, r3
 8001600:	4822      	ldr	r0, [pc, #136]	@ (800168c <setup+0xbc>)
 8001602:	f005 fc79 	bl	8006ef8 <iprintf>
	 ignored[index]=1;
 8001606:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	3388      	adds	r3, #136	@ 0x88
 800160c:	443b      	add	r3, r7
 800160e:	2201      	movs	r2, #1
 8001610:	f843 2c44 	str.w	r2, [r3, #-68]
	 getMinPosition(arrayTest, ignored, ARRAY_SIZE,&index,&min);
 8001614:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001618:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800161c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	4613      	mov	r3, r2
 8001624:	220f      	movs	r2, #15
 8001626:	4818      	ldr	r0, [pc, #96]	@ (8001688 <setup+0xb8>)
 8001628:	f000 f83d 	bl	80016a6 <getMinPosition>
	 printf("Second min at : %d \n\r",index);
 800162c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800162e:	4619      	mov	r1, r3
 8001630:	4817      	ldr	r0, [pc, #92]	@ (8001690 <setup+0xc0>)
 8001632:	f005 fc61 	bl	8006ef8 <iprintf>
	 int sorted[ARRAY_SIZE]={0};
 8001636:	463b      	mov	r3, r7
 8001638:	223c      	movs	r2, #60	@ 0x3c
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f005 fcb8 	bl	8006fb2 <memset>
	 long start=HAL_GetTick();
 8001642:	f000 f941 	bl	80018c8 <HAL_GetTick>
 8001646:	4603      	mov	r3, r0
 8001648:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	 sortArray(arrayTest, sorted, ARRAY_SIZE);
 800164c:	463b      	mov	r3, r7
 800164e:	220f      	movs	r2, #15
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	@ (8001688 <setup+0xb8>)
 8001654:	f000 f880 	bl	8001758 <sortArray>
	 long stop=HAL_GetTick();
 8001658:	f000 f936 	bl	80018c8 <HAL_GetTick>
 800165c:	4603      	mov	r3, r0
 800165e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	 printf("Solved in %ld milliseconds\n\r", stop-start);
 8001662:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4619      	mov	r1, r3
 800166e:	4809      	ldr	r0, [pc, #36]	@ (8001694 <setup+0xc4>)
 8001670:	f005 fc42 	bl	8006ef8 <iprintf>
	 displayArray(sorted, ARRAY_SIZE);
 8001674:	463b      	mov	r3, r7
 8001676:	210f      	movs	r1, #15
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f8a5 	bl	80017c8 <displayArray>


}
 800167e:	bf00      	nop
 8001680:	3788      	adds	r7, #136	@ 0x88
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000004 	.word	0x20000004
 800168c:	08007c64 	.word	0x08007c64
 8001690:	08007c7c 	.word	0x08007c7c
 8001694:	08007c94 	.word	0x08007c94

08001698 <loop>:
void loop()
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0


}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <getMinPosition>:
void getMinPosition(int * array, int * toBeIgnored, int size,int * index,int * min)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b087      	sub	sp, #28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
 80016b2:	603b      	str	r3, [r7, #0]
	int i;
	*index=-1;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	601a      	str	r2, [r3, #0]
    for (i = 0; i < size; i++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e014      	b.n	80016ec <getMinPosition+0x46>
    {
        if (toBeIgnored[i] != 1)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4413      	add	r3, r2
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d00a      	beq.n	80016e6 <getMinPosition+0x40>
        {
            *min = array[i];
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	601a      	str	r2, [r3, #0]
            *index = i;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	601a      	str	r2, [r3, #0]
            break;
 80016e4:	e006      	b.n	80016f4 <getMinPosition+0x4e>
    for (i = 0; i < size; i++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbe6      	blt.n	80016c2 <getMinPosition+0x1c>
        }
    }
    if (*index == -1)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d026      	beq.n	800174c <getMinPosition+0xa6>
    {
        return;
    }
	for (i=*index +1;i< size; i++ )
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	e01c      	b.n	8001742 <getMinPosition+0x9c>
	{
		if((toBeIgnored[i]!=1)&&(array[i]<*min))
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4413      	add	r3, r2
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d012      	beq.n	800173c <getMinPosition+0x96>
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4413      	add	r3, r2
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	da09      	bge.n	800173c <getMinPosition+0x96>
		{
			*min=array[i];
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4413      	add	r3, r2
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	601a      	str	r2, [r3, #0]
			*index=i;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	601a      	str	r2, [r3, #0]
	for (i=*index +1;i< size; i++ )
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	429a      	cmp	r2, r3
 8001748:	dbde      	blt.n	8001708 <getMinPosition+0x62>
 800174a:	e000      	b.n	800174e <getMinPosition+0xa8>
        return;
 800174c:	bf00      	nop
		}
	}
}
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <sortArray>:
int sortArray(int * toSort, int * sorted, int size)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b098      	sub	sp, #96	@ 0x60
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	int sortedPosition[ARRAY_SIZE]={0};
 8001764:	f107 0318 	add.w	r3, r7, #24
 8001768:	223c      	movs	r2, #60	@ 0x3c
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fc20 	bl	8006fb2 <memset>
	int i,min,index;
	for(i=0;i<size;i++)
 8001772:	2300      	movs	r3, #0
 8001774:	657b      	str	r3, [r7, #84]	@ 0x54
 8001776:	e01b      	b.n	80017b0 <sortArray+0x58>
	{
		getMinPosition(arrayTest,sortedPosition,ARRAY_SIZE,&index,&min);
 8001778:	f107 0210 	add.w	r2, r7, #16
 800177c:	f107 0118 	add.w	r1, r7, #24
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	4613      	mov	r3, r2
 8001788:	220f      	movs	r2, #15
 800178a:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <sortArray+0x6c>)
 800178c:	f7ff ff8b 	bl	80016a6 <getMinPosition>
		sortedPosition[index]=1;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	3358      	adds	r3, #88	@ 0x58
 8001796:	443b      	add	r3, r7
 8001798:	2201      	movs	r2, #1
 800179a:	f843 2c40 	str.w	r2, [r3, #-64]
		sorted[i]=min;
 800179e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	601a      	str	r2, [r3, #0]
	for(i=0;i<size;i++)
 80017aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017ac:	3301      	adds	r3, #1
 80017ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80017b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbdf      	blt.n	8001778 <sortArray+0x20>
	}
		return 0;
 80017b8:	2300      	movs	r3, #0

}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3758      	adds	r7, #88	@ 0x58
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000004 	.word	0x20000004

080017c8 <displayArray>:
void displayArray(int array[], int size)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e00b      	b.n	80017f0 <displayArray+0x28>
    {
        printf("%d ", array[i]);  // Affiche chaque élément du tableau
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4808      	ldr	r0, [pc, #32]	@ (8001808 <displayArray+0x40>)
 80017e6:	f005 fb87 	bl	8006ef8 <iprintf>
    for (int i = 0; i < size; i++)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbef      	blt.n	80017d8 <displayArray+0x10>
    }
    printf("\n");  // Retour à la ligne après avoir affiché tous les éléments
 80017f8:	200a      	movs	r0, #10
 80017fa:	f005 fb8f 	bl	8006f1c <putchar>
}
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	08007cb4 	.word	0x08007cb4

0800180c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001844 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff fc00 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <LoopForever+0x6>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	@ (800184c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <LoopForever+0xe>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	@ (8001858 <LoopForever+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f005 fc0f 	bl	800705c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800183e:	f7ff f923 	bl	8000a88 <main>

08001842 <LoopForever>:

LoopForever:
    b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001844:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001850:	08007d44 	.word	0x08007d44
  ldr r2, =_sbss
 8001854:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001858:	20000570 	.word	0x20000570

0800185c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC3_IRQHandler>
	...

08001860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186a:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <HAL_Init+0x3c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0b      	ldr	r2, [pc, #44]	@ (800189c <HAL_Init+0x3c>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001874:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001876:	2003      	movs	r0, #3
 8001878:	f001 fb2f 	bl	8002eda <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187c:	200f      	movs	r0, #15
 800187e:	f7ff fa4d 	bl	8000d1c <HAL_InitTick>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	e001      	b.n	8001892 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800188e:	f7ff fa21 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_IncTick+0x20>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_IncTick+0x24>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4413      	add	r3, r2
 80018b0:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <HAL_IncTick+0x24>)
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000044 	.word	0x20000044
 80018c4:	20000420 	.word	0x20000420

080018c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return uwTick;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <HAL_GetTick+0x14>)
 80018ce:	681b      	ldr	r3, [r3, #0]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000420 	.word	0x20000420

080018e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	609a      	str	r2, [r3, #8]
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	609a      	str	r2, [r3, #8]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
 8001954:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3360      	adds	r3, #96	@ 0x60
 800195a:	461a      	mov	r2, r3
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <LL_ADC_SetOffset+0x44>)
 800196a:	4013      	ands	r3, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	4313      	orrs	r3, r2
 8001978:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001980:	bf00      	nop
 8001982:	371c      	adds	r7, #28
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	03fff000 	.word	0x03fff000

08001990 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3360      	adds	r3, #96	@ 0x60
 800199e:	461a      	mov	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	3360      	adds	r3, #96	@ 0x60
 80019cc:	461a      	mov	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019e6:	bf00      	nop
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b087      	sub	sp, #28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3330      	adds	r3, #48	@ 0x30
 8001a28:	461a      	mov	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	211f      	movs	r1, #31
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0e9b      	lsrs	r3, r3, #26
 8001a50:	f003 011f 	and.w	r1, r3, #31
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f003 031f 	and.w	r3, r3, #31
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a64:	bf00      	nop
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3314      	adds	r3, #20
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	0e5b      	lsrs	r3, r3, #25
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0d1b      	lsrs	r3, r3, #20
 8001abe:	f003 031f 	and.w	r3, r3, #31
 8001ac2:	2107      	movs	r1, #7
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	401a      	ands	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	0d1b      	lsrs	r3, r3, #20
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	431a      	orrs	r2, r3
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ae0:	bf00      	nop
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	43db      	mvns	r3, r3
 8001b06:	401a      	ands	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0318 	and.w	r3, r3, #24
 8001b0e:	4908      	ldr	r1, [pc, #32]	@ (8001b30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b10:	40d9      	lsrs	r1, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	400b      	ands	r3, r1
 8001b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b22:	bf00      	nop
 8001b24:	3714      	adds	r7, #20
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	0007ffff 	.word	0x0007ffff

08001b34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 031f 	and.w	r3, r3, #31
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6093      	str	r3, [r2, #8]
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ba0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ba4:	d101      	bne.n	8001baa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bcc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bf4:	d101      	bne.n	8001bfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_IsEnabled+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_IsEnabled+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d101      	bne.n	8001c46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d101      	bne.n	8001c6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e130      	b.n	8001ef8 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7fe fcd3 	bl	8000650 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff67 	bl	8001b90 <LL_ADC_IsDeepPowerDownEnabled>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d004      	beq.n	8001cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff4d 	bl	8001b6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff ff82 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d115      	bne.n	8001d0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff66 	bl	8001bb8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cec:	4b84      	ldr	r3, [pc, #528]	@ (8001f00 <HAL_ADC_Init+0x284>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	099b      	lsrs	r3, r3, #6
 8001cf2:	4a84      	ldr	r2, [pc, #528]	@ (8001f04 <HAL_ADC_Init+0x288>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d00:	e002      	b.n	8001d08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f9      	bne.n	8001d02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff64 	bl	8001be0 <LL_ADC_IsInternalRegulatorEnabled>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10d      	bne.n	8001d3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d22:	f043 0210 	orr.w	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff75 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 8001d44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 80c9 	bne.w	8001ee6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 80c5 	bne.w	8001ee6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d60:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d64:	f043 0202 	orr.w	r2, r3, #2
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff49 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d115      	bne.n	8001da8 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d7c:	4862      	ldr	r0, [pc, #392]	@ (8001f08 <HAL_ADC_Init+0x28c>)
 8001d7e:	f7ff ff43 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d82:	4604      	mov	r4, r0
 8001d84:	4861      	ldr	r0, [pc, #388]	@ (8001f0c <HAL_ADC_Init+0x290>)
 8001d86:	f7ff ff3f 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	431c      	orrs	r4, r3
 8001d8e:	4860      	ldr	r0, [pc, #384]	@ (8001f10 <HAL_ADC_Init+0x294>)
 8001d90:	f7ff ff3a 	bl	8001c08 <LL_ADC_IsEnabled>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4323      	orrs	r3, r4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d105      	bne.n	8001da8 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4619      	mov	r1, r3
 8001da2:	485c      	ldr	r0, [pc, #368]	@ (8001f14 <HAL_ADC_Init+0x298>)
 8001da4:	f7ff fd9c 	bl	80018e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7e5b      	ldrb	r3, [r3, #25]
 8001dac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001db8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dbe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dc6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	045b      	lsls	r3, r3, #17
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d009      	beq.n	8001e00 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <HAL_ADC_Init+0x29c>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	69b9      	ldr	r1, [r7, #24]
 8001e10:	430b      	orrs	r3, r1
 8001e12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff1b 	bl	8001c54 <LL_ADC_INJ_IsConversionOngoing>
 8001e1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d13d      	bne.n	8001ea2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d13a      	bne.n	8001ea2 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e30:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e38:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e48:	f023 0302 	bic.w	r3, r3, #2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	69b9      	ldr	r1, [r7, #24]
 8001e52:	430b      	orrs	r3, r1
 8001e54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d118      	bne.n	8001e92 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e6a:	f023 0304 	bic.w	r3, r3, #4
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e76:	4311      	orrs	r1, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e82:	430a      	orrs	r2, r1
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0201 	orr.w	r2, r2, #1
 8001e8e:	611a      	str	r2, [r3, #16]
 8001e90:	e007      	b.n	8001ea2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10c      	bne.n	8001ec4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb0:	f023 010f 	bic.w	r1, r3, #15
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec2:	e007      	b.n	8001ed4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 020f 	bic.w	r2, r2, #15
 8001ed2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed8:	f023 0303 	bic.w	r3, r3, #3
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ee4:	e007      	b.n	8001ef6 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	f043 0210 	orr.w	r2, r3, #16
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3724      	adds	r7, #36	@ 0x24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}
 8001f00:	20000000 	.word	0x20000000
 8001f04:	053e2d63 	.word	0x053e2d63
 8001f08:	50040000 	.word	0x50040000
 8001f0c:	50040100 	.word	0x50040100
 8001f10:	50040200 	.word	0x50040200
 8001f14:	50040300 	.word	0x50040300
 8001f18:	fff0c007 	.word	0xfff0c007

08001f1c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	@ 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f38:	4882      	ldr	r0, [pc, #520]	@ (8002144 <HAL_ADC_IRQHandler+0x228>)
 8001f3a:	f7ff fdfb 	bl	8001b34 <LL_ADC_GetMultimode>
 8001f3e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d017      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x5e>
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f64:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 fe4d 	bl	8002c0c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_ADC_IRQHandler+0x72>
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8083 	beq.w	80020a0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	f003 0308 	and.w	r3, r3, #8
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d07d      	beq.n	80020a0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d105      	bne.n	8001fbc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fd16 	bl	80019f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d062      	beq.n	8002092 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8002148 <HAL_ADC_IRQHandler+0x22c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d002      	beq.n	8001fdc <HAL_ADC_IRQHandler+0xc0>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	e000      	b.n	8001fde <HAL_ADC_IRQHandler+0xc2>
 8001fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800214c <HAL_ADC_IRQHandler+0x230>)
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d008      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b05      	cmp	r3, #5
 8001ff0:	d002      	beq.n	8001ff8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d104      	bne.n	8002002 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	623b      	str	r3, [r7, #32]
 8002000:	e00c      	b.n	800201c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a50      	ldr	r2, [pc, #320]	@ (8002148 <HAL_ADC_IRQHandler+0x22c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d002      	beq.n	8002012 <HAL_ADC_IRQHandler+0xf6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	e000      	b.n	8002014 <HAL_ADC_IRQHandler+0xf8>
 8002012:	4b4e      	ldr	r3, [pc, #312]	@ (800214c <HAL_ADC_IRQHandler+0x230>)
 8002014:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800201c:	6a3b      	ldr	r3, [r7, #32]
 800201e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d135      	bne.n	8002092 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b08      	cmp	r3, #8
 8002032:	d12e      	bne.n	8002092 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fdf8 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d11a      	bne.n	800207a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 020c 	bic.w	r2, r2, #12
 8002052:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002064:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d112      	bne.n	8002092 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	@ 0x54
 8002078:	e00b      	b.n	8002092 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800207e:	f043 0210 	orr.w	r2, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208a:	f043 0201 	orr.w	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f95c 	bl	8002350 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	220c      	movs	r2, #12
 800209e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0320 	and.w	r3, r3, #32
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_IRQHandler+0x198>
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10b      	bne.n	80020cc <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 809f 	beq.w	80021fe <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8099 	beq.w	80021fe <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020dc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fcc1 	bl	8001a70 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80020ee:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fc7c 	bl	80019f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020fa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <HAL_ADC_IRQHandler+0x22c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d002      	beq.n	800210c <HAL_ADC_IRQHandler+0x1f0>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	e000      	b.n	800210e <HAL_ADC_IRQHandler+0x1f2>
 800210c:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <HAL_ADC_IRQHandler+0x230>)
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6812      	ldr	r2, [r2, #0]
 8002112:	4293      	cmp	r3, r2
 8002114:	d008      	beq.n	8002128 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b06      	cmp	r3, #6
 8002120:	d002      	beq.n	8002128 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b07      	cmp	r3, #7
 8002126:	d104      	bne.n	8002132 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	e013      	b.n	800215a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <HAL_ADC_IRQHandler+0x22c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_ADC_IRQHandler+0x234>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e007      	b.n	8002152 <HAL_ADC_IRQHandler+0x236>
 8002142:	bf00      	nop
 8002144:	50040300 	.word	0x50040300
 8002148:	50040100 	.word	0x50040100
 800214c:	50040000 	.word	0x50040000
 8002150:	4b7d      	ldr	r3, [pc, #500]	@ (8002348 <HAL_ADC_IRQHandler+0x42c>)
 8002152:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d047      	beq.n	80021f0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d007      	beq.n	800217a <HAL_ADC_IRQHandler+0x25e>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d03f      	beq.n	80021f0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d13a      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002184:	2b40      	cmp	r3, #64	@ 0x40
 8002186:	d133      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002188:	6a3b      	ldr	r3, [r7, #32]
 800218a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d12e      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fd5c 	bl	8001c54 <LL_ADC_INJ_IsConversionOngoing>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11a      	bne.n	80021d8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d112      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54
 80021d6:	e00b      	b.n	80021f0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021dc:	f043 0210 	orr.w	r2, r3, #16
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e8:	f043 0201 	orr.w	r2, r3, #1
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fce3 	bl	8002bbc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2260      	movs	r2, #96	@ 0x60
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002204:	2b00      	cmp	r3, #0
 8002206:	d011      	beq.n	800222c <HAL_ADC_IRQHandler+0x310>
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f8a0 	bl	8002364 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2280      	movs	r2, #128	@ 0x80
 800222a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d012      	beq.n	800225c <HAL_ADC_IRQHandler+0x340>
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00d      	beq.n	800225c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002244:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fcc9 	bl	8002be4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800225a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002262:	2b00      	cmp	r3, #0
 8002264:	d012      	beq.n	800228c <HAL_ADC_IRQHandler+0x370>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00d      	beq.n	800228c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002274:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fcbb 	bl	8002bf8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800228a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	d036      	beq.n	8002304 <HAL_ADC_IRQHandler+0x3e8>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f003 0310 	and.w	r3, r3, #16
 800229c:	2b00      	cmp	r3, #0
 800229e:	d031      	beq.n	8002304 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d102      	bne.n	80022ae <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 80022a8:	2301      	movs	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ac:	e014      	b.n	80022d8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80022b4:	4825      	ldr	r0, [pc, #148]	@ (800234c <HAL_ADC_IRQHandler+0x430>)
 80022b6:	f7ff fc4b 	bl	8001b50 <LL_ADC_GetMultiDMATransfer>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80022c0:	2301      	movs	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c4:	e008      	b.n	80022d8 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 80022d4:	2301      	movs	r3, #1
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d10e      	bne.n	80022fc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ee:	f043 0202 	orr.w	r2, r3, #2
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f83e 	bl	8002378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800230a:	2b00      	cmp	r3, #0
 800230c:	d018      	beq.n	8002340 <HAL_ADC_IRQHandler+0x424>
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002328:	f043 0208 	orr.w	r2, r3, #8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002338:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fc48 	bl	8002bd0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	@ 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	50040000 	.word	0x50040000
 800234c:	50040300 	.word	0x50040300

08002350 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b0b6      	sub	sp, #216	@ 0xd8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x22>
 80023aa:	2302      	movs	r3, #2
 80023ac:	e3c9      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x7b6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fc37 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f040 83aa 	bne.w	8002b1c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d824      	bhi.n	8002422 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	3b02      	subs	r3, #2
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d81b      	bhi.n	800241a <HAL_ADC_ConfigChannel+0x8e>
 80023e2:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <HAL_ADC_ConfigChannel+0x5c>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	08002401 	.word	0x08002401
 80023f0:	08002409 	.word	0x08002409
 80023f4:	08002411 	.word	0x08002411
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80023f8:	230c      	movs	r3, #12
 80023fa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023fe:	e010      	b.n	8002422 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002400:	2312      	movs	r3, #18
 8002402:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002406:	e00c      	b.n	8002422 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002408:	2318      	movs	r3, #24
 800240a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800240e:	e008      	b.n	8002422 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002410:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002414:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002418:	e003      	b.n	8002422 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800241a:	2306      	movs	r3, #6
 800241c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002420:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002430:	f7ff faf2 	bl	8001a18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fbf8 	bl	8001c2e <LL_ADC_REG_IsConversionOngoing>
 800243e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fc04 	bl	8001c54 <LL_ADC_INJ_IsConversionOngoing>
 800244c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002454:	2b00      	cmp	r3, #0
 8002456:	f040 81a4 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800245a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 819f 	bne.w	80027a2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6818      	ldr	r0, [r3, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6819      	ldr	r1, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	461a      	mov	r2, r3
 8002472:	f7ff fb10 	bl	8001a96 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	08db      	lsrs	r3, r3, #3
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d00a      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6818      	ldr	r0, [r3, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6919      	ldr	r1, [r3, #16]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024a8:	f7ff fa4e 	bl	8001948 <LL_ADC_SetOffset>
 80024ac:	e179      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fa6b 	bl	8001990 <LL_ADC_GetOffsetChannel>
 80024ba:	4603      	mov	r3, r0
 80024bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <HAL_ADC_ConfigChannel+0x14e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fa60 	bl	8001990 <LL_ADC_GetOffsetChannel>
 80024d0:	4603      	mov	r3, r0
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	f003 021f 	and.w	r2, r3, #31
 80024d8:	e01e      	b.n	8002518 <HAL_ADC_ConfigChannel+0x18c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fa55 	bl	8001990 <LL_ADC_GetOffsetChannel>
 80024e6:	4603      	mov	r3, r0
 80024e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002500:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002508:	2320      	movs	r3, #32
 800250a:	e004      	b.n	8002516 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 800250c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
 8002516:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1a4>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	e018      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1d6>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800254c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e004      	b.n	8002562 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002558:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002562:	429a      	cmp	r2, r3
 8002564:	d106      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fa24 	bl	80019bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fa08 	bl	8001990 <LL_ADC_GetOffsetChannel>
 8002580:	4603      	mov	r3, r0
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10a      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x214>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f9fd 	bl	8001990 <LL_ADC_GetOffsetChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	0e9b      	lsrs	r3, r3, #26
 800259a:	f003 021f 	and.w	r2, r3, #31
 800259e:	e01e      	b.n	80025de <HAL_ADC_ConfigChannel+0x252>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f9f2 	bl	8001990 <LL_ADC_GetOffsetChannel>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80025be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80025c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80025ce:	2320      	movs	r3, #32
 80025d0:	e004      	b.n	80025dc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80025d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x26a>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	0e9b      	lsrs	r3, r3, #26
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	e018      	b.n	8002628 <HAL_ADC_ConfigChannel+0x29c>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800260a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800260e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002612:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e004      	b.n	8002628 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800261e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002628:	429a      	cmp	r2, r3
 800262a:	d106      	bne.n	800263a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff f9c1 	bl	80019bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2102      	movs	r1, #2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff f9a5 	bl	8001990 <LL_ADC_GetOffsetChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x2da>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2102      	movs	r1, #2
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff f99a 	bl	8001990 <LL_ADC_GetOffsetChannel>
 800265c:	4603      	mov	r3, r0
 800265e:	0e9b      	lsrs	r3, r3, #26
 8002660:	f003 021f 	and.w	r2, r3, #31
 8002664:	e01e      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x318>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2102      	movs	r1, #2
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff f98f 	bl	8001990 <LL_ADC_GetOffsetChannel>
 8002672:	4603      	mov	r3, r0
 8002674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800268c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002694:	2320      	movs	r3, #32
 8002696:	e004      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800269c:	fab3 f383 	clz	r3, r3
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d105      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x330>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	e014      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x35a>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80026ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80026d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e004      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80026dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d106      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2200      	movs	r2, #0
 80026f0:	2102      	movs	r1, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f962 	bl	80019bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2103      	movs	r1, #3
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff f946 	bl	8001990 <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x398>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2103      	movs	r1, #3
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff f93b 	bl	8001990 <LL_ADC_GetOffsetChannel>
 800271a:	4603      	mov	r3, r0
 800271c:	0e9b      	lsrs	r3, r3, #26
 800271e:	f003 021f 	and.w	r2, r3, #31
 8002722:	e017      	b.n	8002754 <HAL_ADC_ConfigChannel+0x3c8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2103      	movs	r1, #3
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff f930 	bl	8001990 <LL_ADC_GetOffsetChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800273c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800273e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e003      	b.n	8002752 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800274a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800274c:	fab3 f383 	clz	r3, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <HAL_ADC_ConfigChannel+0x3e0>
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	0e9b      	lsrs	r3, r3, #26
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	e011      	b.n	8002790 <HAL_ADC_ConfigChannel+0x404>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800277a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800277c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800277e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002784:	2320      	movs	r3, #32
 8002786:	e003      	b.n	8002790 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002788:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002790:	429a      	cmp	r2, r3
 8002792:	d106      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2200      	movs	r2, #0
 800279a:	2103      	movs	r1, #3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f90d 	bl	80019bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fa2e 	bl	8001c08 <LL_ADC_IsEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 8140 	bne.w	8002a34 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6819      	ldr	r1, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	461a      	mov	r2, r3
 80027c2:	f7ff f993 	bl	8001aec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a8f      	ldr	r2, [pc, #572]	@ (8002a08 <HAL_ADC_ConfigChannel+0x67c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	f040 8131 	bne.w	8002a34 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10b      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x46e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2b09      	cmp	r3, #9
 80027f0:	bf94      	ite	ls
 80027f2:	2301      	movls	r3, #1
 80027f4:	2300      	movhi	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	e019      	b.n	800282e <HAL_ADC_ConfigChannel+0x4a2>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800280a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800280c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	2b09      	cmp	r3, #9
 8002826:	bf94      	ite	ls
 8002828:	2301      	movls	r3, #1
 800282a:	2300      	movhi	r3, #0
 800282c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282e:	2b00      	cmp	r3, #0
 8002830:	d079      	beq.n	8002926 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283a:	2b00      	cmp	r3, #0
 800283c:	d107      	bne.n	800284e <HAL_ADC_ConfigChannel+0x4c2>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	3301      	adds	r3, #1
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800284c:	e015      	b.n	800287a <HAL_ADC_ConfigChannel+0x4ee>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800285c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800285e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e003      	b.n	8002872 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800286a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	3301      	adds	r3, #1
 8002874:	069b      	lsls	r3, r3, #26
 8002876:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_ADC_ConfigChannel+0x50e>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f303 	lsl.w	r3, r1, r3
 8002898:	e017      	b.n	80028ca <HAL_ADC_ConfigChannel+0x53e>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80028a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028aa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80028ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e003      	b.n	80028be <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80028b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	2101      	movs	r1, #1
 80028c6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ca:	ea42 0103 	orr.w	r1, r2, r3
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x564>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	3301      	adds	r3, #1
 80028e2:	f003 021f 	and.w	r2, r3, #31
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	051b      	lsls	r3, r3, #20
 80028ee:	e018      	b.n	8002922 <HAL_ADC_ConfigChannel+0x596>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002908:	2320      	movs	r3, #32
 800290a:	e003      	b.n	8002914 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800290c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f003 021f 	and.w	r2, r3, #31
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002922:	430b      	orrs	r3, r1
 8002924:	e081      	b.n	8002a2a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d107      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x5b6>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	3301      	adds	r3, #1
 800293a:	069b      	lsls	r3, r3, #26
 800293c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002940:	e015      	b.n	800296e <HAL_ADC_ConfigChannel+0x5e2>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	069b      	lsls	r3, r3, #26
 800296a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_ADC_ConfigChannel+0x602>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	3301      	adds	r3, #1
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	2101      	movs	r1, #1
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	e017      	b.n	80029be <HAL_ADC_ConfigChannel+0x632>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	61bb      	str	r3, [r7, #24]
  return result;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	3301      	adds	r3, #1
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2101      	movs	r1, #1
 80029ba:	fa01 f303 	lsl.w	r3, r1, r3
 80029be:	ea42 0103 	orr.w	r1, r2, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x65e>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	0e9b      	lsrs	r3, r3, #26
 80029d4:	3301      	adds	r3, #1
 80029d6:	f003 021f 	and.w	r2, r3, #31
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	3b1e      	subs	r3, #30
 80029e2:	051b      	lsls	r3, r3, #20
 80029e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	e01e      	b.n	8002a28 <HAL_ADC_ConfigChannel+0x69c>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	60fb      	str	r3, [r7, #12]
  return result;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d104      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a02:	2320      	movs	r3, #32
 8002a04:	e006      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x688>
 8002a06:	bf00      	nop
 8002a08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f003 021f 	and.w	r2, r3, #31
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	4413      	add	r3, r2
 8002a20:	3b1e      	subs	r3, #30
 8002a22:	051b      	lsls	r3, r3, #20
 8002a24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a28:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2e:	4619      	mov	r1, r3
 8002a30:	f7ff f831 	bl	8001a96 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b44      	ldr	r3, [pc, #272]	@ (8002b4c <HAL_ADC_ConfigChannel+0x7c0>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d07a      	beq.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a40:	4843      	ldr	r0, [pc, #268]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a42:	f7fe ff73 	bl	800192c <LL_ADC_GetCommonPathInternalCh>
 8002a46:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a41      	ldr	r2, [pc, #260]	@ (8002b54 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d12c      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d126      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x6e8>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d15d      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4834      	ldr	r0, [pc, #208]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a80:	f7fe ff41 	bl	8001906 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a84:	4b36      	ldr	r3, [pc, #216]	@ (8002b60 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	4a36      	ldr	r2, [pc, #216]	@ (8002b64 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a9e:	e002      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f9      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aac:	e040      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b68 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d118      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d112      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a23      	ldr	r2, [pc, #140]	@ (8002b58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x74c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_ADC_ConfigChannel+0x7d0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d12d      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002adc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	481b      	ldr	r0, [pc, #108]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ae4:	f7fe ff0f 	bl	8001906 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ae8:	e024      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1f      	ldr	r2, [pc, #124]	@ (8002b6c <HAL_ADC_ConfigChannel+0x7e0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d120      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002af4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d11a      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a14      	ldr	r2, [pc, #80]	@ (8002b58 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d115      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002b0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b12:	4619      	mov	r1, r3
 8002b14:	480e      	ldr	r0, [pc, #56]	@ (8002b50 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b16:	f7fe fef6 	bl	8001906 <LL_ADC_SetCommonPathInternalCh>
 8002b1a:	e00c      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	f043 0220 	orr.w	r2, r3, #32
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b2e:	e002      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b30:	bf00      	nop
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	37d8      	adds	r7, #216	@ 0xd8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	80080000 	.word	0x80080000
 8002b50:	50040300 	.word	0x50040300
 8002b54:	c7520000 	.word	0xc7520000
 8002b58:	50040000 	.word	0x50040000
 8002b5c:	50040200 	.word	0x50040200
 8002b60:	20000000 	.word	0x20000000
 8002b64:	053e2d63 	.word	0x053e2d63
 8002b68:	cb840000 	.word	0xcb840000
 8002b6c:	80000001 	.word	0x80000001

08002b70 <LL_ADC_IsEnabled>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <LL_ADC_IsEnabled+0x18>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <LL_ADC_IsEnabled+0x1a>
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d101      	bne.n	8002bae <LL_ADC_REG_IsConversionOngoing+0x18>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b09f      	sub	sp, #124	@ 0x7c
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e093      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c46:	2300      	movs	r3, #0
 8002c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a47      	ldr	r2, [pc, #284]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d102      	bne.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c58:	4b46      	ldr	r3, [pc, #280]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	e001      	b.n	8002c62 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e072      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff87 	bl	8002b96 <LL_ADC_REG_IsConversionOngoing>
 8002c88:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff81 	bl	8002b96 <LL_ADC_REG_IsConversionOngoing>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d154      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d151      	bne.n	8002d44 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ca0:	4b35      	ldr	r3, [pc, #212]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ca2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d02c      	beq.n	8002d06 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cbe:	035b      	lsls	r3, r3, #13
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc8:	4829      	ldr	r0, [pc, #164]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002cca:	f7ff ff51 	bl	8002b70 <LL_ADC_IsEnabled>
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4828      	ldr	r0, [pc, #160]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002cd2:	f7ff ff4d 	bl	8002b70 <LL_ADC_IsEnabled>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	431c      	orrs	r4, r3
 8002cda:	4828      	ldr	r0, [pc, #160]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002cdc:	f7ff ff48 	bl	8002b70 <LL_ADC_IsEnabled>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4323      	orrs	r3, r4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d137      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cf0:	f023 030f 	bic.w	r3, r3, #15
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	6811      	ldr	r1, [r2, #0]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	6892      	ldr	r2, [r2, #8]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d02:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d04:	e028      	b.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d10:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d12:	4817      	ldr	r0, [pc, #92]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d14:	f7ff ff2c 	bl	8002b70 <LL_ADC_IsEnabled>
 8002d18:	4604      	mov	r4, r0
 8002d1a:	4816      	ldr	r0, [pc, #88]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d1c:	f7ff ff28 	bl	8002b70 <LL_ADC_IsEnabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	431c      	orrs	r4, r3
 8002d24:	4815      	ldr	r0, [pc, #84]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d26:	f7ff ff23 	bl	8002b70 <LL_ADC_IsEnabled>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4323      	orrs	r3, r4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d112      	bne.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d3a:	f023 030f 	bic.w	r3, r3, #15
 8002d3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d40:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d42:	e009      	b.n	8002d58 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d56:	e000      	b.n	8002d5a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002d62:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	377c      	adds	r7, #124	@ 0x7c
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	50040000 	.word	0x50040000
 8002d74:	50040100 	.word	0x50040100
 8002d78:	50040300 	.word	0x50040300
 8002d7c:	50040200 	.word	0x50040200

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0b      	blt.n	8002e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4907      	ldr	r1, [pc, #28]	@ (8002e1c <__NVIC_EnableIRQ+0x38>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	@ (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	@ (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	@ 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff4c 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
 8002efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f02:	f7ff ff61 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	6978      	ldr	r0, [r7, #20]
 8002f0e:	f7ff ffb1 	bl	8002e74 <NVIC_EncodePriority>
 8002f12:	4602      	mov	r2, r0
 8002f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff ff80 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f20:	bf00      	nop
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff54 	bl	8002de4 <__NVIC_EnableIRQ>
}
 8002f3c:	bf00      	nop
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f52:	e17f      	b.n	8003254 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8171 	beq.w	800324e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0303 	and.w	r3, r3, #3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d005      	beq.n	8002f84 <HAL_GPIO_Init+0x40>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d130      	bne.n	8002fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	693a      	ldr	r2, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fba:	2201      	movs	r2, #1
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0201 	and.w	r2, r3, #1
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d118      	bne.n	8003024 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	08db      	lsrs	r3, r3, #3
 800300e:	f003 0201 	and.w	r2, r3, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b03      	cmp	r3, #3
 800302e:	d017      	beq.n	8003060 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	2203      	movs	r2, #3
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	43db      	mvns	r3, r3
 8003042:	693a      	ldr	r2, [r7, #16]
 8003044:	4013      	ands	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 0303 	and.w	r3, r3, #3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d123      	bne.n	80030b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	08da      	lsrs	r2, r3, #3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3208      	adds	r2, #8
 8003074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	220f      	movs	r2, #15
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	6939      	ldr	r1, [r7, #16]
 80030b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0203 	and.w	r2, r3, #3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80ac 	beq.w	800324e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003274 <HAL_GPIO_Init+0x330>)
 80030f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003274 <HAL_GPIO_Init+0x330>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6613      	str	r3, [r2, #96]	@ 0x60
 8003102:	4b5c      	ldr	r3, [pc, #368]	@ (8003274 <HAL_GPIO_Init+0x330>)
 8003104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800310e:	4a5a      	ldr	r2, [pc, #360]	@ (8003278 <HAL_GPIO_Init+0x334>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003138:	d025      	beq.n	8003186 <HAL_GPIO_Init+0x242>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	@ (800327c <HAL_GPIO_Init+0x338>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <HAL_GPIO_Init+0x23e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4e      	ldr	r2, [pc, #312]	@ (8003280 <HAL_GPIO_Init+0x33c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d019      	beq.n	800317e <HAL_GPIO_Init+0x23a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4d      	ldr	r2, [pc, #308]	@ (8003284 <HAL_GPIO_Init+0x340>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d013      	beq.n	800317a <HAL_GPIO_Init+0x236>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4c      	ldr	r2, [pc, #304]	@ (8003288 <HAL_GPIO_Init+0x344>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00d      	beq.n	8003176 <HAL_GPIO_Init+0x232>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4b      	ldr	r2, [pc, #300]	@ (800328c <HAL_GPIO_Init+0x348>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <HAL_GPIO_Init+0x22e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a4a      	ldr	r2, [pc, #296]	@ (8003290 <HAL_GPIO_Init+0x34c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d101      	bne.n	800316e <HAL_GPIO_Init+0x22a>
 800316a:	2306      	movs	r3, #6
 800316c:	e00c      	b.n	8003188 <HAL_GPIO_Init+0x244>
 800316e:	2307      	movs	r3, #7
 8003170:	e00a      	b.n	8003188 <HAL_GPIO_Init+0x244>
 8003172:	2305      	movs	r3, #5
 8003174:	e008      	b.n	8003188 <HAL_GPIO_Init+0x244>
 8003176:	2304      	movs	r3, #4
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x244>
 800317a:	2303      	movs	r3, #3
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x244>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x244>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x244>
 8003186:	2300      	movs	r3, #0
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	f002 0203 	and.w	r2, r2, #3
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	4093      	lsls	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003198:	4937      	ldr	r1, [pc, #220]	@ (8003278 <HAL_GPIO_Init+0x334>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3302      	adds	r3, #2
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003294 <HAL_GPIO_Init+0x350>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ca:	4a32      	ldr	r2, [pc, #200]	@ (8003294 <HAL_GPIO_Init+0x350>)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031d0:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <HAL_GPIO_Init+0x350>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43db      	mvns	r3, r3
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031f4:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <HAL_GPIO_Init+0x350>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031fa:	4b26      	ldr	r3, [pc, #152]	@ (8003294 <HAL_GPIO_Init+0x350>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	43db      	mvns	r3, r3
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800321e:	4a1d      	ldr	r2, [pc, #116]	@ (8003294 <HAL_GPIO_Init+0x350>)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003224:	4b1b      	ldr	r3, [pc, #108]	@ (8003294 <HAL_GPIO_Init+0x350>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003248:	4a12      	ldr	r2, [pc, #72]	@ (8003294 <HAL_GPIO_Init+0x350>)
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	3301      	adds	r3, #1
 8003252:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	f47f ae78 	bne.w	8002f54 <HAL_GPIO_Init+0x10>
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40010000 	.word	0x40010000
 800327c:	48000400 	.word	0x48000400
 8003280:	48000800 	.word	0x48000800
 8003284:	48000c00 	.word	0x48000c00
 8003288:	48001000 	.word	0x48001000
 800328c:	48001400 	.word	0x48001400
 8003290:	48001800 	.word	0x48001800
 8003294:	40010400 	.word	0x40010400

08003298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
 80032a4:	4613      	mov	r3, r2
 80032a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a8:	787b      	ldrb	r3, [r7, #1]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032ae:	887a      	ldrh	r2, [r7, #2]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032b4:	e002      	b.n	80032bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032d2:	4b08      	ldr	r3, [pc, #32]	@ (80032f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d4:	695a      	ldr	r2, [r3, #20]
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	4013      	ands	r3, r2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032de:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032e4:	88fb      	ldrh	r3, [r7, #6]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f806 	bl	80032f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40010400 	.word	0x40010400

080032f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e08d      	b.n	800343c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d106      	bne.n	800333a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fd fb19 	bl	800096c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2224      	movs	r2, #36	@ 0x24
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800335e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800336e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d107      	bne.n	8003388 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	e006      	b.n	8003396 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003394:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d108      	bne.n	80033b0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	e007      	b.n	80033c0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69d9      	ldr	r1, [r3, #28]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1a      	ldr	r2, [r3, #32]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0201 	orr.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d138      	bne.n	80034cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003464:	2302      	movs	r3, #2
 8003466:	e032      	b.n	80034ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	@ 0x24
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0201 	bic.w	r2, r2, #1
 8003486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034da:	b480      	push	{r7}
 80034dc:	b085      	sub	sp, #20
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d139      	bne.n	8003564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034fa:	2302      	movs	r3, #2
 80034fc:	e033      	b.n	8003566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2224      	movs	r2, #36	@ 0x24
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0201 	bic.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800352c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	021b      	lsls	r3, r3, #8
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e000      	b.n	8003566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003564:	2302      	movs	r3, #2
  }
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003578:	4b04      	ldr	r3, [pc, #16]	@ (800358c <HAL_PWREx_GetVoltageRange+0x18>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	40007000 	.word	0x40007000

08003590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359e:	d130      	bne.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80035a0:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ac:	d038      	beq.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035ae:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035be:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2232      	movs	r2, #50	@ 0x32
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003638 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0c9b      	lsrs	r3, r3, #18
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d4:	e002      	b.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3b01      	subs	r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035dc:	4b14      	ldr	r3, [pc, #80]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e8:	d102      	bne.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f2      	bne.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fc:	d110      	bne.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00f      	b.n	8003622 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800360a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800360e:	d007      	beq.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003618:	4a05      	ldr	r2, [pc, #20]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800361a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800361e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40007000 	.word	0x40007000
 8003634:	20000000 	.word	0x20000000
 8003638:	431bde83 	.word	0x431bde83

0800363c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e3ca      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800364e:	4b97      	ldr	r3, [pc, #604]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003658:	4b94      	ldr	r3, [pc, #592]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 80e4 	beq.w	8003838 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_RCC_OscConfig+0x4a>
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b0c      	cmp	r3, #12
 800367a:	f040 808b 	bne.w	8003794 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b01      	cmp	r3, #1
 8003682:	f040 8087 	bne.w	8003794 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003686:	4b89      	ldr	r3, [pc, #548]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e3a2      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1a      	ldr	r2, [r3, #32]
 80036a2:	4b82      	ldr	r3, [pc, #520]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_RCC_OscConfig+0x7c>
 80036ae:	4b7f      	ldr	r3, [pc, #508]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036b6:	e005      	b.n	80036c4 <HAL_RCC_OscConfig+0x88>
 80036b8:	4b7c      	ldr	r3, [pc, #496]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d223      	bcs.n	8003710 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fd87 	bl	80041e0 <RCC_SetFlashLatencyFromMSIRange>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e383      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036dc:	4b73      	ldr	r3, [pc, #460]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a72      	ldr	r2, [pc, #456]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036e2:	f043 0308 	orr.w	r3, r3, #8
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	4b70      	ldr	r3, [pc, #448]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	496d      	ldr	r1, [pc, #436]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036fa:	4b6c      	ldr	r3, [pc, #432]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	4968      	ldr	r1, [pc, #416]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
 800370e:	e025      	b.n	800375c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003710:	4b66      	ldr	r3, [pc, #408]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a65      	ldr	r2, [pc, #404]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b63      	ldr	r3, [pc, #396]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4960      	ldr	r1, [pc, #384]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800372e:	4b5f      	ldr	r3, [pc, #380]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	495b      	ldr	r1, [pc, #364]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fd47 	bl	80041e0 <RCC_SetFlashLatencyFromMSIRange>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e343      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800375c:	f000 fc4a 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	4950      	ldr	r1, [pc, #320]	@ (80038b0 <HAL_RCC_OscConfig+0x274>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	4a4e      	ldr	r2, [pc, #312]	@ (80038b4 <HAL_RCC_OscConfig+0x278>)
 800377a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800377c:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <HAL_RCC_OscConfig+0x27c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd facb 	bl	8000d1c <HAL_InitTick>
 8003786:	4603      	mov	r3, r0
 8003788:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d052      	beq.n	8003836 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	e327      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d032      	beq.n	8003802 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800379c:	4b43      	ldr	r3, [pc, #268]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a42      	ldr	r2, [pc, #264]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037a8:	f7fe f88e 	bl	80018c8 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037b0:	f7fe f88a 	bl	80018c8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e310      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037c2:	4b3a      	ldr	r3, [pc, #232]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ce:	4b37      	ldr	r3, [pc, #220]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a36      	ldr	r2, [pc, #216]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	4b34      	ldr	r3, [pc, #208]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	4931      	ldr	r1, [pc, #196]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ec:	4b2f      	ldr	r3, [pc, #188]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	021b      	lsls	r3, r3, #8
 80037fa:	492c      	ldr	r1, [pc, #176]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
 8003800:	e01a      	b.n	8003838 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003802:	4b2a      	ldr	r3, [pc, #168]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a29      	ldr	r2, [pc, #164]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800380e:	f7fe f85b 	bl	80018c8 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003816:	f7fe f857 	bl	80018c8 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e2dd      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003828:	4b20      	ldr	r3, [pc, #128]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f0      	bne.n	8003816 <HAL_RCC_OscConfig+0x1da>
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003836:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d074      	beq.n	800392e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	2b08      	cmp	r3, #8
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x21a>
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	2b0c      	cmp	r3, #12
 800384e:	d10e      	bne.n	800386e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d10b      	bne.n	800386e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d064      	beq.n	800392c <HAL_RCC_OscConfig+0x2f0>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d160      	bne.n	800392c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e2ba      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003876:	d106      	bne.n	8003886 <HAL_RCC_OscConfig+0x24a>
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0b      	ldr	r2, [pc, #44]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800387e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e026      	b.n	80038d4 <HAL_RCC_OscConfig+0x298>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800388e:	d115      	bne.n	80038bc <HAL_RCC_OscConfig+0x280>
 8003890:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 8003896:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800389a:	6013      	str	r3, [r2, #0]
 800389c:	4b03      	ldr	r3, [pc, #12]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a02      	ldr	r2, [pc, #8]	@ (80038ac <HAL_RCC_OscConfig+0x270>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e014      	b.n	80038d4 <HAL_RCC_OscConfig+0x298>
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08007cb8 	.word	0x08007cb8
 80038b4:	20000000 	.word	0x20000000
 80038b8:	20000040 	.word	0x20000040
 80038bc:	4ba0      	ldr	r3, [pc, #640]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a9f      	ldr	r2, [pc, #636]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b9d      	ldr	r3, [pc, #628]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a9c      	ldr	r2, [pc, #624]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fd fff4 	bl	80018c8 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fd fff0 	bl	80018c8 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	@ 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e276      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038f6:	4b92      	ldr	r3, [pc, #584]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x2a8>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd ffe0 	bl	80018c8 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390c:	f7fd ffdc 	bl	80018c8 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	@ 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e262      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800391e:	4b88      	ldr	r3, [pc, #544]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0x2d0>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d060      	beq.n	80039fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	2b04      	cmp	r3, #4
 800393e:	d005      	beq.n	800394c <HAL_RCC_OscConfig+0x310>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b0c      	cmp	r3, #12
 8003944:	d119      	bne.n	800397a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b02      	cmp	r3, #2
 800394a:	d116      	bne.n	800397a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800394c:	4b7c      	ldr	r3, [pc, #496]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_OscConfig+0x328>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e23f      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b76      	ldr	r3, [pc, #472]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	4973      	ldr	r1, [pc, #460]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003978:	e040      	b.n	80039fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d023      	beq.n	80039ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003982:	4b6f      	ldr	r3, [pc, #444]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6e      	ldr	r2, [pc, #440]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800398c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800398e:	f7fd ff9b 	bl	80018c8 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003996:	f7fd ff97 	bl	80018c8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e21d      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a8:	4b65      	ldr	r3, [pc, #404]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b4:	4b62      	ldr	r3, [pc, #392]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	495f      	ldr	r1, [pc, #380]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]
 80039c8:	e018      	b.n	80039fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ca:	4b5d      	ldr	r3, [pc, #372]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fd ff77 	bl	80018c8 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039de:	f7fd ff73 	bl	80018c8 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1f9      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f0:	4b53      	ldr	r3, [pc, #332]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d03c      	beq.n	8003a82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01c      	beq.n	8003a4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a10:	4b4b      	ldr	r3, [pc, #300]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a16:	4a4a      	ldr	r2, [pc, #296]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd ff52 	bl	80018c8 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a28:	f7fd ff4e 	bl	80018c8 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e1d4      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a3a:	4b41      	ldr	r3, [pc, #260]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0ef      	beq.n	8003a28 <HAL_RCC_OscConfig+0x3ec>
 8003a48:	e01b      	b.n	8003a82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a50:	4a3b      	ldr	r2, [pc, #236]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a52:	f023 0301 	bic.w	r3, r3, #1
 8003a56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5a:	f7fd ff35 	bl	80018c8 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fd ff31 	bl	80018c8 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e1b7      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a74:	4b32      	ldr	r3, [pc, #200]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1ef      	bne.n	8003a62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80a6 	beq.w	8003bdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a90:	2300      	movs	r3, #0
 8003a92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a94:	4b2a      	ldr	r3, [pc, #168]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa0:	4b27      	ldr	r3, [pc, #156]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	4a26      	ldr	r2, [pc, #152]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aaa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aac:	4b24      	ldr	r3, [pc, #144]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003abc:	4b21      	ldr	r3, [pc, #132]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d118      	bne.n	8003afa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ac8:	4b1e      	ldr	r3, [pc, #120]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ad2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad4:	f7fd fef8 	bl	80018c8 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003adc:	f7fd fef4 	bl	80018c8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e17a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aee:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <HAL_RCC_OscConfig+0x508>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d108      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4d8>
 8003b02:	4b0f      	ldr	r3, [pc, #60]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b12:	e029      	b.n	8003b68 <HAL_RCC_OscConfig+0x52c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d115      	bne.n	8003b48 <HAL_RCC_OscConfig+0x50c>
 8003b1c:	4b08      	ldr	r3, [pc, #32]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b22:	4a07      	ldr	r2, [pc, #28]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b24:	f043 0304 	orr.w	r3, r3, #4
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b2c:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b32:	4a03      	ldr	r2, [pc, #12]	@ (8003b40 <HAL_RCC_OscConfig+0x504>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b3c:	e014      	b.n	8003b68 <HAL_RCC_OscConfig+0x52c>
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	40007000 	.word	0x40007000
 8003b48:	4b9c      	ldr	r3, [pc, #624]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	4a9b      	ldr	r2, [pc, #620]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b58:	4b98      	ldr	r3, [pc, #608]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	4a97      	ldr	r2, [pc, #604]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b60:	f023 0304 	bic.w	r3, r3, #4
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d016      	beq.n	8003b9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fd feaa 	bl	80018c8 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b78:	f7fd fea6 	bl	80018c8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e12a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8e:	4b8b      	ldr	r3, [pc, #556]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0ed      	beq.n	8003b78 <HAL_RCC_OscConfig+0x53c>
 8003b9c:	e015      	b.n	8003bca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fd fe93 	bl	80018c8 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ba6:	f7fd fe8f 	bl	80018c8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e113      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bbc:	4b7f      	ldr	r3, [pc, #508]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ed      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bca:	7ffb      	ldrb	r3, [r7, #31]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bd0:	4b7a      	ldr	r3, [pc, #488]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	4a79      	ldr	r2, [pc, #484]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bda:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80fe 	beq.w	8003de2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	f040 80d0 	bne.w	8003d90 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bf0:	4b72      	ldr	r3, [pc, #456]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f003 0203 	and.w	r2, r3, #3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d130      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d127      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11f      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c30:	2a07      	cmp	r2, #7
 8003c32:	bf14      	ite	ne
 8003c34:	2201      	movne	r2, #1
 8003c36:	2200      	moveq	r2, #0
 8003c38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d113      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c48:	085b      	lsrs	r3, r3, #1
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d06e      	beq.n	8003d44 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	d069      	beq.n	8003d40 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c6c:	4b53      	ldr	r3, [pc, #332]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d105      	bne.n	8003c84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c78:	4b50      	ldr	r3, [pc, #320]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0ad      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c88:	4b4c      	ldr	r3, [pc, #304]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c94:	f7fd fe18 	bl	80018c8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c9c:	f7fd fe14 	bl	80018c8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e09a      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cae:	4b43      	ldr	r3, [pc, #268]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cba:	4b40      	ldr	r3, [pc, #256]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	4b40      	ldr	r3, [pc, #256]	@ (8003dc0 <HAL_RCC_OscConfig+0x784>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003cca:	3a01      	subs	r2, #1
 8003ccc:	0112      	lsls	r2, r2, #4
 8003cce:	4311      	orrs	r1, r2
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003cd4:	0212      	lsls	r2, r2, #8
 8003cd6:	4311      	orrs	r1, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003cdc:	0852      	lsrs	r2, r2, #1
 8003cde:	3a01      	subs	r2, #1
 8003ce0:	0552      	lsls	r2, r2, #21
 8003ce2:	4311      	orrs	r1, r2
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ce8:	0852      	lsrs	r2, r2, #1
 8003cea:	3a01      	subs	r2, #1
 8003cec:	0652      	lsls	r2, r2, #25
 8003cee:	4311      	orrs	r1, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003cf4:	0912      	lsrs	r2, r2, #4
 8003cf6:	0452      	lsls	r2, r2, #17
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	4930      	ldr	r1, [pc, #192]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d00:	4b2e      	ldr	r3, [pc, #184]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2d      	ldr	r2, [pc, #180]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d18:	f7fd fdd6 	bl	80018c8 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd fdd2 	bl	80018c8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e058      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d32:	4b22      	ldr	r3, [pc, #136]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3e:	e050      	b.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e04f      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d44:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d148      	bne.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d50:	4b1a      	ldr	r3, [pc, #104]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a19      	ldr	r2, [pc, #100]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d5c:	4b17      	ldr	r3, [pc, #92]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d68:	f7fd fdae 	bl	80018c8 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d70:	f7fd fdaa 	bl	80018c8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e030      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d82:	4b0e      	ldr	r3, [pc, #56]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x734>
 8003d8e:	e028      	b.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d023      	beq.n	8003dde <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <HAL_RCC_OscConfig+0x780>)
 8003d9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da2:	f7fd fd91 	bl	80018c8 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003da8:	e00c      	b.n	8003dc4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fd fd8d 	bl	80018c8 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d905      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e013      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_OscConfig+0x7b0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1ec      	bne.n	8003daa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003dd0:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_RCC_OscConfig+0x7b0>)
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	4905      	ldr	r1, [pc, #20]	@ (8003dec <HAL_RCC_OscConfig+0x7b0>)
 8003dd6:	4b06      	ldr	r3, [pc, #24]	@ (8003df0 <HAL_RCC_OscConfig+0x7b4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
 8003ddc:	e001      	b.n	8003de2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3720      	adds	r7, #32
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	feeefffc 	.word	0xfeeefffc

08003df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0e7      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e08:	4b75      	ldr	r3, [pc, #468]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d910      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e16:	4b72      	ldr	r3, [pc, #456]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 0207 	bic.w	r2, r3, #7
 8003e1e:	4970      	ldr	r1, [pc, #448]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b6e      	ldr	r3, [pc, #440]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0cf      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d010      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	4b66      	ldr	r3, [pc, #408]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d908      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b63      	ldr	r3, [pc, #396]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4960      	ldr	r1, [pc, #384]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04c      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d121      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0a6      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d107      	bne.n	8003ea2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e92:	4b54      	ldr	r3, [pc, #336]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d115      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e09a      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e08e      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eba:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e086      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b46      	ldr	r3, [pc, #280]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4943      	ldr	r1, [pc, #268]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd fcf4 	bl	80018c8 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fd fcf0 	bl	80018c8 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e06e      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b3a      	ldr	r3, [pc, #232]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	4b31      	ldr	r3, [pc, #196]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d208      	bcs.n	8003f3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f28:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	492b      	ldr	r1, [pc, #172]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f3a:	4b29      	ldr	r3, [pc, #164]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d210      	bcs.n	8003f6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f48:	4b25      	ldr	r3, [pc, #148]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 0207 	bic.w	r2, r3, #7
 8003f50:	4923      	ldr	r1, [pc, #140]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f58:	4b21      	ldr	r3, [pc, #132]	@ (8003fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0307 	and.w	r3, r3, #7
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e036      	b.n	8003fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f76:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4918      	ldr	r1, [pc, #96]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f94:	4b13      	ldr	r3, [pc, #76]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4910      	ldr	r1, [pc, #64]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa8:	f000 f824 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	490b      	ldr	r1, [pc, #44]	@ (8003fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc4:	4a09      	ldr	r2, [pc, #36]	@ (8003fec <HAL_RCC_ClockConfig+0x1f8>)
 8003fc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fc8:	4b09      	ldr	r3, [pc, #36]	@ (8003ff0 <HAL_RCC_ClockConfig+0x1fc>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fc fea5 	bl	8000d1c <HAL_InitTick>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	08007cb8 	.word	0x08007cb8
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	20000040 	.word	0x20000040

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	@ 0x24
 8003ff8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004002:	4b3e      	ldr	r3, [pc, #248]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800400c:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d005      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x34>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d121      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d11e      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004028:	4b34      	ldr	r3, [pc, #208]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d107      	bne.n	8004044 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004034:	4b31      	ldr	r3, [pc, #196]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e005      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004044:	4b2d      	ldr	r3, [pc, #180]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004050:	4a2b      	ldr	r2, [pc, #172]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004058:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004064:	e00a      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b04      	cmp	r3, #4
 800406a:	d102      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800406c:	4b25      	ldr	r3, [pc, #148]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x110>)
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	e004      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d101      	bne.n	800407c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004078:	4b23      	ldr	r3, [pc, #140]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x114>)
 800407a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d134      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004082:	4b1e      	ldr	r3, [pc, #120]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0xa6>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b03      	cmp	r3, #3
 8004096:	d003      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004098:	e005      	b.n	80040a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x110>)
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	e005      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x114>)
 80040a2:	617b      	str	r3, [r7, #20]
      break;
 80040a4:	e002      	b.n	80040ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	617b      	str	r3, [r7, #20]
      break;
 80040aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040ac:	4b13      	ldr	r3, [pc, #76]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	3301      	adds	r3, #1
 80040b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	0a1b      	lsrs	r3, r3, #8
 80040c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	fb03 f202 	mul.w	r2, r3, r2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d2:	4b0a      	ldr	r3, [pc, #40]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0e5b      	lsrs	r3, r3, #25
 80040d8:	f003 0303 	and.w	r3, r3, #3
 80040dc:	3301      	adds	r3, #1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040ec:	69bb      	ldr	r3, [r7, #24]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3724      	adds	r7, #36	@ 0x24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40021000 	.word	0x40021000
 8004100:	08007cd0 	.word	0x08007cd0
 8004104:	00f42400 	.word	0x00f42400
 8004108:	007a1200 	.word	0x007a1200

0800410c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4904      	ldr	r1, [pc, #16]	@ (800414c <HAL_RCC_GetPCLK1Freq+0x28>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08007cc8 	.word	0x08007cc8

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004154:	f7ff ffda 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4904      	ldr	r1, [pc, #16]	@ (8004178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	08007cc8 	.word	0x08007cc8

0800417c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	220f      	movs	r2, #15
 800418a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800418c:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0203 	and.w	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004198:	4b0f      	ldr	r3, [pc, #60]	@ (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80041a4:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80041b0:	4b09      	ldr	r3, [pc, #36]	@ (80041d8 <HAL_RCC_GetClockConfig+0x5c>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	08db      	lsrs	r3, r3, #3
 80041b6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80041be:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <HAL_RCC_GetClockConfig+0x60>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0207 	and.w	r2, r3, #7
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40022000 	.word	0x40022000

080041e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041e8:	2300      	movs	r3, #0
 80041ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041f8:	f7ff f9bc 	bl	8003574 <HAL_PWREx_GetVoltageRange>
 80041fc:	6178      	str	r0, [r7, #20]
 80041fe:	e014      	b.n	800422a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004200:	4b25      	ldr	r3, [pc, #148]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6593      	str	r3, [r2, #88]	@ 0x58
 800420c:	4b22      	ldr	r3, [pc, #136]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800420e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004218:	f7ff f9ac 	bl	8003574 <HAL_PWREx_GetVoltageRange>
 800421c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004222:	4a1d      	ldr	r2, [pc, #116]	@ (8004298 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004228:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004230:	d10b      	bne.n	800424a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b80      	cmp	r3, #128	@ 0x80
 8004236:	d919      	bls.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2ba0      	cmp	r3, #160	@ 0xa0
 800423c:	d902      	bls.n	8004244 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800423e:	2302      	movs	r3, #2
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e013      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004244:	2301      	movs	r3, #1
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e010      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b80      	cmp	r3, #128	@ 0x80
 800424e:	d902      	bls.n	8004256 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004250:	2303      	movs	r3, #3
 8004252:	613b      	str	r3, [r7, #16]
 8004254:	e00a      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b80      	cmp	r3, #128	@ 0x80
 800425a:	d102      	bne.n	8004262 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800425c:	2302      	movs	r3, #2
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e004      	b.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2b70      	cmp	r3, #112	@ 0x70
 8004266:	d101      	bne.n	800426c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004268:	2301      	movs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800426c:	4b0b      	ldr	r3, [pc, #44]	@ (800429c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f023 0207 	bic.w	r2, r3, #7
 8004274:	4909      	ldr	r1, [pc, #36]	@ (800429c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800427c:	4b07      	ldr	r3, [pc, #28]	@ (800429c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0307 	and.w	r3, r3, #7
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	429a      	cmp	r2, r3
 8004288:	d001      	beq.n	800428e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40021000 	.word	0x40021000
 800429c:	40022000 	.word	0x40022000

080042a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042a8:	2300      	movs	r3, #0
 80042aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042ac:	2300      	movs	r3, #0
 80042ae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d041      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042c4:	d02a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80042c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042ca:	d824      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042d0:	d008      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042d6:	d81e      	bhi.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042e0:	d010      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042e2:	e018      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042e4:	4b86      	ldr	r3, [pc, #536]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a85      	ldr	r2, [pc, #532]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80042f0:	e015      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fabb 	bl	8004874 <RCCEx_PLLSAI1_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004302:	e00c      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3320      	adds	r3, #32
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fba6 	bl	8004a5c <RCCEx_PLLSAI2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	74fb      	strb	r3, [r7, #19]
      break;
 800431a:	e000      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800431c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800431e:	7cfb      	ldrb	r3, [r7, #19]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004324:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800432a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004332:	4973      	ldr	r1, [pc, #460]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800433a:	e001      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d041      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004350:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004354:	d02a      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004356:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800435a:	d824      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800435c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004360:	d008      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004366:	d81e      	bhi.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800436c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004370:	d010      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004372:	e018      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004374:	4b62      	ldr	r3, [pc, #392]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a61      	ldr	r2, [pc, #388]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800437a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800437e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004380:	e015      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fa73 	bl	8004874 <RCCEx_PLLSAI1_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004392:	e00c      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3320      	adds	r3, #32
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fb5e 	bl	8004a5c <RCCEx_PLLSAI2_Config>
 80043a0:	4603      	mov	r3, r0
 80043a2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a4:	e003      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	74fb      	strb	r3, [r7, #19]
      break;
 80043aa:	e000      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10b      	bne.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043b4:	4b52      	ldr	r3, [pc, #328]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c2:	494f      	ldr	r1, [pc, #316]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043ca:	e001      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80a0 	beq.w	800451e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043de:	2300      	movs	r3, #0
 80043e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043e2:	4b47      	ldr	r3, [pc, #284]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80043ee:	2301      	movs	r3, #1
 80043f0:	e000      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80043f2:	2300      	movs	r3, #0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f8:	4b41      	ldr	r3, [pc, #260]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fc:	4a40      	ldr	r2, [pc, #256]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004402:	6593      	str	r3, [r2, #88]	@ 0x58
 8004404:	4b3e      	ldr	r3, [pc, #248]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004406:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004408:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004410:	2301      	movs	r3, #1
 8004412:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004414:	4b3b      	ldr	r3, [pc, #236]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a3a      	ldr	r2, [pc, #232]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800441a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800441e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004420:	f7fd fa52 	bl	80018c8 <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004426:	e009      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004428:	f7fd fa4e 	bl	80018c8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d902      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	74fb      	strb	r3, [r7, #19]
        break;
 800443a:	e005      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800443c:	4b31      	ldr	r3, [pc, #196]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ef      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004448:	7cfb      	ldrb	r3, [r7, #19]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d15c      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800444e:	4b2c      	ldr	r3, [pc, #176]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004454:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004458:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01f      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	429a      	cmp	r2, r3
 800446a:	d019      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800446c:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004472:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004476:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004478:	4b21      	ldr	r3, [pc, #132]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447e:	4a20      	ldr	r2, [pc, #128]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004488:	4b1d      	ldr	r3, [pc, #116]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448e:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fd fa0d 	bl	80018c8 <HAL_GetTick>
 80044ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b0:	e00b      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044b2:	f7fd fa09 	bl	80018c8 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d902      	bls.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	74fb      	strb	r3, [r7, #19]
            break;
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0ec      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80044d8:	7cfb      	ldrb	r3, [r7, #19]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044de:	4b08      	ldr	r3, [pc, #32]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044ee:	4904      	ldr	r1, [pc, #16]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044f6:	e009      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	74bb      	strb	r3, [r7, #18]
 80044fc:	e006      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004508:	7cfb      	ldrb	r3, [r7, #19]
 800450a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800450c:	7c7b      	ldrb	r3, [r7, #17]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b9e      	ldr	r3, [pc, #632]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004516:	4a9d      	ldr	r2, [pc, #628]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800451c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452a:	4b98      	ldr	r3, [pc, #608]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	f023 0203 	bic.w	r2, r3, #3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	4994      	ldr	r1, [pc, #592]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800454c:	4b8f      	ldr	r3, [pc, #572]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004552:	f023 020c 	bic.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455a:	498c      	ldr	r1, [pc, #560]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800456e:	4b87      	ldr	r3, [pc, #540]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457c:	4983      	ldr	r1, [pc, #524]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457e:	4313      	orrs	r3, r2
 8004580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004590:	4b7e      	ldr	r3, [pc, #504]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004596:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	497b      	ldr	r1, [pc, #492]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045b2:	4b76      	ldr	r3, [pc, #472]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c0:	4972      	ldr	r1, [pc, #456]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0320 	and.w	r3, r3, #32
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d4:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045e2:	496a      	ldr	r1, [pc, #424]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045f6:	4b65      	ldr	r3, [pc, #404]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	4961      	ldr	r1, [pc, #388]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004618:	4b5c      	ldr	r3, [pc, #368]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800461a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	4959      	ldr	r1, [pc, #356]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800463a:	4b54      	ldr	r3, [pc, #336]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004640:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	4950      	ldr	r1, [pc, #320]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800465c:	4b4b      	ldr	r3, [pc, #300]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004662:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	4948      	ldr	r1, [pc, #288]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800467e:	4b43      	ldr	r3, [pc, #268]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004684:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468c:	493f      	ldr	r1, [pc, #252]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	4313      	orrs	r3, r2
 8004690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d028      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046a0:	4b3a      	ldr	r3, [pc, #232]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ae:	4937      	ldr	r1, [pc, #220]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046be:	d106      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c0:	4b32      	ldr	r3, [pc, #200]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a31      	ldr	r2, [pc, #196]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ca:	60d3      	str	r3, [r2, #12]
 80046cc:	e011      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046d6:	d10c      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3304      	adds	r3, #4
 80046dc:	2101      	movs	r1, #1
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f8c8 	bl	8004874 <RCCEx_PLLSAI1_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d028      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046fe:	4b23      	ldr	r3, [pc, #140]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004704:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470c:	491f      	ldr	r1, [pc, #124]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004718:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800471c:	d106      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471e:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4a1a      	ldr	r2, [pc, #104]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004728:	60d3      	str	r3, [r2, #12]
 800472a:	e011      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004730:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004734:	d10c      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f000 f899 	bl	8004874 <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800474c:	7cfb      	ldrb	r3, [r7, #19]
 800474e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d02b      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800475c:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800476a:	4908      	ldr	r1, [pc, #32]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004776:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800477a:	d109      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477c:	4b03      	ldr	r3, [pc, #12]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	4a02      	ldr	r2, [pc, #8]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004786:	60d3      	str	r3, [r2, #12]
 8004788:	e014      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004794:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	2101      	movs	r1, #1
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 f867 	bl	8004874 <RCCEx_PLLSAI1_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02f      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047c0:	4b2b      	ldr	r3, [pc, #172]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ce:	4928      	ldr	r1, [pc, #160]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047de:	d10d      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	2102      	movs	r1, #2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 f844 	bl	8004874 <RCCEx_PLLSAI1_Config>
 80047ec:	4603      	mov	r3, r0
 80047ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d014      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80047f6:	7cfb      	ldrb	r3, [r7, #19]
 80047f8:	74bb      	strb	r3, [r7, #18]
 80047fa:	e011      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004804:	d10c      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3320      	adds	r3, #32
 800480a:	2102      	movs	r1, #2
 800480c:	4618      	mov	r0, r3
 800480e:	f000 f925 	bl	8004a5c <RCCEx_PLLSAI2_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800481c:	7cfb      	ldrb	r3, [r7, #19]
 800481e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800482c:	4b10      	ldr	r3, [pc, #64]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004832:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483a:	490d      	ldr	r1, [pc, #52]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800484e:	4b08      	ldr	r3, [pc, #32]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004854:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800485e:	4904      	ldr	r1, [pc, #16]	@ (8004870 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004866:	7cbb      	ldrb	r3, [r7, #18]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000

08004874 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004882:	4b75      	ldr	r3, [pc, #468]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d018      	beq.n	80048c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800488e:	4b72      	ldr	r3, [pc, #456]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0203 	and.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d10d      	bne.n	80048ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
       ||
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	091b      	lsrs	r3, r3, #4
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
       ||
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d047      	beq.n	800494a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
 80048be:	e044      	b.n	800494a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d018      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0x86>
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d825      	bhi.n	8004918 <RCCEx_PLLSAI1_Config+0xa4>
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d002      	beq.n	80048d6 <RCCEx_PLLSAI1_Config+0x62>
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d009      	beq.n	80048e8 <RCCEx_PLLSAI1_Config+0x74>
 80048d4:	e020      	b.n	8004918 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048d6:	4b60      	ldr	r3, [pc, #384]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11d      	bne.n	800491e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e6:	e01a      	b.n	800491e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80048e8:	4b5b      	ldr	r3, [pc, #364]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d116      	bne.n	8004922 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f8:	e013      	b.n	8004922 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80048fa:	4b57      	ldr	r3, [pc, #348]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10f      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004906:	4b54      	ldr	r3, [pc, #336]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004916:	e006      	b.n	8004926 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      break;
 800491c:	e004      	b.n	8004928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800491e:	bf00      	nop
 8004920:	e002      	b.n	8004928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004922:	bf00      	nop
 8004924:	e000      	b.n	8004928 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004926:	bf00      	nop
    }

    if(status == HAL_OK)
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10d      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800492e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6819      	ldr	r1, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	3b01      	subs	r3, #1
 8004940:	011b      	lsls	r3, r3, #4
 8004942:	430b      	orrs	r3, r1
 8004944:	4944      	ldr	r1, [pc, #272]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d17d      	bne.n	8004a4c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004950:	4b41      	ldr	r3, [pc, #260]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a40      	ldr	r2, [pc, #256]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004956:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800495a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495c:	f7fc ffb4 	bl	80018c8 <HAL_GetTick>
 8004960:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004962:	e009      	b.n	8004978 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004964:	f7fc ffb0 	bl	80018c8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d902      	bls.n	8004978 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	73fb      	strb	r3, [r7, #15]
        break;
 8004976:	e005      	b.n	8004984 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004978:	4b37      	ldr	r3, [pc, #220]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ef      	bne.n	8004964 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d160      	bne.n	8004a4c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d111      	bne.n	80049b4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004990:	4b31      	ldr	r3, [pc, #196]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6892      	ldr	r2, [r2, #8]
 80049a0:	0211      	lsls	r1, r2, #8
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68d2      	ldr	r2, [r2, #12]
 80049a6:	0912      	lsrs	r2, r2, #4
 80049a8:	0452      	lsls	r2, r2, #17
 80049aa:	430a      	orrs	r2, r1
 80049ac:	492a      	ldr	r1, [pc, #168]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	610b      	str	r3, [r1, #16]
 80049b2:	e027      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d112      	bne.n	80049e0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049ba:	4b27      	ldr	r3, [pc, #156]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80049c2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6892      	ldr	r2, [r2, #8]
 80049ca:	0211      	lsls	r1, r2, #8
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	6912      	ldr	r2, [r2, #16]
 80049d0:	0852      	lsrs	r2, r2, #1
 80049d2:	3a01      	subs	r2, #1
 80049d4:	0552      	lsls	r2, r2, #21
 80049d6:	430a      	orrs	r2, r1
 80049d8:	491f      	ldr	r1, [pc, #124]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	610b      	str	r3, [r1, #16]
 80049de:	e011      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80049e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6952      	ldr	r2, [r2, #20]
 80049f6:	0852      	lsrs	r2, r2, #1
 80049f8:	3a01      	subs	r2, #1
 80049fa:	0652      	lsls	r2, r2, #25
 80049fc:	430a      	orrs	r2, r1
 80049fe:	4916      	ldr	r1, [pc, #88]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a04:	4b14      	ldr	r3, [pc, #80]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a13      	ldr	r2, [pc, #76]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a10:	f7fc ff5a 	bl	80018c8 <HAL_GetTick>
 8004a14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a16:	e009      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a18:	f7fc ff56 	bl	80018c8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d902      	bls.n	8004a2c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	73fb      	strb	r3, [r7, #15]
          break;
 8004a2a:	e005      	b.n	8004a38 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ef      	beq.n	8004a18 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a3e:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	4904      	ldr	r1, [pc, #16]	@ (8004a58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000

08004a5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d018      	beq.n	8004aa8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a76:	4b67      	ldr	r3, [pc, #412]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f003 0203 	and.w	r2, r3, #3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d10d      	bne.n	8004aa2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
       ||
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004a8e:	4b61      	ldr	r3, [pc, #388]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	091b      	lsrs	r3, r3, #4
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d047      	beq.n	8004b32 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
 8004aa6:	e044      	b.n	8004b32 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d018      	beq.n	8004ae2 <RCCEx_PLLSAI2_Config+0x86>
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d825      	bhi.n	8004b00 <RCCEx_PLLSAI2_Config+0xa4>
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d002      	beq.n	8004abe <RCCEx_PLLSAI2_Config+0x62>
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d009      	beq.n	8004ad0 <RCCEx_PLLSAI2_Config+0x74>
 8004abc:	e020      	b.n	8004b00 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004abe:	4b55      	ldr	r3, [pc, #340]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d11d      	bne.n	8004b06 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ace:	e01a      	b.n	8004b06 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ad0:	4b50      	ldr	r3, [pc, #320]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d116      	bne.n	8004b0a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae0:	e013      	b.n	8004b0a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ae2:	4b4c      	ldr	r3, [pc, #304]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004aee:	4b49      	ldr	r3, [pc, #292]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004afe:	e006      	b.n	8004b0e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e004      	b.n	8004b10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b06:	bf00      	nop
 8004b08:	e002      	b.n	8004b10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b0a:	bf00      	nop
 8004b0c:	e000      	b.n	8004b10 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10d      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b16:	4b3f      	ldr	r3, [pc, #252]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	011b      	lsls	r3, r3, #4
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	4939      	ldr	r1, [pc, #228]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d167      	bne.n	8004c08 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b38:	4b36      	ldr	r3, [pc, #216]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a35      	ldr	r2, [pc, #212]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b44:	f7fc fec0 	bl	80018c8 <HAL_GetTick>
 8004b48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b4a:	e009      	b.n	8004b60 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b4c:	f7fc febc 	bl	80018c8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d902      	bls.n	8004b60 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b5e:	e005      	b.n	8004b6c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b60:	4b2c      	ldr	r3, [pc, #176]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1ef      	bne.n	8004b4c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d14a      	bne.n	8004c08 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d111      	bne.n	8004b9c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b78:	4b26      	ldr	r3, [pc, #152]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6892      	ldr	r2, [r2, #8]
 8004b88:	0211      	lsls	r1, r2, #8
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	0912      	lsrs	r2, r2, #4
 8004b90:	0452      	lsls	r2, r2, #17
 8004b92:	430a      	orrs	r2, r1
 8004b94:	491f      	ldr	r1, [pc, #124]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	614b      	str	r3, [r1, #20]
 8004b9a:	e011      	b.n	8004bc0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ba4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6892      	ldr	r2, [r2, #8]
 8004bac:	0211      	lsls	r1, r2, #8
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6912      	ldr	r2, [r2, #16]
 8004bb2:	0852      	lsrs	r2, r2, #1
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	0652      	lsls	r2, r2, #25
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	4916      	ldr	r1, [pc, #88]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004bc0:	4b14      	ldr	r3, [pc, #80]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a13      	ldr	r2, [pc, #76]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bcc:	f7fc fe7c 	bl	80018c8 <HAL_GetTick>
 8004bd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bd2:	e009      	b.n	8004be8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bd4:	f7fc fe78 	bl	80018c8 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d902      	bls.n	8004be8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	73fb      	strb	r3, [r7, #15]
          break;
 8004be6:	e005      	b.n	8004bf4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004be8:	4b0a      	ldr	r3, [pc, #40]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ef      	beq.n	8004bd4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004bfa:	4b06      	ldr	r3, [pc, #24]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	4904      	ldr	r1, [pc, #16]	@ (8004c14 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000

08004c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e095      	b.n	8004d56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fb ffd0 	bl	8000c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004c90:	d902      	bls.n	8004c98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	e002      	b.n	8004c9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004ca6:	d007      	beq.n	8004cb8 <HAL_SPI_Init+0xa0>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cfa:	ea42 0103 	orr.w	r1, r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	f003 0204 	and.w	r2, r3, #4
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	f003 0310 	and.w	r3, r3, #16
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e049      	b.n	8004e04 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d106      	bne.n	8004d8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7fc fab1 	bl	80012ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2202      	movs	r2, #2
 8004d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f000 fcb9 	bl	8005714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d001      	beq.n	8004e24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e04f      	b.n	8004ec4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a23      	ldr	r2, [pc, #140]	@ (8004ed0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e4e:	d018      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	@ (8004ed4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1c      	ldr	r2, [pc, #112]	@ (8004edc <HAL_TIM_Base_Start_IT+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIM_Base_Start_IT+0x76>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ee4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d115      	bne.n	8004eae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b06      	cmp	r3, #6
 8004e92:	d015      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0xb4>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e9a:	d011      	beq.n	8004ec0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0201 	orr.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eac:	e008      	b.n	8004ec0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f042 0201 	orr.w	r2, r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	e000      	b.n	8004ec2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	40012c00 	.word	0x40012c00
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	00010007 	.word	0x00010007

08004eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e049      	b.n	8004f92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f841 	bl	8004f9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 fbf2 	bl	8005714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b086      	sub	sp, #24
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e097      	b.n	80050f2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d106      	bne.n	8004fdc <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7fc f948 	bl	800126c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f000 fb86 	bl	8005714 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005030:	f023 0303 	bic.w	r3, r3, #3
 8005034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	4313      	orrs	r3, r2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800504e:	f023 030c 	bic.w	r3, r3, #12
 8005052:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800505a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800505e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	4313      	orrs	r3, r2
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	011a      	lsls	r2, r3, #4
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	4313      	orrs	r3, r2
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	4313      	orrs	r3, r2
 8005084:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800508c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005094:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	4313      	orrs	r3, r2
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01b      	beq.n	800515e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0202 	mvn.w	r2, #2
 800512e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fac6 	bl	80056d6 <HAL_TIM_IC_CaptureCallback>
 800514a:	e005      	b.n	8005158 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fab8 	bl	80056c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fac9 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d020      	beq.n	80051aa <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01b      	beq.n	80051aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f06f 0204 	mvn.w	r2, #4
 800517a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800518c:	2b00      	cmp	r3, #0
 800518e:	d003      	beq.n	8005198 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 faa0 	bl	80056d6 <HAL_TIM_IC_CaptureCallback>
 8005196:	e005      	b.n	80051a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fa92 	bl	80056c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 faa3 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d020      	beq.n	80051f6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0308 	and.w	r3, r3, #8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01b      	beq.n	80051f6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f06f 0208 	mvn.w	r2, #8
 80051c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2204      	movs	r2, #4
 80051cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fa7a 	bl	80056d6 <HAL_TIM_IC_CaptureCallback>
 80051e2:	e005      	b.n	80051f0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fa6c 	bl	80056c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fa7d 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d020      	beq.n	8005242 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 0310 	and.w	r3, r3, #16
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01b      	beq.n	8005242 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f06f 0210 	mvn.w	r2, #16
 8005212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2208      	movs	r2, #8
 8005218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa54 	bl	80056d6 <HAL_TIM_IC_CaptureCallback>
 800522e:	e005      	b.n	800523c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fa46 	bl	80056c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa57 	bl	80056ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00c      	beq.n	8005266 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d007      	beq.n	8005266 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f06f 0201 	mvn.w	r2, #1
 800525e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fb fc7f 	bl	8000b64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00c      	beq.n	8005294 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fee8 	bl	8006064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fee0 	bl	8006078 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d007      	beq.n	80052dc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fa11 	bl	80056fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00c      	beq.n	8005300 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d007      	beq.n	8005300 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0220 	mvn.w	r2, #32
 80052f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fea8 	bl	8006050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ff      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b14      	cmp	r3, #20
 8005332:	f200 80f0 	bhi.w	8005516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005391 	.word	0x08005391
 8005340:	08005517 	.word	0x08005517
 8005344:	08005517 	.word	0x08005517
 8005348:	08005517 	.word	0x08005517
 800534c:	080053d1 	.word	0x080053d1
 8005350:	08005517 	.word	0x08005517
 8005354:	08005517 	.word	0x08005517
 8005358:	08005517 	.word	0x08005517
 800535c:	08005413 	.word	0x08005413
 8005360:	08005517 	.word	0x08005517
 8005364:	08005517 	.word	0x08005517
 8005368:	08005517 	.word	0x08005517
 800536c:	08005453 	.word	0x08005453
 8005370:	08005517 	.word	0x08005517
 8005374:	08005517 	.word	0x08005517
 8005378:	08005517 	.word	0x08005517
 800537c:	08005495 	.word	0x08005495
 8005380:	08005517 	.word	0x08005517
 8005384:	08005517 	.word	0x08005517
 8005388:	08005517 	.word	0x08005517
 800538c:	080054d5 	.word	0x080054d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fa62 	bl	8005860 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0208 	orr.w	r2, r2, #8
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
      break;
 80053ce:	e0a5      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fad2 	bl	8005980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	619a      	str	r2, [r3, #24]
      break;
 8005410:	e084      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fb3b 	bl	8005a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0208 	orr.w	r2, r2, #8
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
      break;
 8005450:	e064      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fba3 	bl	8005ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      break;
 8005492:	e043      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fbec 	bl	8005c78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80054d2:	e023      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fc30 	bl	8005d40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005514:	e002      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x1c>
 8005548:	2302      	movs	r3, #2
 800554a:	e0b6      	b.n	80056ba <HAL_TIM_ConfigClockSource+0x18a>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800556a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005588:	d03e      	beq.n	8005608 <HAL_TIM_ConfigClockSource+0xd8>
 800558a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800558e:	f200 8087 	bhi.w	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 8005592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005596:	f000 8086 	beq.w	80056a6 <HAL_TIM_ConfigClockSource+0x176>
 800559a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800559e:	d87f      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055a0:	2b70      	cmp	r3, #112	@ 0x70
 80055a2:	d01a      	beq.n	80055da <HAL_TIM_ConfigClockSource+0xaa>
 80055a4:	2b70      	cmp	r3, #112	@ 0x70
 80055a6:	d87b      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055a8:	2b60      	cmp	r3, #96	@ 0x60
 80055aa:	d050      	beq.n	800564e <HAL_TIM_ConfigClockSource+0x11e>
 80055ac:	2b60      	cmp	r3, #96	@ 0x60
 80055ae:	d877      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055b0:	2b50      	cmp	r3, #80	@ 0x50
 80055b2:	d03c      	beq.n	800562e <HAL_TIM_ConfigClockSource+0xfe>
 80055b4:	2b50      	cmp	r3, #80	@ 0x50
 80055b6:	d873      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055b8:	2b40      	cmp	r3, #64	@ 0x40
 80055ba:	d058      	beq.n	800566e <HAL_TIM_ConfigClockSource+0x13e>
 80055bc:	2b40      	cmp	r3, #64	@ 0x40
 80055be:	d86f      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055c0:	2b30      	cmp	r3, #48	@ 0x30
 80055c2:	d064      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055c4:	2b30      	cmp	r3, #48	@ 0x30
 80055c6:	d86b      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d060      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d867      	bhi.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d05c      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d05a      	beq.n	800568e <HAL_TIM_ConfigClockSource+0x15e>
 80055d8:	e062      	b.n	80056a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ea:	f000 fc89 	bl	8005f00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	609a      	str	r2, [r3, #8]
      break;
 8005606:	e04f      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005618:	f000 fc72 	bl	8005f00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800562a:	609a      	str	r2, [r3, #8]
      break;
 800562c:	e03c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563a:	461a      	mov	r2, r3
 800563c:	f000 fbe6 	bl	8005e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2150      	movs	r1, #80	@ 0x50
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fc3f 	bl	8005eca <TIM_ITRx_SetConfig>
      break;
 800564c:	e02c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800565a:	461a      	mov	r2, r3
 800565c:	f000 fc05 	bl	8005e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2160      	movs	r1, #96	@ 0x60
 8005666:	4618      	mov	r0, r3
 8005668:	f000 fc2f 	bl	8005eca <TIM_ITRx_SetConfig>
      break;
 800566c:	e01c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800567a:	461a      	mov	r2, r3
 800567c:	f000 fbc6 	bl	8005e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2140      	movs	r1, #64	@ 0x40
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fc1f 	bl	8005eca <TIM_ITRx_SetConfig>
      break;
 800568c:	e00c      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f000 fc16 	bl	8005eca <TIM_ITRx_SetConfig>
      break;
 800569e:	e003      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
      break;
 80056a4:	e000      	b.n	80056a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80056a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
	...

08005714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a46      	ldr	r2, [pc, #280]	@ (8005840 <TIM_Base_SetConfig+0x12c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005732:	d00f      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a43      	ldr	r2, [pc, #268]	@ (8005844 <TIM_Base_SetConfig+0x130>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00b      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a42      	ldr	r2, [pc, #264]	@ (8005848 <TIM_Base_SetConfig+0x134>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d007      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a41      	ldr	r2, [pc, #260]	@ (800584c <TIM_Base_SetConfig+0x138>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d003      	beq.n	8005754 <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a40      	ldr	r2, [pc, #256]	@ (8005850 <TIM_Base_SetConfig+0x13c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d108      	bne.n	8005766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a35      	ldr	r2, [pc, #212]	@ (8005840 <TIM_Base_SetConfig+0x12c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01f      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d01b      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a32      	ldr	r2, [pc, #200]	@ (8005844 <TIM_Base_SetConfig+0x130>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d017      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a31      	ldr	r2, [pc, #196]	@ (8005848 <TIM_Base_SetConfig+0x134>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d013      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a30      	ldr	r2, [pc, #192]	@ (800584c <TIM_Base_SetConfig+0x138>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00f      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2f      	ldr	r2, [pc, #188]	@ (8005850 <TIM_Base_SetConfig+0x13c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00b      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2e      	ldr	r2, [pc, #184]	@ (8005854 <TIM_Base_SetConfig+0x140>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d007      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005858 <TIM_Base_SetConfig+0x144>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_Base_SetConfig+0x9a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2c      	ldr	r2, [pc, #176]	@ (800585c <TIM_Base_SetConfig+0x148>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d108      	bne.n	80057c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <TIM_Base_SetConfig+0x12c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00f      	beq.n	800580c <TIM_Base_SetConfig+0xf8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <TIM_Base_SetConfig+0x13c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00b      	beq.n	800580c <TIM_Base_SetConfig+0xf8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a17      	ldr	r2, [pc, #92]	@ (8005854 <TIM_Base_SetConfig+0x140>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <TIM_Base_SetConfig+0xf8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a16      	ldr	r2, [pc, #88]	@ (8005858 <TIM_Base_SetConfig+0x144>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_Base_SetConfig+0xf8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a15      	ldr	r2, [pc, #84]	@ (800585c <TIM_Base_SetConfig+0x148>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d103      	bne.n	8005814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f023 0201 	bic.w	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	611a      	str	r2, [r3, #16]
  }
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40012c00 	.word	0x40012c00
 8005844:	40000400 	.word	0x40000400
 8005848:	40000800 	.word	0x40000800
 800584c:	40000c00 	.word	0x40000c00
 8005850:	40013400 	.word	0x40013400
 8005854:	40014000 	.word	0x40014000
 8005858:	40014400 	.word	0x40014400
 800585c:	40014800 	.word	0x40014800

08005860 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	f023 0201 	bic.w	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800588e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0302 	bic.w	r3, r3, #2
 80058ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a2c      	ldr	r2, [pc, #176]	@ (800596c <TIM_OC1_SetConfig+0x10c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d00f      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005970 <TIM_OC1_SetConfig+0x110>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d00b      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005974 <TIM_OC1_SetConfig+0x114>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a29      	ldr	r2, [pc, #164]	@ (8005978 <TIM_OC1_SetConfig+0x118>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC1_SetConfig+0x80>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a28      	ldr	r2, [pc, #160]	@ (800597c <TIM_OC1_SetConfig+0x11c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10c      	bne.n	80058fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0308 	bic.w	r3, r3, #8
 80058e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 0304 	bic.w	r3, r3, #4
 80058f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <TIM_OC1_SetConfig+0x10c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00f      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <TIM_OC1_SetConfig+0x110>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <TIM_OC1_SetConfig+0x114>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a18      	ldr	r2, [pc, #96]	@ (8005978 <TIM_OC1_SetConfig+0x118>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC1_SetConfig+0xc2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a17      	ldr	r2, [pc, #92]	@ (800597c <TIM_OC1_SetConfig+0x11c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d111      	bne.n	8005946 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	621a      	str	r2, [r3, #32]
}
 8005960:	bf00      	nop
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	40012c00 	.word	0x40012c00
 8005970:	40013400 	.word	0x40013400
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800

08005980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0210 	bic.w	r2, r3, #16
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0320 	bic.w	r3, r3, #32
 80059ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a28      	ldr	r2, [pc, #160]	@ (8005a80 <TIM_OC2_SetConfig+0x100>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d003      	beq.n	80059ec <TIM_OC2_SetConfig+0x6c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a27      	ldr	r2, [pc, #156]	@ (8005a84 <TIM_OC2_SetConfig+0x104>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d10d      	bne.n	8005a08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005a80 <TIM_OC2_SetConfig+0x100>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00f      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <TIM_OC2_SetConfig+0x104>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a88 <TIM_OC2_SetConfig+0x108>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a1a      	ldr	r2, [pc, #104]	@ (8005a8c <TIM_OC2_SetConfig+0x10c>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_OC2_SetConfig+0xb0>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a19      	ldr	r2, [pc, #100]	@ (8005a90 <TIM_OC2_SetConfig+0x110>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d113      	bne.n	8005a58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40013400 	.word	0x40013400
 8005a88:	40014000 	.word	0x40014000
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800

08005a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0303 	bic.w	r3, r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	021b      	lsls	r3, r3, #8
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a27      	ldr	r2, [pc, #156]	@ (8005b90 <TIM_OC3_SetConfig+0xfc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d003      	beq.n	8005afe <TIM_OC3_SetConfig+0x6a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a26      	ldr	r2, [pc, #152]	@ (8005b94 <TIM_OC3_SetConfig+0x100>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10d      	bne.n	8005b1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005b90 <TIM_OC3_SetConfig+0xfc>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00f      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1b      	ldr	r2, [pc, #108]	@ (8005b94 <TIM_OC3_SetConfig+0x100>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005b98 <TIM_OC3_SetConfig+0x104>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d007      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a19      	ldr	r2, [pc, #100]	@ (8005b9c <TIM_OC3_SetConfig+0x108>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d003      	beq.n	8005b42 <TIM_OC3_SetConfig+0xae>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a18      	ldr	r2, [pc, #96]	@ (8005ba0 <TIM_OC3_SetConfig+0x10c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d113      	bne.n	8005b6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	621a      	str	r2, [r3, #32]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	40012c00 	.word	0x40012c00
 8005b94:	40013400 	.word	0x40013400
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	40014400 	.word	0x40014400
 8005ba0:	40014800 	.word	0x40014800

08005ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	031b      	lsls	r3, r3, #12
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a18      	ldr	r2, [pc, #96]	@ (8005c64 <TIM_OC4_SetConfig+0xc0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00f      	beq.n	8005c28 <TIM_OC4_SetConfig+0x84>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a17      	ldr	r2, [pc, #92]	@ (8005c68 <TIM_OC4_SetConfig+0xc4>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_OC4_SetConfig+0x84>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a16      	ldr	r2, [pc, #88]	@ (8005c6c <TIM_OC4_SetConfig+0xc8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC4_SetConfig+0x84>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a15      	ldr	r2, [pc, #84]	@ (8005c70 <TIM_OC4_SetConfig+0xcc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC4_SetConfig+0x84>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a14      	ldr	r2, [pc, #80]	@ (8005c74 <TIM_OC4_SetConfig+0xd0>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d109      	bne.n	8005c3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	019b      	lsls	r3, r3, #6
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40013400 	.word	0x40013400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800

08005c78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005cbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	041b      	lsls	r3, r3, #16
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a17      	ldr	r2, [pc, #92]	@ (8005d2c <TIM_OC5_SetConfig+0xb4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_OC5_SetConfig+0x7a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a16      	ldr	r2, [pc, #88]	@ (8005d30 <TIM_OC5_SetConfig+0xb8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_OC5_SetConfig+0x7a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a15      	ldr	r2, [pc, #84]	@ (8005d34 <TIM_OC5_SetConfig+0xbc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d007      	beq.n	8005cf2 <TIM_OC5_SetConfig+0x7a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a14      	ldr	r2, [pc, #80]	@ (8005d38 <TIM_OC5_SetConfig+0xc0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC5_SetConfig+0x7a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a13      	ldr	r2, [pc, #76]	@ (8005d3c <TIM_OC5_SetConfig+0xc4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d109      	bne.n	8005d06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800

08005d40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	021b      	lsls	r3, r3, #8
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	051b      	lsls	r3, r3, #20
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a18      	ldr	r2, [pc, #96]	@ (8005df8 <TIM_OC6_SetConfig+0xb8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00f      	beq.n	8005dbc <TIM_OC6_SetConfig+0x7c>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a17      	ldr	r2, [pc, #92]	@ (8005dfc <TIM_OC6_SetConfig+0xbc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d00b      	beq.n	8005dbc <TIM_OC6_SetConfig+0x7c>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <TIM_OC6_SetConfig+0xc0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d007      	beq.n	8005dbc <TIM_OC6_SetConfig+0x7c>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a15      	ldr	r2, [pc, #84]	@ (8005e04 <TIM_OC6_SetConfig+0xc4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d003      	beq.n	8005dbc <TIM_OC6_SetConfig+0x7c>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a14      	ldr	r2, [pc, #80]	@ (8005e08 <TIM_OC6_SetConfig+0xc8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d109      	bne.n	8005dd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	029b      	lsls	r3, r3, #10
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40013400 	.word	0x40013400
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40014400 	.word	0x40014400
 8005e08:	40014800 	.word	0x40014800

08005e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f023 0201 	bic.w	r2, r3, #1
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	011b      	lsls	r3, r3, #4
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f023 030a 	bic.w	r3, r3, #10
 8005e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	621a      	str	r2, [r3, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr

08005e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b087      	sub	sp, #28
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	f023 0210 	bic.w	r2, r3, #16
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	699b      	ldr	r3, [r3, #24]
 8005e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	031b      	lsls	r3, r3, #12
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ea6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f043 0307 	orr.w	r3, r3, #7
 8005eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	021a      	lsls	r2, r3, #8
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	431a      	orrs	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	609a      	str	r2, [r3, #8]
}
 8005f34:	bf00      	nop
 8005f36:	371c      	adds	r7, #28
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e068      	b.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a2d      	ldr	r2, [pc, #180]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d108      	bne.n	8005f9e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f92:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01d      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	d018      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1a      	ldr	r2, [pc, #104]	@ (8006044 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d00e      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a18      	ldr	r2, [pc, #96]	@ (8006048 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d009      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a13      	ldr	r2, [pc, #76]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a14      	ldr	r2, [pc, #80]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d10c      	bne.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006004:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	4313      	orrs	r3, r2
 800600e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40013400 	.word	0x40013400
 8006040:	40000400 	.word	0x40000400
 8006044:	40000800 	.word	0x40000800
 8006048:	40000c00 	.word	0x40000c00
 800604c:	40014000 	.word	0x40014000

08006050 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e040      	b.n	8006120 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d106      	bne.n	80060b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7fb f9ec 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2224      	movs	r2, #36	@ 0x24
 80060b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fc32 	bl	800693c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f977 	bl	80063cc <UART_SetConfig>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e01b      	b.n	8006120 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685a      	ldr	r2, [r3, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006106:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fcb1 	bl	8006a80 <UART_CheckIdleState>
 800611e:	4603      	mov	r3, r0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08a      	sub	sp, #40	@ 0x28
 800612c:	af02      	add	r7, sp, #8
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	4613      	mov	r3, r2
 8006136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800613c:	2b20      	cmp	r3, #32
 800613e:	d177      	bne.n	8006230 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Transmit+0x24>
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e070      	b.n	8006232 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2221      	movs	r2, #33	@ 0x21
 800615c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800615e:	f7fb fbb3 	bl	80018c8 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800617c:	d108      	bne.n	8006190 <HAL_UART_Transmit+0x68>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	e003      	b.n	8006198 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006194:	2300      	movs	r3, #0
 8006196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006198:	e02f      	b.n	80061fa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2200      	movs	r2, #0
 80061a2:	2180      	movs	r1, #128	@ 0x80
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fd13 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d004      	beq.n	80061ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e03b      	b.n	8006232 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	881a      	ldrh	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061cc:	b292      	uxth	r2, r2
 80061ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	3302      	adds	r3, #2
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e007      	b.n	80061e8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	781a      	ldrb	r2, [r3, #0]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3301      	adds	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3b01      	subs	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1c9      	bne.n	800619a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	2140      	movs	r1, #64	@ 0x40
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f000 fcdd 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d004      	beq.n	8006226 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2220      	movs	r2, #32
 8006220:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e005      	b.n	8006232 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2220      	movs	r2, #32
 800622a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800622c:	2300      	movs	r3, #0
 800622e:	e000      	b.n	8006232 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006230:	2302      	movs	r3, #2
  }
}
 8006232:	4618      	mov	r0, r3
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b08a      	sub	sp, #40	@ 0x28
 800623e:	af02      	add	r7, sp, #8
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006250:	2b20      	cmp	r3, #32
 8006252:	f040 80b6 	bne.w	80063c2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <HAL_UART_Receive+0x28>
 800625c:	88fb      	ldrh	r3, [r7, #6]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e0ae      	b.n	80063c4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2222      	movs	r2, #34	@ 0x22
 8006272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800627c:	f7fb fb24 	bl	80018c8 <HAL_GetTick>
 8006280:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	88fa      	ldrh	r2, [r7, #6]
 8006286:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	88fa      	ldrh	r2, [r7, #6]
 800628e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629a:	d10e      	bne.n	80062ba <HAL_UART_Receive+0x80>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_UART_Receive+0x76>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80062aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062ae:	e02d      	b.n	800630c <HAL_UART_Receive+0xd2>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	22ff      	movs	r2, #255	@ 0xff
 80062b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062b8:	e028      	b.n	800630c <HAL_UART_Receive+0xd2>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <HAL_UART_Receive+0xa4>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d104      	bne.n	80062d4 <HAL_UART_Receive+0x9a>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	22ff      	movs	r2, #255	@ 0xff
 80062ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062d2:	e01b      	b.n	800630c <HAL_UART_Receive+0xd2>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	227f      	movs	r2, #127	@ 0x7f
 80062d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062dc:	e016      	b.n	800630c <HAL_UART_Receive+0xd2>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062e6:	d10d      	bne.n	8006304 <HAL_UART_Receive+0xca>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d104      	bne.n	80062fa <HAL_UART_Receive+0xc0>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	227f      	movs	r2, #127	@ 0x7f
 80062f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80062f8:	e008      	b.n	800630c <HAL_UART_Receive+0xd2>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	223f      	movs	r2, #63	@ 0x3f
 80062fe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006302:	e003      	b.n	800630c <HAL_UART_Receive+0xd2>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006312:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631c:	d108      	bne.n	8006330 <HAL_UART_Receive+0xf6>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e003      	b.n	8006338 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006338:	e037      	b.n	80063aa <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2200      	movs	r2, #0
 8006342:	2120      	movs	r1, #32
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 fc43 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2220      	movs	r2, #32
 8006354:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e033      	b.n	80063c4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10c      	bne.n	800637c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006368:	b29a      	uxth	r2, r3
 800636a:	8a7b      	ldrh	r3, [r7, #18]
 800636c:	4013      	ands	r3, r2
 800636e:	b29a      	uxth	r2, r3
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	3302      	adds	r3, #2
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	e00d      	b.n	8006398 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006382:	b29b      	uxth	r3, r3
 8006384:	b2da      	uxtb	r2, r3
 8006386:	8a7b      	ldrh	r3, [r7, #18]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	4013      	ands	r3, r2
 800638c:	b2da      	uxtb	r2, r3
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	3301      	adds	r3, #1
 8006396:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1c1      	bne.n	800633a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e000      	b.n	80063c4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80063c2:	2302      	movs	r3, #2
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063d0:	b08a      	sub	sp, #40	@ 0x28
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	431a      	orrs	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	69db      	ldr	r3, [r3, #28]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	4ba4      	ldr	r3, [pc, #656]	@ (800668c <UART_SetConfig+0x2c0>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	6812      	ldr	r2, [r2, #0]
 8006402:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006404:	430b      	orrs	r3, r1
 8006406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	430a      	orrs	r2, r1
 800641c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a99      	ldr	r2, [pc, #612]	@ (8006690 <UART_SetConfig+0x2c4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006434:	4313      	orrs	r3, r2
 8006436:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a90      	ldr	r2, [pc, #576]	@ (8006694 <UART_SetConfig+0x2c8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d126      	bne.n	80064a4 <UART_SetConfig+0xd8>
 8006456:	4b90      	ldr	r3, [pc, #576]	@ (8006698 <UART_SetConfig+0x2cc>)
 8006458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	2b03      	cmp	r3, #3
 8006462:	d81b      	bhi.n	800649c <UART_SetConfig+0xd0>
 8006464:	a201      	add	r2, pc, #4	@ (adr r2, 800646c <UART_SetConfig+0xa0>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	0800647d 	.word	0x0800647d
 8006470:	0800648d 	.word	0x0800648d
 8006474:	08006485 	.word	0x08006485
 8006478:	08006495 	.word	0x08006495
 800647c:	2301      	movs	r3, #1
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e116      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006484:	2302      	movs	r3, #2
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648a:	e112      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800648c:	2304      	movs	r3, #4
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006492:	e10e      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006494:	2308      	movs	r3, #8
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649a:	e10a      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800649c:	2310      	movs	r3, #16
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a2:	e106      	b.n	80066b2 <UART_SetConfig+0x2e6>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a7c      	ldr	r2, [pc, #496]	@ (800669c <UART_SetConfig+0x2d0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d138      	bne.n	8006520 <UART_SetConfig+0x154>
 80064ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006698 <UART_SetConfig+0x2cc>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b4:	f003 030c 	and.w	r3, r3, #12
 80064b8:	2b0c      	cmp	r3, #12
 80064ba:	d82d      	bhi.n	8006518 <UART_SetConfig+0x14c>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0xf8>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	08006519 	.word	0x08006519
 80064cc:	08006519 	.word	0x08006519
 80064d0:	08006519 	.word	0x08006519
 80064d4:	08006509 	.word	0x08006509
 80064d8:	08006519 	.word	0x08006519
 80064dc:	08006519 	.word	0x08006519
 80064e0:	08006519 	.word	0x08006519
 80064e4:	08006501 	.word	0x08006501
 80064e8:	08006519 	.word	0x08006519
 80064ec:	08006519 	.word	0x08006519
 80064f0:	08006519 	.word	0x08006519
 80064f4:	08006511 	.word	0x08006511
 80064f8:	2300      	movs	r3, #0
 80064fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fe:	e0d8      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006500:	2302      	movs	r3, #2
 8006502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006506:	e0d4      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650e:	e0d0      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006516:	e0cc      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800651e:	e0c8      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a5e      	ldr	r2, [pc, #376]	@ (80066a0 <UART_SetConfig+0x2d4>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d125      	bne.n	8006576 <UART_SetConfig+0x1aa>
 800652a:	4b5b      	ldr	r3, [pc, #364]	@ (8006698 <UART_SetConfig+0x2cc>)
 800652c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006530:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006534:	2b30      	cmp	r3, #48	@ 0x30
 8006536:	d016      	beq.n	8006566 <UART_SetConfig+0x19a>
 8006538:	2b30      	cmp	r3, #48	@ 0x30
 800653a:	d818      	bhi.n	800656e <UART_SetConfig+0x1a2>
 800653c:	2b20      	cmp	r3, #32
 800653e:	d00a      	beq.n	8006556 <UART_SetConfig+0x18a>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d814      	bhi.n	800656e <UART_SetConfig+0x1a2>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <UART_SetConfig+0x182>
 8006548:	2b10      	cmp	r3, #16
 800654a:	d008      	beq.n	800655e <UART_SetConfig+0x192>
 800654c:	e00f      	b.n	800656e <UART_SetConfig+0x1a2>
 800654e:	2300      	movs	r3, #0
 8006550:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006554:	e0ad      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006556:	2302      	movs	r3, #2
 8006558:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800655c:	e0a9      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800655e:	2304      	movs	r3, #4
 8006560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006564:	e0a5      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006566:	2308      	movs	r3, #8
 8006568:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656c:	e0a1      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800656e:	2310      	movs	r3, #16
 8006570:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006574:	e09d      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a4a      	ldr	r2, [pc, #296]	@ (80066a4 <UART_SetConfig+0x2d8>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d125      	bne.n	80065cc <UART_SetConfig+0x200>
 8006580:	4b45      	ldr	r3, [pc, #276]	@ (8006698 <UART_SetConfig+0x2cc>)
 8006582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006586:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800658a:	2bc0      	cmp	r3, #192	@ 0xc0
 800658c:	d016      	beq.n	80065bc <UART_SetConfig+0x1f0>
 800658e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006590:	d818      	bhi.n	80065c4 <UART_SetConfig+0x1f8>
 8006592:	2b80      	cmp	r3, #128	@ 0x80
 8006594:	d00a      	beq.n	80065ac <UART_SetConfig+0x1e0>
 8006596:	2b80      	cmp	r3, #128	@ 0x80
 8006598:	d814      	bhi.n	80065c4 <UART_SetConfig+0x1f8>
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <UART_SetConfig+0x1d8>
 800659e:	2b40      	cmp	r3, #64	@ 0x40
 80065a0:	d008      	beq.n	80065b4 <UART_SetConfig+0x1e8>
 80065a2:	e00f      	b.n	80065c4 <UART_SetConfig+0x1f8>
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065aa:	e082      	b.n	80066b2 <UART_SetConfig+0x2e6>
 80065ac:	2302      	movs	r3, #2
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b2:	e07e      	b.n	80066b2 <UART_SetConfig+0x2e6>
 80065b4:	2304      	movs	r3, #4
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ba:	e07a      	b.n	80066b2 <UART_SetConfig+0x2e6>
 80065bc:	2308      	movs	r3, #8
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c2:	e076      	b.n	80066b2 <UART_SetConfig+0x2e6>
 80065c4:	2310      	movs	r3, #16
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ca:	e072      	b.n	80066b2 <UART_SetConfig+0x2e6>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a35      	ldr	r2, [pc, #212]	@ (80066a8 <UART_SetConfig+0x2dc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d12a      	bne.n	800662c <UART_SetConfig+0x260>
 80065d6:	4b30      	ldr	r3, [pc, #192]	@ (8006698 <UART_SetConfig+0x2cc>)
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065e4:	d01a      	beq.n	800661c <UART_SetConfig+0x250>
 80065e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ea:	d81b      	bhi.n	8006624 <UART_SetConfig+0x258>
 80065ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065f0:	d00c      	beq.n	800660c <UART_SetConfig+0x240>
 80065f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065f6:	d815      	bhi.n	8006624 <UART_SetConfig+0x258>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <UART_SetConfig+0x238>
 80065fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006600:	d008      	beq.n	8006614 <UART_SetConfig+0x248>
 8006602:	e00f      	b.n	8006624 <UART_SetConfig+0x258>
 8006604:	2300      	movs	r3, #0
 8006606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660a:	e052      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800660c:	2302      	movs	r3, #2
 800660e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006612:	e04e      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006614:	2304      	movs	r3, #4
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800661a:	e04a      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800661c:	2308      	movs	r3, #8
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006622:	e046      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006624:	2310      	movs	r3, #16
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662a:	e042      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a17      	ldr	r2, [pc, #92]	@ (8006690 <UART_SetConfig+0x2c4>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d13a      	bne.n	80066ac <UART_SetConfig+0x2e0>
 8006636:	4b18      	ldr	r3, [pc, #96]	@ (8006698 <UART_SetConfig+0x2cc>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006640:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006644:	d01a      	beq.n	800667c <UART_SetConfig+0x2b0>
 8006646:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800664a:	d81b      	bhi.n	8006684 <UART_SetConfig+0x2b8>
 800664c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006650:	d00c      	beq.n	800666c <UART_SetConfig+0x2a0>
 8006652:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006656:	d815      	bhi.n	8006684 <UART_SetConfig+0x2b8>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <UART_SetConfig+0x298>
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006660:	d008      	beq.n	8006674 <UART_SetConfig+0x2a8>
 8006662:	e00f      	b.n	8006684 <UART_SetConfig+0x2b8>
 8006664:	2300      	movs	r3, #0
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e022      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800666c:	2302      	movs	r3, #2
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006672:	e01e      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006674:	2304      	movs	r3, #4
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800667a:	e01a      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800667c:	2308      	movs	r3, #8
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006682:	e016      	b.n	80066b2 <UART_SetConfig+0x2e6>
 8006684:	2310      	movs	r3, #16
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668a:	e012      	b.n	80066b2 <UART_SetConfig+0x2e6>
 800668c:	efff69f3 	.word	0xefff69f3
 8006690:	40008000 	.word	0x40008000
 8006694:	40013800 	.word	0x40013800
 8006698:	40021000 	.word	0x40021000
 800669c:	40004400 	.word	0x40004400
 80066a0:	40004800 	.word	0x40004800
 80066a4:	40004c00 	.word	0x40004c00
 80066a8:	40005000 	.word	0x40005000
 80066ac:	2310      	movs	r3, #16
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a9f      	ldr	r2, [pc, #636]	@ (8006934 <UART_SetConfig+0x568>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d17a      	bne.n	80067b2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d824      	bhi.n	800670e <UART_SetConfig+0x342>
 80066c4:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <UART_SetConfig+0x300>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066f1 	.word	0x080066f1
 80066d0:	0800670f 	.word	0x0800670f
 80066d4:	080066f9 	.word	0x080066f9
 80066d8:	0800670f 	.word	0x0800670f
 80066dc:	080066ff 	.word	0x080066ff
 80066e0:	0800670f 	.word	0x0800670f
 80066e4:	0800670f 	.word	0x0800670f
 80066e8:	0800670f 	.word	0x0800670f
 80066ec:	08006707 	.word	0x08006707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f0:	f7fd fd18 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80066f4:	61f8      	str	r0, [r7, #28]
        break;
 80066f6:	e010      	b.n	800671a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f8:	4b8f      	ldr	r3, [pc, #572]	@ (8006938 <UART_SetConfig+0x56c>)
 80066fa:	61fb      	str	r3, [r7, #28]
        break;
 80066fc:	e00d      	b.n	800671a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066fe:	f7fd fc79 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8006702:	61f8      	str	r0, [r7, #28]
        break;
 8006704:	e009      	b.n	800671a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006706:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800670a:	61fb      	str	r3, [r7, #28]
        break;
 800670c:	e005      	b.n	800671a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80fb 	beq.w	8006918 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	4413      	add	r3, r2
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	429a      	cmp	r2, r3
 8006730:	d305      	bcc.n	800673e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	429a      	cmp	r2, r3
 800673c:	d903      	bls.n	8006746 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006744:	e0e8      	b.n	8006918 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	2200      	movs	r2, #0
 800674a:	461c      	mov	r4, r3
 800674c:	4615      	mov	r5, r2
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	f04f 0300 	mov.w	r3, #0
 8006756:	022b      	lsls	r3, r5, #8
 8006758:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800675c:	0222      	lsls	r2, r4, #8
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	6849      	ldr	r1, [r1, #4]
 8006762:	0849      	lsrs	r1, r1, #1
 8006764:	2000      	movs	r0, #0
 8006766:	4688      	mov	r8, r1
 8006768:	4681      	mov	r9, r0
 800676a:	eb12 0a08 	adds.w	sl, r2, r8
 800676e:	eb43 0b09 	adc.w	fp, r3, r9
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	603b      	str	r3, [r7, #0]
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006780:	4650      	mov	r0, sl
 8006782:	4659      	mov	r1, fp
 8006784:	f7f9 fd74 	bl	8000270 <__aeabi_uldivmod>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4613      	mov	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006796:	d308      	bcc.n	80067aa <UART_SetConfig+0x3de>
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800679e:	d204      	bcs.n	80067aa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	60da      	str	r2, [r3, #12]
 80067a8:	e0b6      	b.n	8006918 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067b0:	e0b2      	b.n	8006918 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ba:	d15e      	bne.n	800687a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d828      	bhi.n	8006816 <UART_SetConfig+0x44a>
 80067c4:	a201      	add	r2, pc, #4	@ (adr r2, 80067cc <UART_SetConfig+0x400>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	08006801 	.word	0x08006801
 80067d8:	08006817 	.word	0x08006817
 80067dc:	08006807 	.word	0x08006807
 80067e0:	08006817 	.word	0x08006817
 80067e4:	08006817 	.word	0x08006817
 80067e8:	08006817 	.word	0x08006817
 80067ec:	0800680f 	.word	0x0800680f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fd fc98 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80067f4:	61f8      	str	r0, [r7, #28]
        break;
 80067f6:	e014      	b.n	8006822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fd fcaa 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 80067fc:	61f8      	str	r0, [r7, #28]
        break;
 80067fe:	e010      	b.n	8006822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006800:	4b4d      	ldr	r3, [pc, #308]	@ (8006938 <UART_SetConfig+0x56c>)
 8006802:	61fb      	str	r3, [r7, #28]
        break;
 8006804:	e00d      	b.n	8006822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fd fbf5 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 800680a:	61f8      	str	r0, [r7, #28]
        break;
 800680c:	e009      	b.n	8006822 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006812:	61fb      	str	r3, [r7, #28]
        break;
 8006814:	e005      	b.n	8006822 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d077      	beq.n	8006918 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	005a      	lsls	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	441a      	add	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d916      	bls.n	8006872 <UART_SetConfig+0x4a6>
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800684a:	d212      	bcs.n	8006872 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f023 030f 	bic.w	r3, r3, #15
 8006854:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	085b      	lsrs	r3, r3, #1
 800685a:	b29b      	uxth	r3, r3
 800685c:	f003 0307 	and.w	r3, r3, #7
 8006860:	b29a      	uxth	r2, r3
 8006862:	8afb      	ldrh	r3, [r7, #22]
 8006864:	4313      	orrs	r3, r2
 8006866:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	8afa      	ldrh	r2, [r7, #22]
 800686e:	60da      	str	r2, [r3, #12]
 8006870:	e052      	b.n	8006918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006878:	e04e      	b.n	8006918 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800687a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800687e:	2b08      	cmp	r3, #8
 8006880:	d827      	bhi.n	80068d2 <UART_SetConfig+0x506>
 8006882:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <UART_SetConfig+0x4bc>)
 8006884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006888:	080068ad 	.word	0x080068ad
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068bd 	.word	0x080068bd
 8006894:	080068d3 	.word	0x080068d3
 8006898:	080068c3 	.word	0x080068c3
 800689c:	080068d3 	.word	0x080068d3
 80068a0:	080068d3 	.word	0x080068d3
 80068a4:	080068d3 	.word	0x080068d3
 80068a8:	080068cb 	.word	0x080068cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068ac:	f7fd fc3a 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 80068b0:	61f8      	str	r0, [r7, #28]
        break;
 80068b2:	e014      	b.n	80068de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068b4:	f7fd fc4c 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 80068b8:	61f8      	str	r0, [r7, #28]
        break;
 80068ba:	e010      	b.n	80068de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006938 <UART_SetConfig+0x56c>)
 80068be:	61fb      	str	r3, [r7, #28]
        break;
 80068c0:	e00d      	b.n	80068de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068c2:	f7fd fb97 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 80068c6:	61f8      	str	r0, [r7, #28]
        break;
 80068c8:	e009      	b.n	80068de <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ce:	61fb      	str	r3, [r7, #28]
        break;
 80068d0:	e005      	b.n	80068de <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068dc:	bf00      	nop
    }

    if (pclk != 0U)
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d019      	beq.n	8006918 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	085a      	lsrs	r2, r3, #1
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	441a      	add	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b0f      	cmp	r3, #15
 80068fc:	d909      	bls.n	8006912 <UART_SetConfig+0x546>
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006904:	d205      	bcs.n	8006912 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	b29a      	uxth	r2, r3
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60da      	str	r2, [r3, #12]
 8006910:	e002      	b.n	8006918 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006924:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006928:	4618      	mov	r0, r3
 800692a:	3728      	adds	r7, #40	@ 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006932:	bf00      	nop
 8006934:	40008000 	.word	0x40008000
 8006938:	00f42400 	.word	0x00f42400

0800693c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	f003 0308 	and.w	r3, r3, #8
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00a      	beq.n	8006966 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	f003 0310 	and.w	r3, r3, #16
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01a      	beq.n	8006a52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	430a      	orrs	r2, r1
 8006a30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a3a:	d10a      	bne.n	8006a52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	605a      	str	r2, [r3, #4]
  }
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b098      	sub	sp, #96	@ 0x60
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a90:	f7fa ff1a 	bl	80018c8 <HAL_GetTick>
 8006a94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b08      	cmp	r3, #8
 8006aa2:	d12e      	bne.n	8006b02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006aac:	2200      	movs	r2, #0
 8006aae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f88c 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d021      	beq.n	8006b02 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ade:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae4:	e841 2300 	strex	r3, r2, [r1]
 8006ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1e6      	bne.n	8006abe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e062      	b.n	8006bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d149      	bne.n	8006ba4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f856 	bl	8006bd0 <UART_WaitOnFlagUntilTimeout>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d03c      	beq.n	8006ba4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b32:	e853 3f00 	ldrex	r3, [r3]
 8006b36:	623b      	str	r3, [r7, #32]
   return(result);
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	461a      	mov	r2, r3
 8006b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e6      	bne.n	8006b2a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3308      	adds	r3, #8
 8006b62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0301 	bic.w	r3, r3, #1
 8006b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b7c:	61fa      	str	r2, [r7, #28]
 8006b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	69b9      	ldr	r1, [r7, #24]
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	617b      	str	r3, [r7, #20]
   return(result);
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e5      	bne.n	8006b5c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e011      	b.n	8006bc8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3758      	adds	r7, #88	@ 0x58
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006be0:	e04f      	b.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d04b      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bea:	f7fa fe6d 	bl	80018c8 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d302      	bcc.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e04e      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d037      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b80      	cmp	r3, #128	@ 0x80
 8006c16:	d034      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2b40      	cmp	r3, #64	@ 0x40
 8006c1c:	d031      	beq.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f003 0308 	and.w	r3, r3, #8
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d110      	bne.n	8006c4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2208      	movs	r2, #8
 8006c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f838 	bl	8006caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e029      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c5c:	d111      	bne.n	8006c82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f000 f81e 	bl	8006caa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e00f      	b.n	8006ca2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	bf0c      	ite	eq
 8006c92:	2301      	moveq	r3, #1
 8006c94:	2300      	movne	r3, #0
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d0a0      	beq.n	8006be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b095      	sub	sp, #84	@ 0x54
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cd2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e6      	bne.n	8006cb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3308      	adds	r3, #8
 8006cea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	e853 3f00 	ldrex	r3, [r3]
 8006cf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3308      	adds	r3, #8
 8006d02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d0c:	e841 2300 	strex	r3, r2, [r1]
 8006d10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1e5      	bne.n	8006ce4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d118      	bne.n	8006d52 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f023 0310 	bic.w	r3, r3, #16
 8006d34:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d42:	6979      	ldr	r1, [r7, #20]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	e841 2300 	strex	r3, r2, [r1]
 8006d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d1e6      	bne.n	8006d20 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d66:	bf00      	nop
 8006d68:	3754      	adds	r7, #84	@ 0x54
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
	...

08006d74 <std>:
 8006d74:	2300      	movs	r3, #0
 8006d76:	b510      	push	{r4, lr}
 8006d78:	4604      	mov	r4, r0
 8006d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8006d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d82:	6083      	str	r3, [r0, #8]
 8006d84:	8181      	strh	r1, [r0, #12]
 8006d86:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d88:	81c2      	strh	r2, [r0, #14]
 8006d8a:	6183      	str	r3, [r0, #24]
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	2208      	movs	r2, #8
 8006d90:	305c      	adds	r0, #92	@ 0x5c
 8006d92:	f000 f90e 	bl	8006fb2 <memset>
 8006d96:	4b0d      	ldr	r3, [pc, #52]	@ (8006dcc <std+0x58>)
 8006d98:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd0 <std+0x5c>)
 8006d9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd4 <std+0x60>)
 8006da0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006da2:	4b0d      	ldr	r3, [pc, #52]	@ (8006dd8 <std+0x64>)
 8006da4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006da6:	4b0d      	ldr	r3, [pc, #52]	@ (8006ddc <std+0x68>)
 8006da8:	6224      	str	r4, [r4, #32]
 8006daa:	429c      	cmp	r4, r3
 8006dac:	d006      	beq.n	8006dbc <std+0x48>
 8006dae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006db2:	4294      	cmp	r4, r2
 8006db4:	d002      	beq.n	8006dbc <std+0x48>
 8006db6:	33d0      	adds	r3, #208	@ 0xd0
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d105      	bne.n	8006dc8 <std+0x54>
 8006dbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dc4:	f000 b96e 	b.w	80070a4 <__retarget_lock_init_recursive>
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	bf00      	nop
 8006dcc:	08006f2d 	.word	0x08006f2d
 8006dd0:	08006f4f 	.word	0x08006f4f
 8006dd4:	08006f87 	.word	0x08006f87
 8006dd8:	08006fab 	.word	0x08006fab
 8006ddc:	20000424 	.word	0x20000424

08006de0 <stdio_exit_handler>:
 8006de0:	4a02      	ldr	r2, [pc, #8]	@ (8006dec <stdio_exit_handler+0xc>)
 8006de2:	4903      	ldr	r1, [pc, #12]	@ (8006df0 <stdio_exit_handler+0x10>)
 8006de4:	4803      	ldr	r0, [pc, #12]	@ (8006df4 <stdio_exit_handler+0x14>)
 8006de6:	f000 b869 	b.w	8006ebc <_fwalk_sglue>
 8006dea:	bf00      	nop
 8006dec:	20000048 	.word	0x20000048
 8006df0:	08007945 	.word	0x08007945
 8006df4:	20000058 	.word	0x20000058

08006df8 <cleanup_stdio>:
 8006df8:	6841      	ldr	r1, [r0, #4]
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8006e2c <cleanup_stdio+0x34>)
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
 8006e02:	d001      	beq.n	8006e08 <cleanup_stdio+0x10>
 8006e04:	f000 fd9e 	bl	8007944 <_fflush_r>
 8006e08:	68a1      	ldr	r1, [r4, #8]
 8006e0a:	4b09      	ldr	r3, [pc, #36]	@ (8006e30 <cleanup_stdio+0x38>)
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d002      	beq.n	8006e16 <cleanup_stdio+0x1e>
 8006e10:	4620      	mov	r0, r4
 8006e12:	f000 fd97 	bl	8007944 <_fflush_r>
 8006e16:	68e1      	ldr	r1, [r4, #12]
 8006e18:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <cleanup_stdio+0x3c>)
 8006e1a:	4299      	cmp	r1, r3
 8006e1c:	d004      	beq.n	8006e28 <cleanup_stdio+0x30>
 8006e1e:	4620      	mov	r0, r4
 8006e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e24:	f000 bd8e 	b.w	8007944 <_fflush_r>
 8006e28:	bd10      	pop	{r4, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000424 	.word	0x20000424
 8006e30:	2000048c 	.word	0x2000048c
 8006e34:	200004f4 	.word	0x200004f4

08006e38 <global_stdio_init.part.0>:
 8006e38:	b510      	push	{r4, lr}
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e68 <global_stdio_init.part.0+0x30>)
 8006e3c:	4c0b      	ldr	r4, [pc, #44]	@ (8006e6c <global_stdio_init.part.0+0x34>)
 8006e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e70 <global_stdio_init.part.0+0x38>)
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	4620      	mov	r0, r4
 8006e44:	2200      	movs	r2, #0
 8006e46:	2104      	movs	r1, #4
 8006e48:	f7ff ff94 	bl	8006d74 <std>
 8006e4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e50:	2201      	movs	r2, #1
 8006e52:	2109      	movs	r1, #9
 8006e54:	f7ff ff8e 	bl	8006d74 <std>
 8006e58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e62:	2112      	movs	r1, #18
 8006e64:	f7ff bf86 	b.w	8006d74 <std>
 8006e68:	2000055c 	.word	0x2000055c
 8006e6c:	20000424 	.word	0x20000424
 8006e70:	08006de1 	.word	0x08006de1

08006e74 <__sfp_lock_acquire>:
 8006e74:	4801      	ldr	r0, [pc, #4]	@ (8006e7c <__sfp_lock_acquire+0x8>)
 8006e76:	f000 b916 	b.w	80070a6 <__retarget_lock_acquire_recursive>
 8006e7a:	bf00      	nop
 8006e7c:	20000565 	.word	0x20000565

08006e80 <__sfp_lock_release>:
 8006e80:	4801      	ldr	r0, [pc, #4]	@ (8006e88 <__sfp_lock_release+0x8>)
 8006e82:	f000 b911 	b.w	80070a8 <__retarget_lock_release_recursive>
 8006e86:	bf00      	nop
 8006e88:	20000565 	.word	0x20000565

08006e8c <__sinit>:
 8006e8c:	b510      	push	{r4, lr}
 8006e8e:	4604      	mov	r4, r0
 8006e90:	f7ff fff0 	bl	8006e74 <__sfp_lock_acquire>
 8006e94:	6a23      	ldr	r3, [r4, #32]
 8006e96:	b11b      	cbz	r3, 8006ea0 <__sinit+0x14>
 8006e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e9c:	f7ff bff0 	b.w	8006e80 <__sfp_lock_release>
 8006ea0:	4b04      	ldr	r3, [pc, #16]	@ (8006eb4 <__sinit+0x28>)
 8006ea2:	6223      	str	r3, [r4, #32]
 8006ea4:	4b04      	ldr	r3, [pc, #16]	@ (8006eb8 <__sinit+0x2c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1f5      	bne.n	8006e98 <__sinit+0xc>
 8006eac:	f7ff ffc4 	bl	8006e38 <global_stdio_init.part.0>
 8006eb0:	e7f2      	b.n	8006e98 <__sinit+0xc>
 8006eb2:	bf00      	nop
 8006eb4:	08006df9 	.word	0x08006df9
 8006eb8:	2000055c 	.word	0x2000055c

08006ebc <_fwalk_sglue>:
 8006ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	4688      	mov	r8, r1
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8006ed0:	d505      	bpl.n	8006ede <_fwalk_sglue+0x22>
 8006ed2:	6824      	ldr	r4, [r4, #0]
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d1f7      	bne.n	8006ec8 <_fwalk_sglue+0xc>
 8006ed8:	4630      	mov	r0, r6
 8006eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d907      	bls.n	8006ef4 <_fwalk_sglue+0x38>
 8006ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	d003      	beq.n	8006ef4 <_fwalk_sglue+0x38>
 8006eec:	4629      	mov	r1, r5
 8006eee:	4638      	mov	r0, r7
 8006ef0:	47c0      	blx	r8
 8006ef2:	4306      	orrs	r6, r0
 8006ef4:	3568      	adds	r5, #104	@ 0x68
 8006ef6:	e7e9      	b.n	8006ecc <_fwalk_sglue+0x10>

08006ef8 <iprintf>:
 8006ef8:	b40f      	push	{r0, r1, r2, r3}
 8006efa:	b507      	push	{r0, r1, r2, lr}
 8006efc:	4906      	ldr	r1, [pc, #24]	@ (8006f18 <iprintf+0x20>)
 8006efe:	ab04      	add	r3, sp, #16
 8006f00:	6808      	ldr	r0, [r1, #0]
 8006f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f06:	6881      	ldr	r1, [r0, #8]
 8006f08:	9301      	str	r3, [sp, #4]
 8006f0a:	f000 f9f1 	bl	80072f0 <_vfiprintf_r>
 8006f0e:	b003      	add	sp, #12
 8006f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f14:	b004      	add	sp, #16
 8006f16:	4770      	bx	lr
 8006f18:	20000054 	.word	0x20000054

08006f1c <putchar>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	@ (8006f28 <putchar+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	6882      	ldr	r2, [r0, #8]
 8006f24:	f000 bd36 	b.w	8007994 <_putc_r>
 8006f28:	20000054 	.word	0x20000054

08006f2c <__sread>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	460c      	mov	r4, r1
 8006f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f34:	f000 f868 	bl	8007008 <_read_r>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	bfab      	itete	ge
 8006f3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006f40:	181b      	addge	r3, r3, r0
 8006f42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f46:	bfac      	ite	ge
 8006f48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f4a:	81a3      	strhlt	r3, [r4, #12]
 8006f4c:	bd10      	pop	{r4, pc}

08006f4e <__swrite>:
 8006f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f52:	461f      	mov	r7, r3
 8006f54:	898b      	ldrh	r3, [r1, #12]
 8006f56:	05db      	lsls	r3, r3, #23
 8006f58:	4605      	mov	r5, r0
 8006f5a:	460c      	mov	r4, r1
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	d505      	bpl.n	8006f6c <__swrite+0x1e>
 8006f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f64:	2302      	movs	r3, #2
 8006f66:	2200      	movs	r2, #0
 8006f68:	f000 f83c 	bl	8006fe4 <_lseek_r>
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f76:	81a3      	strh	r3, [r4, #12]
 8006f78:	4632      	mov	r2, r6
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f82:	f000 b853 	b.w	800702c <_write_r>

08006f86 <__sseek>:
 8006f86:	b510      	push	{r4, lr}
 8006f88:	460c      	mov	r4, r1
 8006f8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8e:	f000 f829 	bl	8006fe4 <_lseek_r>
 8006f92:	1c43      	adds	r3, r0, #1
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	bf15      	itete	ne
 8006f98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006fa2:	81a3      	strheq	r3, [r4, #12]
 8006fa4:	bf18      	it	ne
 8006fa6:	81a3      	strhne	r3, [r4, #12]
 8006fa8:	bd10      	pop	{r4, pc}

08006faa <__sclose>:
 8006faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fae:	f000 b809 	b.w	8006fc4 <_close_r>

08006fb2 <memset>:
 8006fb2:	4402      	add	r2, r0
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d100      	bne.n	8006fbc <memset+0xa>
 8006fba:	4770      	bx	lr
 8006fbc:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc0:	e7f9      	b.n	8006fb6 <memset+0x4>
	...

08006fc4 <_close_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	4d06      	ldr	r5, [pc, #24]	@ (8006fe0 <_close_r+0x1c>)
 8006fc8:	2300      	movs	r3, #0
 8006fca:	4604      	mov	r4, r0
 8006fcc:	4608      	mov	r0, r1
 8006fce:	602b      	str	r3, [r5, #0]
 8006fd0:	f7f9 ffb5 	bl	8000f3e <_close>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_close_r+0x1a>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_close_r+0x1a>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	20000560 	.word	0x20000560

08006fe4 <_lseek_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4d07      	ldr	r5, [pc, #28]	@ (8007004 <_lseek_r+0x20>)
 8006fe8:	4604      	mov	r4, r0
 8006fea:	4608      	mov	r0, r1
 8006fec:	4611      	mov	r1, r2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	602a      	str	r2, [r5, #0]
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f7f9 ffca 	bl	8000f8c <_lseek>
 8006ff8:	1c43      	adds	r3, r0, #1
 8006ffa:	d102      	bne.n	8007002 <_lseek_r+0x1e>
 8006ffc:	682b      	ldr	r3, [r5, #0]
 8006ffe:	b103      	cbz	r3, 8007002 <_lseek_r+0x1e>
 8007000:	6023      	str	r3, [r4, #0]
 8007002:	bd38      	pop	{r3, r4, r5, pc}
 8007004:	20000560 	.word	0x20000560

08007008 <_read_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4d07      	ldr	r5, [pc, #28]	@ (8007028 <_read_r+0x20>)
 800700c:	4604      	mov	r4, r0
 800700e:	4608      	mov	r0, r1
 8007010:	4611      	mov	r1, r2
 8007012:	2200      	movs	r2, #0
 8007014:	602a      	str	r2, [r5, #0]
 8007016:	461a      	mov	r2, r3
 8007018:	f7f9 ff58 	bl	8000ecc <_read>
 800701c:	1c43      	adds	r3, r0, #1
 800701e:	d102      	bne.n	8007026 <_read_r+0x1e>
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	b103      	cbz	r3, 8007026 <_read_r+0x1e>
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	bd38      	pop	{r3, r4, r5, pc}
 8007028:	20000560 	.word	0x20000560

0800702c <_write_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4d07      	ldr	r5, [pc, #28]	@ (800704c <_write_r+0x20>)
 8007030:	4604      	mov	r4, r0
 8007032:	4608      	mov	r0, r1
 8007034:	4611      	mov	r1, r2
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	461a      	mov	r2, r3
 800703c:	f7f9 ff63 	bl	8000f06 <_write>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_write_r+0x1e>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_write_r+0x1e>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000560 	.word	0x20000560

08007050 <__errno>:
 8007050:	4b01      	ldr	r3, [pc, #4]	@ (8007058 <__errno+0x8>)
 8007052:	6818      	ldr	r0, [r3, #0]
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	20000054 	.word	0x20000054

0800705c <__libc_init_array>:
 800705c:	b570      	push	{r4, r5, r6, lr}
 800705e:	4d0d      	ldr	r5, [pc, #52]	@ (8007094 <__libc_init_array+0x38>)
 8007060:	4c0d      	ldr	r4, [pc, #52]	@ (8007098 <__libc_init_array+0x3c>)
 8007062:	1b64      	subs	r4, r4, r5
 8007064:	10a4      	asrs	r4, r4, #2
 8007066:	2600      	movs	r6, #0
 8007068:	42a6      	cmp	r6, r4
 800706a:	d109      	bne.n	8007080 <__libc_init_array+0x24>
 800706c:	4d0b      	ldr	r5, [pc, #44]	@ (800709c <__libc_init_array+0x40>)
 800706e:	4c0c      	ldr	r4, [pc, #48]	@ (80070a0 <__libc_init_array+0x44>)
 8007070:	f000 fdec 	bl	8007c4c <_init>
 8007074:	1b64      	subs	r4, r4, r5
 8007076:	10a4      	asrs	r4, r4, #2
 8007078:	2600      	movs	r6, #0
 800707a:	42a6      	cmp	r6, r4
 800707c:	d105      	bne.n	800708a <__libc_init_array+0x2e>
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	f855 3b04 	ldr.w	r3, [r5], #4
 8007084:	4798      	blx	r3
 8007086:	3601      	adds	r6, #1
 8007088:	e7ee      	b.n	8007068 <__libc_init_array+0xc>
 800708a:	f855 3b04 	ldr.w	r3, [r5], #4
 800708e:	4798      	blx	r3
 8007090:	3601      	adds	r6, #1
 8007092:	e7f2      	b.n	800707a <__libc_init_array+0x1e>
 8007094:	08007d3c 	.word	0x08007d3c
 8007098:	08007d3c 	.word	0x08007d3c
 800709c:	08007d3c 	.word	0x08007d3c
 80070a0:	08007d40 	.word	0x08007d40

080070a4 <__retarget_lock_init_recursive>:
 80070a4:	4770      	bx	lr

080070a6 <__retarget_lock_acquire_recursive>:
 80070a6:	4770      	bx	lr

080070a8 <__retarget_lock_release_recursive>:
 80070a8:	4770      	bx	lr
	...

080070ac <_free_r>:
 80070ac:	b538      	push	{r3, r4, r5, lr}
 80070ae:	4605      	mov	r5, r0
 80070b0:	2900      	cmp	r1, #0
 80070b2:	d041      	beq.n	8007138 <_free_r+0x8c>
 80070b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070b8:	1f0c      	subs	r4, r1, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	bfb8      	it	lt
 80070be:	18e4      	addlt	r4, r4, r3
 80070c0:	f000 f8e0 	bl	8007284 <__malloc_lock>
 80070c4:	4a1d      	ldr	r2, [pc, #116]	@ (800713c <_free_r+0x90>)
 80070c6:	6813      	ldr	r3, [r2, #0]
 80070c8:	b933      	cbnz	r3, 80070d8 <_free_r+0x2c>
 80070ca:	6063      	str	r3, [r4, #4]
 80070cc:	6014      	str	r4, [r2, #0]
 80070ce:	4628      	mov	r0, r5
 80070d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d4:	f000 b8dc 	b.w	8007290 <__malloc_unlock>
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d908      	bls.n	80070ee <_free_r+0x42>
 80070dc:	6820      	ldr	r0, [r4, #0]
 80070de:	1821      	adds	r1, r4, r0
 80070e0:	428b      	cmp	r3, r1
 80070e2:	bf01      	itttt	eq
 80070e4:	6819      	ldreq	r1, [r3, #0]
 80070e6:	685b      	ldreq	r3, [r3, #4]
 80070e8:	1809      	addeq	r1, r1, r0
 80070ea:	6021      	streq	r1, [r4, #0]
 80070ec:	e7ed      	b.n	80070ca <_free_r+0x1e>
 80070ee:	461a      	mov	r2, r3
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	b10b      	cbz	r3, 80070f8 <_free_r+0x4c>
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	d9fa      	bls.n	80070ee <_free_r+0x42>
 80070f8:	6811      	ldr	r1, [r2, #0]
 80070fa:	1850      	adds	r0, r2, r1
 80070fc:	42a0      	cmp	r0, r4
 80070fe:	d10b      	bne.n	8007118 <_free_r+0x6c>
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	4401      	add	r1, r0
 8007104:	1850      	adds	r0, r2, r1
 8007106:	4283      	cmp	r3, r0
 8007108:	6011      	str	r1, [r2, #0]
 800710a:	d1e0      	bne.n	80070ce <_free_r+0x22>
 800710c:	6818      	ldr	r0, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	6053      	str	r3, [r2, #4]
 8007112:	4408      	add	r0, r1
 8007114:	6010      	str	r0, [r2, #0]
 8007116:	e7da      	b.n	80070ce <_free_r+0x22>
 8007118:	d902      	bls.n	8007120 <_free_r+0x74>
 800711a:	230c      	movs	r3, #12
 800711c:	602b      	str	r3, [r5, #0]
 800711e:	e7d6      	b.n	80070ce <_free_r+0x22>
 8007120:	6820      	ldr	r0, [r4, #0]
 8007122:	1821      	adds	r1, r4, r0
 8007124:	428b      	cmp	r3, r1
 8007126:	bf04      	itt	eq
 8007128:	6819      	ldreq	r1, [r3, #0]
 800712a:	685b      	ldreq	r3, [r3, #4]
 800712c:	6063      	str	r3, [r4, #4]
 800712e:	bf04      	itt	eq
 8007130:	1809      	addeq	r1, r1, r0
 8007132:	6021      	streq	r1, [r4, #0]
 8007134:	6054      	str	r4, [r2, #4]
 8007136:	e7ca      	b.n	80070ce <_free_r+0x22>
 8007138:	bd38      	pop	{r3, r4, r5, pc}
 800713a:	bf00      	nop
 800713c:	2000056c 	.word	0x2000056c

08007140 <sbrk_aligned>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	4e0f      	ldr	r6, [pc, #60]	@ (8007180 <sbrk_aligned+0x40>)
 8007144:	460c      	mov	r4, r1
 8007146:	6831      	ldr	r1, [r6, #0]
 8007148:	4605      	mov	r5, r0
 800714a:	b911      	cbnz	r1, 8007152 <sbrk_aligned+0x12>
 800714c:	f000 fcea 	bl	8007b24 <_sbrk_r>
 8007150:	6030      	str	r0, [r6, #0]
 8007152:	4621      	mov	r1, r4
 8007154:	4628      	mov	r0, r5
 8007156:	f000 fce5 	bl	8007b24 <_sbrk_r>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d103      	bne.n	8007166 <sbrk_aligned+0x26>
 800715e:	f04f 34ff 	mov.w	r4, #4294967295
 8007162:	4620      	mov	r0, r4
 8007164:	bd70      	pop	{r4, r5, r6, pc}
 8007166:	1cc4      	adds	r4, r0, #3
 8007168:	f024 0403 	bic.w	r4, r4, #3
 800716c:	42a0      	cmp	r0, r4
 800716e:	d0f8      	beq.n	8007162 <sbrk_aligned+0x22>
 8007170:	1a21      	subs	r1, r4, r0
 8007172:	4628      	mov	r0, r5
 8007174:	f000 fcd6 	bl	8007b24 <_sbrk_r>
 8007178:	3001      	adds	r0, #1
 800717a:	d1f2      	bne.n	8007162 <sbrk_aligned+0x22>
 800717c:	e7ef      	b.n	800715e <sbrk_aligned+0x1e>
 800717e:	bf00      	nop
 8007180:	20000568 	.word	0x20000568

08007184 <_malloc_r>:
 8007184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007188:	1ccd      	adds	r5, r1, #3
 800718a:	f025 0503 	bic.w	r5, r5, #3
 800718e:	3508      	adds	r5, #8
 8007190:	2d0c      	cmp	r5, #12
 8007192:	bf38      	it	cc
 8007194:	250c      	movcc	r5, #12
 8007196:	2d00      	cmp	r5, #0
 8007198:	4606      	mov	r6, r0
 800719a:	db01      	blt.n	80071a0 <_malloc_r+0x1c>
 800719c:	42a9      	cmp	r1, r5
 800719e:	d904      	bls.n	80071aa <_malloc_r+0x26>
 80071a0:	230c      	movs	r3, #12
 80071a2:	6033      	str	r3, [r6, #0]
 80071a4:	2000      	movs	r0, #0
 80071a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007280 <_malloc_r+0xfc>
 80071ae:	f000 f869 	bl	8007284 <__malloc_lock>
 80071b2:	f8d8 3000 	ldr.w	r3, [r8]
 80071b6:	461c      	mov	r4, r3
 80071b8:	bb44      	cbnz	r4, 800720c <_malloc_r+0x88>
 80071ba:	4629      	mov	r1, r5
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ffbf 	bl	8007140 <sbrk_aligned>
 80071c2:	1c43      	adds	r3, r0, #1
 80071c4:	4604      	mov	r4, r0
 80071c6:	d158      	bne.n	800727a <_malloc_r+0xf6>
 80071c8:	f8d8 4000 	ldr.w	r4, [r8]
 80071cc:	4627      	mov	r7, r4
 80071ce:	2f00      	cmp	r7, #0
 80071d0:	d143      	bne.n	800725a <_malloc_r+0xd6>
 80071d2:	2c00      	cmp	r4, #0
 80071d4:	d04b      	beq.n	800726e <_malloc_r+0xea>
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	4639      	mov	r1, r7
 80071da:	4630      	mov	r0, r6
 80071dc:	eb04 0903 	add.w	r9, r4, r3
 80071e0:	f000 fca0 	bl	8007b24 <_sbrk_r>
 80071e4:	4581      	cmp	r9, r0
 80071e6:	d142      	bne.n	800726e <_malloc_r+0xea>
 80071e8:	6821      	ldr	r1, [r4, #0]
 80071ea:	1a6d      	subs	r5, r5, r1
 80071ec:	4629      	mov	r1, r5
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7ff ffa6 	bl	8007140 <sbrk_aligned>
 80071f4:	3001      	adds	r0, #1
 80071f6:	d03a      	beq.n	800726e <_malloc_r+0xea>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	442b      	add	r3, r5
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	bb62      	cbnz	r2, 8007260 <_malloc_r+0xdc>
 8007206:	f8c8 7000 	str.w	r7, [r8]
 800720a:	e00f      	b.n	800722c <_malloc_r+0xa8>
 800720c:	6822      	ldr	r2, [r4, #0]
 800720e:	1b52      	subs	r2, r2, r5
 8007210:	d420      	bmi.n	8007254 <_malloc_r+0xd0>
 8007212:	2a0b      	cmp	r2, #11
 8007214:	d917      	bls.n	8007246 <_malloc_r+0xc2>
 8007216:	1961      	adds	r1, r4, r5
 8007218:	42a3      	cmp	r3, r4
 800721a:	6025      	str	r5, [r4, #0]
 800721c:	bf18      	it	ne
 800721e:	6059      	strne	r1, [r3, #4]
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	bf08      	it	eq
 8007224:	f8c8 1000 	streq.w	r1, [r8]
 8007228:	5162      	str	r2, [r4, r5]
 800722a:	604b      	str	r3, [r1, #4]
 800722c:	4630      	mov	r0, r6
 800722e:	f000 f82f 	bl	8007290 <__malloc_unlock>
 8007232:	f104 000b 	add.w	r0, r4, #11
 8007236:	1d23      	adds	r3, r4, #4
 8007238:	f020 0007 	bic.w	r0, r0, #7
 800723c:	1ac2      	subs	r2, r0, r3
 800723e:	bf1c      	itt	ne
 8007240:	1a1b      	subne	r3, r3, r0
 8007242:	50a3      	strne	r3, [r4, r2]
 8007244:	e7af      	b.n	80071a6 <_malloc_r+0x22>
 8007246:	6862      	ldr	r2, [r4, #4]
 8007248:	42a3      	cmp	r3, r4
 800724a:	bf0c      	ite	eq
 800724c:	f8c8 2000 	streq.w	r2, [r8]
 8007250:	605a      	strne	r2, [r3, #4]
 8007252:	e7eb      	b.n	800722c <_malloc_r+0xa8>
 8007254:	4623      	mov	r3, r4
 8007256:	6864      	ldr	r4, [r4, #4]
 8007258:	e7ae      	b.n	80071b8 <_malloc_r+0x34>
 800725a:	463c      	mov	r4, r7
 800725c:	687f      	ldr	r7, [r7, #4]
 800725e:	e7b6      	b.n	80071ce <_malloc_r+0x4a>
 8007260:	461a      	mov	r2, r3
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	42a3      	cmp	r3, r4
 8007266:	d1fb      	bne.n	8007260 <_malloc_r+0xdc>
 8007268:	2300      	movs	r3, #0
 800726a:	6053      	str	r3, [r2, #4]
 800726c:	e7de      	b.n	800722c <_malloc_r+0xa8>
 800726e:	230c      	movs	r3, #12
 8007270:	6033      	str	r3, [r6, #0]
 8007272:	4630      	mov	r0, r6
 8007274:	f000 f80c 	bl	8007290 <__malloc_unlock>
 8007278:	e794      	b.n	80071a4 <_malloc_r+0x20>
 800727a:	6005      	str	r5, [r0, #0]
 800727c:	e7d6      	b.n	800722c <_malloc_r+0xa8>
 800727e:	bf00      	nop
 8007280:	2000056c 	.word	0x2000056c

08007284 <__malloc_lock>:
 8007284:	4801      	ldr	r0, [pc, #4]	@ (800728c <__malloc_lock+0x8>)
 8007286:	f7ff bf0e 	b.w	80070a6 <__retarget_lock_acquire_recursive>
 800728a:	bf00      	nop
 800728c:	20000564 	.word	0x20000564

08007290 <__malloc_unlock>:
 8007290:	4801      	ldr	r0, [pc, #4]	@ (8007298 <__malloc_unlock+0x8>)
 8007292:	f7ff bf09 	b.w	80070a8 <__retarget_lock_release_recursive>
 8007296:	bf00      	nop
 8007298:	20000564 	.word	0x20000564

0800729c <__sfputc_r>:
 800729c:	6893      	ldr	r3, [r2, #8]
 800729e:	3b01      	subs	r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	b410      	push	{r4}
 80072a4:	6093      	str	r3, [r2, #8]
 80072a6:	da08      	bge.n	80072ba <__sfputc_r+0x1e>
 80072a8:	6994      	ldr	r4, [r2, #24]
 80072aa:	42a3      	cmp	r3, r4
 80072ac:	db01      	blt.n	80072b2 <__sfputc_r+0x16>
 80072ae:	290a      	cmp	r1, #10
 80072b0:	d103      	bne.n	80072ba <__sfputc_r+0x1e>
 80072b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072b6:	f000 bba1 	b.w	80079fc <__swbuf_r>
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	1c58      	adds	r0, r3, #1
 80072be:	6010      	str	r0, [r2, #0]
 80072c0:	7019      	strb	r1, [r3, #0]
 80072c2:	4608      	mov	r0, r1
 80072c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <__sfputs_r>:
 80072ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072cc:	4606      	mov	r6, r0
 80072ce:	460f      	mov	r7, r1
 80072d0:	4614      	mov	r4, r2
 80072d2:	18d5      	adds	r5, r2, r3
 80072d4:	42ac      	cmp	r4, r5
 80072d6:	d101      	bne.n	80072dc <__sfputs_r+0x12>
 80072d8:	2000      	movs	r0, #0
 80072da:	e007      	b.n	80072ec <__sfputs_r+0x22>
 80072dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e0:	463a      	mov	r2, r7
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7ff ffda 	bl	800729c <__sfputc_r>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d1f3      	bne.n	80072d4 <__sfputs_r+0xa>
 80072ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072f0 <_vfiprintf_r>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	460d      	mov	r5, r1
 80072f6:	b09d      	sub	sp, #116	@ 0x74
 80072f8:	4614      	mov	r4, r2
 80072fa:	4698      	mov	r8, r3
 80072fc:	4606      	mov	r6, r0
 80072fe:	b118      	cbz	r0, 8007308 <_vfiprintf_r+0x18>
 8007300:	6a03      	ldr	r3, [r0, #32]
 8007302:	b90b      	cbnz	r3, 8007308 <_vfiprintf_r+0x18>
 8007304:	f7ff fdc2 	bl	8006e8c <__sinit>
 8007308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800730a:	07d9      	lsls	r1, r3, #31
 800730c:	d405      	bmi.n	800731a <_vfiprintf_r+0x2a>
 800730e:	89ab      	ldrh	r3, [r5, #12]
 8007310:	059a      	lsls	r2, r3, #22
 8007312:	d402      	bmi.n	800731a <_vfiprintf_r+0x2a>
 8007314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007316:	f7ff fec6 	bl	80070a6 <__retarget_lock_acquire_recursive>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	071b      	lsls	r3, r3, #28
 800731e:	d501      	bpl.n	8007324 <_vfiprintf_r+0x34>
 8007320:	692b      	ldr	r3, [r5, #16]
 8007322:	b99b      	cbnz	r3, 800734c <_vfiprintf_r+0x5c>
 8007324:	4629      	mov	r1, r5
 8007326:	4630      	mov	r0, r6
 8007328:	f000 fba6 	bl	8007a78 <__swsetup_r>
 800732c:	b170      	cbz	r0, 800734c <_vfiprintf_r+0x5c>
 800732e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007330:	07dc      	lsls	r4, r3, #31
 8007332:	d504      	bpl.n	800733e <_vfiprintf_r+0x4e>
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
 8007338:	b01d      	add	sp, #116	@ 0x74
 800733a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733e:	89ab      	ldrh	r3, [r5, #12]
 8007340:	0598      	lsls	r0, r3, #22
 8007342:	d4f7      	bmi.n	8007334 <_vfiprintf_r+0x44>
 8007344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007346:	f7ff feaf 	bl	80070a8 <__retarget_lock_release_recursive>
 800734a:	e7f3      	b.n	8007334 <_vfiprintf_r+0x44>
 800734c:	2300      	movs	r3, #0
 800734e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007350:	2320      	movs	r3, #32
 8007352:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007356:	f8cd 800c 	str.w	r8, [sp, #12]
 800735a:	2330      	movs	r3, #48	@ 0x30
 800735c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800750c <_vfiprintf_r+0x21c>
 8007360:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007364:	f04f 0901 	mov.w	r9, #1
 8007368:	4623      	mov	r3, r4
 800736a:	469a      	mov	sl, r3
 800736c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007370:	b10a      	cbz	r2, 8007376 <_vfiprintf_r+0x86>
 8007372:	2a25      	cmp	r2, #37	@ 0x25
 8007374:	d1f9      	bne.n	800736a <_vfiprintf_r+0x7a>
 8007376:	ebba 0b04 	subs.w	fp, sl, r4
 800737a:	d00b      	beq.n	8007394 <_vfiprintf_r+0xa4>
 800737c:	465b      	mov	r3, fp
 800737e:	4622      	mov	r2, r4
 8007380:	4629      	mov	r1, r5
 8007382:	4630      	mov	r0, r6
 8007384:	f7ff ffa1 	bl	80072ca <__sfputs_r>
 8007388:	3001      	adds	r0, #1
 800738a:	f000 80a7 	beq.w	80074dc <_vfiprintf_r+0x1ec>
 800738e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007390:	445a      	add	r2, fp
 8007392:	9209      	str	r2, [sp, #36]	@ 0x24
 8007394:	f89a 3000 	ldrb.w	r3, [sl]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f000 809f 	beq.w	80074dc <_vfiprintf_r+0x1ec>
 800739e:	2300      	movs	r3, #0
 80073a0:	f04f 32ff 	mov.w	r2, #4294967295
 80073a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073a8:	f10a 0a01 	add.w	sl, sl, #1
 80073ac:	9304      	str	r3, [sp, #16]
 80073ae:	9307      	str	r3, [sp, #28]
 80073b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80073b6:	4654      	mov	r4, sl
 80073b8:	2205      	movs	r2, #5
 80073ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073be:	4853      	ldr	r0, [pc, #332]	@ (800750c <_vfiprintf_r+0x21c>)
 80073c0:	f7f8 ff06 	bl	80001d0 <memchr>
 80073c4:	9a04      	ldr	r2, [sp, #16]
 80073c6:	b9d8      	cbnz	r0, 8007400 <_vfiprintf_r+0x110>
 80073c8:	06d1      	lsls	r1, r2, #27
 80073ca:	bf44      	itt	mi
 80073cc:	2320      	movmi	r3, #32
 80073ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073d2:	0713      	lsls	r3, r2, #28
 80073d4:	bf44      	itt	mi
 80073d6:	232b      	movmi	r3, #43	@ 0x2b
 80073d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073dc:	f89a 3000 	ldrb.w	r3, [sl]
 80073e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e2:	d015      	beq.n	8007410 <_vfiprintf_r+0x120>
 80073e4:	9a07      	ldr	r2, [sp, #28]
 80073e6:	4654      	mov	r4, sl
 80073e8:	2000      	movs	r0, #0
 80073ea:	f04f 0c0a 	mov.w	ip, #10
 80073ee:	4621      	mov	r1, r4
 80073f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073f4:	3b30      	subs	r3, #48	@ 0x30
 80073f6:	2b09      	cmp	r3, #9
 80073f8:	d94b      	bls.n	8007492 <_vfiprintf_r+0x1a2>
 80073fa:	b1b0      	cbz	r0, 800742a <_vfiprintf_r+0x13a>
 80073fc:	9207      	str	r2, [sp, #28]
 80073fe:	e014      	b.n	800742a <_vfiprintf_r+0x13a>
 8007400:	eba0 0308 	sub.w	r3, r0, r8
 8007404:	fa09 f303 	lsl.w	r3, r9, r3
 8007408:	4313      	orrs	r3, r2
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	46a2      	mov	sl, r4
 800740e:	e7d2      	b.n	80073b6 <_vfiprintf_r+0xc6>
 8007410:	9b03      	ldr	r3, [sp, #12]
 8007412:	1d19      	adds	r1, r3, #4
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	9103      	str	r1, [sp, #12]
 8007418:	2b00      	cmp	r3, #0
 800741a:	bfbb      	ittet	lt
 800741c:	425b      	neglt	r3, r3
 800741e:	f042 0202 	orrlt.w	r2, r2, #2
 8007422:	9307      	strge	r3, [sp, #28]
 8007424:	9307      	strlt	r3, [sp, #28]
 8007426:	bfb8      	it	lt
 8007428:	9204      	strlt	r2, [sp, #16]
 800742a:	7823      	ldrb	r3, [r4, #0]
 800742c:	2b2e      	cmp	r3, #46	@ 0x2e
 800742e:	d10a      	bne.n	8007446 <_vfiprintf_r+0x156>
 8007430:	7863      	ldrb	r3, [r4, #1]
 8007432:	2b2a      	cmp	r3, #42	@ 0x2a
 8007434:	d132      	bne.n	800749c <_vfiprintf_r+0x1ac>
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	1d1a      	adds	r2, r3, #4
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	9203      	str	r2, [sp, #12]
 800743e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007442:	3402      	adds	r4, #2
 8007444:	9305      	str	r3, [sp, #20]
 8007446:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800751c <_vfiprintf_r+0x22c>
 800744a:	7821      	ldrb	r1, [r4, #0]
 800744c:	2203      	movs	r2, #3
 800744e:	4650      	mov	r0, sl
 8007450:	f7f8 febe 	bl	80001d0 <memchr>
 8007454:	b138      	cbz	r0, 8007466 <_vfiprintf_r+0x176>
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	eba0 000a 	sub.w	r0, r0, sl
 800745c:	2240      	movs	r2, #64	@ 0x40
 800745e:	4082      	lsls	r2, r0
 8007460:	4313      	orrs	r3, r2
 8007462:	3401      	adds	r4, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746a:	4829      	ldr	r0, [pc, #164]	@ (8007510 <_vfiprintf_r+0x220>)
 800746c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007470:	2206      	movs	r2, #6
 8007472:	f7f8 fead 	bl	80001d0 <memchr>
 8007476:	2800      	cmp	r0, #0
 8007478:	d03f      	beq.n	80074fa <_vfiprintf_r+0x20a>
 800747a:	4b26      	ldr	r3, [pc, #152]	@ (8007514 <_vfiprintf_r+0x224>)
 800747c:	bb1b      	cbnz	r3, 80074c6 <_vfiprintf_r+0x1d6>
 800747e:	9b03      	ldr	r3, [sp, #12]
 8007480:	3307      	adds	r3, #7
 8007482:	f023 0307 	bic.w	r3, r3, #7
 8007486:	3308      	adds	r3, #8
 8007488:	9303      	str	r3, [sp, #12]
 800748a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800748c:	443b      	add	r3, r7
 800748e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007490:	e76a      	b.n	8007368 <_vfiprintf_r+0x78>
 8007492:	fb0c 3202 	mla	r2, ip, r2, r3
 8007496:	460c      	mov	r4, r1
 8007498:	2001      	movs	r0, #1
 800749a:	e7a8      	b.n	80073ee <_vfiprintf_r+0xfe>
 800749c:	2300      	movs	r3, #0
 800749e:	3401      	adds	r4, #1
 80074a0:	9305      	str	r3, [sp, #20]
 80074a2:	4619      	mov	r1, r3
 80074a4:	f04f 0c0a 	mov.w	ip, #10
 80074a8:	4620      	mov	r0, r4
 80074aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074ae:	3a30      	subs	r2, #48	@ 0x30
 80074b0:	2a09      	cmp	r2, #9
 80074b2:	d903      	bls.n	80074bc <_vfiprintf_r+0x1cc>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0c6      	beq.n	8007446 <_vfiprintf_r+0x156>
 80074b8:	9105      	str	r1, [sp, #20]
 80074ba:	e7c4      	b.n	8007446 <_vfiprintf_r+0x156>
 80074bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80074c0:	4604      	mov	r4, r0
 80074c2:	2301      	movs	r3, #1
 80074c4:	e7f0      	b.n	80074a8 <_vfiprintf_r+0x1b8>
 80074c6:	ab03      	add	r3, sp, #12
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	462a      	mov	r2, r5
 80074cc:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <_vfiprintf_r+0x228>)
 80074ce:	a904      	add	r1, sp, #16
 80074d0:	4630      	mov	r0, r6
 80074d2:	f3af 8000 	nop.w
 80074d6:	4607      	mov	r7, r0
 80074d8:	1c78      	adds	r0, r7, #1
 80074da:	d1d6      	bne.n	800748a <_vfiprintf_r+0x19a>
 80074dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074de:	07d9      	lsls	r1, r3, #31
 80074e0:	d405      	bmi.n	80074ee <_vfiprintf_r+0x1fe>
 80074e2:	89ab      	ldrh	r3, [r5, #12]
 80074e4:	059a      	lsls	r2, r3, #22
 80074e6:	d402      	bmi.n	80074ee <_vfiprintf_r+0x1fe>
 80074e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074ea:	f7ff fddd 	bl	80070a8 <__retarget_lock_release_recursive>
 80074ee:	89ab      	ldrh	r3, [r5, #12]
 80074f0:	065b      	lsls	r3, r3, #25
 80074f2:	f53f af1f 	bmi.w	8007334 <_vfiprintf_r+0x44>
 80074f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074f8:	e71e      	b.n	8007338 <_vfiprintf_r+0x48>
 80074fa:	ab03      	add	r3, sp, #12
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	462a      	mov	r2, r5
 8007500:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <_vfiprintf_r+0x228>)
 8007502:	a904      	add	r1, sp, #16
 8007504:	4630      	mov	r0, r6
 8007506:	f000 f879 	bl	80075fc <_printf_i>
 800750a:	e7e4      	b.n	80074d6 <_vfiprintf_r+0x1e6>
 800750c:	08007d00 	.word	0x08007d00
 8007510:	08007d0a 	.word	0x08007d0a
 8007514:	00000000 	.word	0x00000000
 8007518:	080072cb 	.word	0x080072cb
 800751c:	08007d06 	.word	0x08007d06

08007520 <_printf_common>:
 8007520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007524:	4616      	mov	r6, r2
 8007526:	4698      	mov	r8, r3
 8007528:	688a      	ldr	r2, [r1, #8]
 800752a:	690b      	ldr	r3, [r1, #16]
 800752c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007530:	4293      	cmp	r3, r2
 8007532:	bfb8      	it	lt
 8007534:	4613      	movlt	r3, r2
 8007536:	6033      	str	r3, [r6, #0]
 8007538:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800753c:	4607      	mov	r7, r0
 800753e:	460c      	mov	r4, r1
 8007540:	b10a      	cbz	r2, 8007546 <_printf_common+0x26>
 8007542:	3301      	adds	r3, #1
 8007544:	6033      	str	r3, [r6, #0]
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	0699      	lsls	r1, r3, #26
 800754a:	bf42      	ittt	mi
 800754c:	6833      	ldrmi	r3, [r6, #0]
 800754e:	3302      	addmi	r3, #2
 8007550:	6033      	strmi	r3, [r6, #0]
 8007552:	6825      	ldr	r5, [r4, #0]
 8007554:	f015 0506 	ands.w	r5, r5, #6
 8007558:	d106      	bne.n	8007568 <_printf_common+0x48>
 800755a:	f104 0a19 	add.w	sl, r4, #25
 800755e:	68e3      	ldr	r3, [r4, #12]
 8007560:	6832      	ldr	r2, [r6, #0]
 8007562:	1a9b      	subs	r3, r3, r2
 8007564:	42ab      	cmp	r3, r5
 8007566:	dc26      	bgt.n	80075b6 <_printf_common+0x96>
 8007568:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	3b00      	subs	r3, #0
 8007570:	bf18      	it	ne
 8007572:	2301      	movne	r3, #1
 8007574:	0692      	lsls	r2, r2, #26
 8007576:	d42b      	bmi.n	80075d0 <_printf_common+0xb0>
 8007578:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800757c:	4641      	mov	r1, r8
 800757e:	4638      	mov	r0, r7
 8007580:	47c8      	blx	r9
 8007582:	3001      	adds	r0, #1
 8007584:	d01e      	beq.n	80075c4 <_printf_common+0xa4>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	6922      	ldr	r2, [r4, #16]
 800758a:	f003 0306 	and.w	r3, r3, #6
 800758e:	2b04      	cmp	r3, #4
 8007590:	bf02      	ittt	eq
 8007592:	68e5      	ldreq	r5, [r4, #12]
 8007594:	6833      	ldreq	r3, [r6, #0]
 8007596:	1aed      	subeq	r5, r5, r3
 8007598:	68a3      	ldr	r3, [r4, #8]
 800759a:	bf0c      	ite	eq
 800759c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075a0:	2500      	movne	r5, #0
 80075a2:	4293      	cmp	r3, r2
 80075a4:	bfc4      	itt	gt
 80075a6:	1a9b      	subgt	r3, r3, r2
 80075a8:	18ed      	addgt	r5, r5, r3
 80075aa:	2600      	movs	r6, #0
 80075ac:	341a      	adds	r4, #26
 80075ae:	42b5      	cmp	r5, r6
 80075b0:	d11a      	bne.n	80075e8 <_printf_common+0xc8>
 80075b2:	2000      	movs	r0, #0
 80075b4:	e008      	b.n	80075c8 <_printf_common+0xa8>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4652      	mov	r2, sl
 80075ba:	4641      	mov	r1, r8
 80075bc:	4638      	mov	r0, r7
 80075be:	47c8      	blx	r9
 80075c0:	3001      	adds	r0, #1
 80075c2:	d103      	bne.n	80075cc <_printf_common+0xac>
 80075c4:	f04f 30ff 	mov.w	r0, #4294967295
 80075c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075cc:	3501      	adds	r5, #1
 80075ce:	e7c6      	b.n	800755e <_printf_common+0x3e>
 80075d0:	18e1      	adds	r1, r4, r3
 80075d2:	1c5a      	adds	r2, r3, #1
 80075d4:	2030      	movs	r0, #48	@ 0x30
 80075d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80075da:	4422      	add	r2, r4
 80075dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075e4:	3302      	adds	r3, #2
 80075e6:	e7c7      	b.n	8007578 <_printf_common+0x58>
 80075e8:	2301      	movs	r3, #1
 80075ea:	4622      	mov	r2, r4
 80075ec:	4641      	mov	r1, r8
 80075ee:	4638      	mov	r0, r7
 80075f0:	47c8      	blx	r9
 80075f2:	3001      	adds	r0, #1
 80075f4:	d0e6      	beq.n	80075c4 <_printf_common+0xa4>
 80075f6:	3601      	adds	r6, #1
 80075f8:	e7d9      	b.n	80075ae <_printf_common+0x8e>
	...

080075fc <_printf_i>:
 80075fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	7e0f      	ldrb	r7, [r1, #24]
 8007602:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007604:	2f78      	cmp	r7, #120	@ 0x78
 8007606:	4691      	mov	r9, r2
 8007608:	4680      	mov	r8, r0
 800760a:	460c      	mov	r4, r1
 800760c:	469a      	mov	sl, r3
 800760e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007612:	d807      	bhi.n	8007624 <_printf_i+0x28>
 8007614:	2f62      	cmp	r7, #98	@ 0x62
 8007616:	d80a      	bhi.n	800762e <_printf_i+0x32>
 8007618:	2f00      	cmp	r7, #0
 800761a:	f000 80d2 	beq.w	80077c2 <_printf_i+0x1c6>
 800761e:	2f58      	cmp	r7, #88	@ 0x58
 8007620:	f000 80b9 	beq.w	8007796 <_printf_i+0x19a>
 8007624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007628:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800762c:	e03a      	b.n	80076a4 <_printf_i+0xa8>
 800762e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007632:	2b15      	cmp	r3, #21
 8007634:	d8f6      	bhi.n	8007624 <_printf_i+0x28>
 8007636:	a101      	add	r1, pc, #4	@ (adr r1, 800763c <_printf_i+0x40>)
 8007638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800763c:	08007695 	.word	0x08007695
 8007640:	080076a9 	.word	0x080076a9
 8007644:	08007625 	.word	0x08007625
 8007648:	08007625 	.word	0x08007625
 800764c:	08007625 	.word	0x08007625
 8007650:	08007625 	.word	0x08007625
 8007654:	080076a9 	.word	0x080076a9
 8007658:	08007625 	.word	0x08007625
 800765c:	08007625 	.word	0x08007625
 8007660:	08007625 	.word	0x08007625
 8007664:	08007625 	.word	0x08007625
 8007668:	080077a9 	.word	0x080077a9
 800766c:	080076d3 	.word	0x080076d3
 8007670:	08007763 	.word	0x08007763
 8007674:	08007625 	.word	0x08007625
 8007678:	08007625 	.word	0x08007625
 800767c:	080077cb 	.word	0x080077cb
 8007680:	08007625 	.word	0x08007625
 8007684:	080076d3 	.word	0x080076d3
 8007688:	08007625 	.word	0x08007625
 800768c:	08007625 	.word	0x08007625
 8007690:	0800776b 	.word	0x0800776b
 8007694:	6833      	ldr	r3, [r6, #0]
 8007696:	1d1a      	adds	r2, r3, #4
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6032      	str	r2, [r6, #0]
 800769c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076a4:	2301      	movs	r3, #1
 80076a6:	e09d      	b.n	80077e4 <_printf_i+0x1e8>
 80076a8:	6833      	ldr	r3, [r6, #0]
 80076aa:	6820      	ldr	r0, [r4, #0]
 80076ac:	1d19      	adds	r1, r3, #4
 80076ae:	6031      	str	r1, [r6, #0]
 80076b0:	0606      	lsls	r6, r0, #24
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0xbc>
 80076b4:	681d      	ldr	r5, [r3, #0]
 80076b6:	e003      	b.n	80076c0 <_printf_i+0xc4>
 80076b8:	0645      	lsls	r5, r0, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0xb8>
 80076bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076c0:	2d00      	cmp	r5, #0
 80076c2:	da03      	bge.n	80076cc <_printf_i+0xd0>
 80076c4:	232d      	movs	r3, #45	@ 0x2d
 80076c6:	426d      	negs	r5, r5
 80076c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076cc:	4859      	ldr	r0, [pc, #356]	@ (8007834 <_printf_i+0x238>)
 80076ce:	230a      	movs	r3, #10
 80076d0:	e011      	b.n	80076f6 <_printf_i+0xfa>
 80076d2:	6821      	ldr	r1, [r4, #0]
 80076d4:	6833      	ldr	r3, [r6, #0]
 80076d6:	0608      	lsls	r0, r1, #24
 80076d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80076dc:	d402      	bmi.n	80076e4 <_printf_i+0xe8>
 80076de:	0649      	lsls	r1, r1, #25
 80076e0:	bf48      	it	mi
 80076e2:	b2ad      	uxthmi	r5, r5
 80076e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80076e6:	4853      	ldr	r0, [pc, #332]	@ (8007834 <_printf_i+0x238>)
 80076e8:	6033      	str	r3, [r6, #0]
 80076ea:	bf14      	ite	ne
 80076ec:	230a      	movne	r3, #10
 80076ee:	2308      	moveq	r3, #8
 80076f0:	2100      	movs	r1, #0
 80076f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076f6:	6866      	ldr	r6, [r4, #4]
 80076f8:	60a6      	str	r6, [r4, #8]
 80076fa:	2e00      	cmp	r6, #0
 80076fc:	bfa2      	ittt	ge
 80076fe:	6821      	ldrge	r1, [r4, #0]
 8007700:	f021 0104 	bicge.w	r1, r1, #4
 8007704:	6021      	strge	r1, [r4, #0]
 8007706:	b90d      	cbnz	r5, 800770c <_printf_i+0x110>
 8007708:	2e00      	cmp	r6, #0
 800770a:	d04b      	beq.n	80077a4 <_printf_i+0x1a8>
 800770c:	4616      	mov	r6, r2
 800770e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007712:	fb03 5711 	mls	r7, r3, r1, r5
 8007716:	5dc7      	ldrb	r7, [r0, r7]
 8007718:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800771c:	462f      	mov	r7, r5
 800771e:	42bb      	cmp	r3, r7
 8007720:	460d      	mov	r5, r1
 8007722:	d9f4      	bls.n	800770e <_printf_i+0x112>
 8007724:	2b08      	cmp	r3, #8
 8007726:	d10b      	bne.n	8007740 <_printf_i+0x144>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	07df      	lsls	r7, r3, #31
 800772c:	d508      	bpl.n	8007740 <_printf_i+0x144>
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	6861      	ldr	r1, [r4, #4]
 8007732:	4299      	cmp	r1, r3
 8007734:	bfde      	ittt	le
 8007736:	2330      	movle	r3, #48	@ 0x30
 8007738:	f806 3c01 	strble.w	r3, [r6, #-1]
 800773c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007740:	1b92      	subs	r2, r2, r6
 8007742:	6122      	str	r2, [r4, #16]
 8007744:	f8cd a000 	str.w	sl, [sp]
 8007748:	464b      	mov	r3, r9
 800774a:	aa03      	add	r2, sp, #12
 800774c:	4621      	mov	r1, r4
 800774e:	4640      	mov	r0, r8
 8007750:	f7ff fee6 	bl	8007520 <_printf_common>
 8007754:	3001      	adds	r0, #1
 8007756:	d14a      	bne.n	80077ee <_printf_i+0x1f2>
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	b004      	add	sp, #16
 800775e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f043 0320 	orr.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	4833      	ldr	r0, [pc, #204]	@ (8007838 <_printf_i+0x23c>)
 800776c:	2778      	movs	r7, #120	@ 0x78
 800776e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	6831      	ldr	r1, [r6, #0]
 8007776:	061f      	lsls	r7, r3, #24
 8007778:	f851 5b04 	ldr.w	r5, [r1], #4
 800777c:	d402      	bmi.n	8007784 <_printf_i+0x188>
 800777e:	065f      	lsls	r7, r3, #25
 8007780:	bf48      	it	mi
 8007782:	b2ad      	uxthmi	r5, r5
 8007784:	6031      	str	r1, [r6, #0]
 8007786:	07d9      	lsls	r1, r3, #31
 8007788:	bf44      	itt	mi
 800778a:	f043 0320 	orrmi.w	r3, r3, #32
 800778e:	6023      	strmi	r3, [r4, #0]
 8007790:	b11d      	cbz	r5, 800779a <_printf_i+0x19e>
 8007792:	2310      	movs	r3, #16
 8007794:	e7ac      	b.n	80076f0 <_printf_i+0xf4>
 8007796:	4827      	ldr	r0, [pc, #156]	@ (8007834 <_printf_i+0x238>)
 8007798:	e7e9      	b.n	800776e <_printf_i+0x172>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	f023 0320 	bic.w	r3, r3, #32
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	e7f6      	b.n	8007792 <_printf_i+0x196>
 80077a4:	4616      	mov	r6, r2
 80077a6:	e7bd      	b.n	8007724 <_printf_i+0x128>
 80077a8:	6833      	ldr	r3, [r6, #0]
 80077aa:	6825      	ldr	r5, [r4, #0]
 80077ac:	6961      	ldr	r1, [r4, #20]
 80077ae:	1d18      	adds	r0, r3, #4
 80077b0:	6030      	str	r0, [r6, #0]
 80077b2:	062e      	lsls	r6, r5, #24
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	d501      	bpl.n	80077bc <_printf_i+0x1c0>
 80077b8:	6019      	str	r1, [r3, #0]
 80077ba:	e002      	b.n	80077c2 <_printf_i+0x1c6>
 80077bc:	0668      	lsls	r0, r5, #25
 80077be:	d5fb      	bpl.n	80077b8 <_printf_i+0x1bc>
 80077c0:	8019      	strh	r1, [r3, #0]
 80077c2:	2300      	movs	r3, #0
 80077c4:	6123      	str	r3, [r4, #16]
 80077c6:	4616      	mov	r6, r2
 80077c8:	e7bc      	b.n	8007744 <_printf_i+0x148>
 80077ca:	6833      	ldr	r3, [r6, #0]
 80077cc:	1d1a      	adds	r2, r3, #4
 80077ce:	6032      	str	r2, [r6, #0]
 80077d0:	681e      	ldr	r6, [r3, #0]
 80077d2:	6862      	ldr	r2, [r4, #4]
 80077d4:	2100      	movs	r1, #0
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7f8 fcfa 	bl	80001d0 <memchr>
 80077dc:	b108      	cbz	r0, 80077e2 <_printf_i+0x1e6>
 80077de:	1b80      	subs	r0, r0, r6
 80077e0:	6060      	str	r0, [r4, #4]
 80077e2:	6863      	ldr	r3, [r4, #4]
 80077e4:	6123      	str	r3, [r4, #16]
 80077e6:	2300      	movs	r3, #0
 80077e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ec:	e7aa      	b.n	8007744 <_printf_i+0x148>
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	4632      	mov	r2, r6
 80077f2:	4649      	mov	r1, r9
 80077f4:	4640      	mov	r0, r8
 80077f6:	47d0      	blx	sl
 80077f8:	3001      	adds	r0, #1
 80077fa:	d0ad      	beq.n	8007758 <_printf_i+0x15c>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	079b      	lsls	r3, r3, #30
 8007800:	d413      	bmi.n	800782a <_printf_i+0x22e>
 8007802:	68e0      	ldr	r0, [r4, #12]
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	4298      	cmp	r0, r3
 8007808:	bfb8      	it	lt
 800780a:	4618      	movlt	r0, r3
 800780c:	e7a6      	b.n	800775c <_printf_i+0x160>
 800780e:	2301      	movs	r3, #1
 8007810:	4632      	mov	r2, r6
 8007812:	4649      	mov	r1, r9
 8007814:	4640      	mov	r0, r8
 8007816:	47d0      	blx	sl
 8007818:	3001      	adds	r0, #1
 800781a:	d09d      	beq.n	8007758 <_printf_i+0x15c>
 800781c:	3501      	adds	r5, #1
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	9903      	ldr	r1, [sp, #12]
 8007822:	1a5b      	subs	r3, r3, r1
 8007824:	42ab      	cmp	r3, r5
 8007826:	dcf2      	bgt.n	800780e <_printf_i+0x212>
 8007828:	e7eb      	b.n	8007802 <_printf_i+0x206>
 800782a:	2500      	movs	r5, #0
 800782c:	f104 0619 	add.w	r6, r4, #25
 8007830:	e7f5      	b.n	800781e <_printf_i+0x222>
 8007832:	bf00      	nop
 8007834:	08007d11 	.word	0x08007d11
 8007838:	08007d22 	.word	0x08007d22

0800783c <__sflush_r>:
 800783c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007844:	0716      	lsls	r6, r2, #28
 8007846:	4605      	mov	r5, r0
 8007848:	460c      	mov	r4, r1
 800784a:	d454      	bmi.n	80078f6 <__sflush_r+0xba>
 800784c:	684b      	ldr	r3, [r1, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	dc02      	bgt.n	8007858 <__sflush_r+0x1c>
 8007852:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd48      	ble.n	80078ea <__sflush_r+0xae>
 8007858:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800785a:	2e00      	cmp	r6, #0
 800785c:	d045      	beq.n	80078ea <__sflush_r+0xae>
 800785e:	2300      	movs	r3, #0
 8007860:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007864:	682f      	ldr	r7, [r5, #0]
 8007866:	6a21      	ldr	r1, [r4, #32]
 8007868:	602b      	str	r3, [r5, #0]
 800786a:	d030      	beq.n	80078ce <__sflush_r+0x92>
 800786c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	0759      	lsls	r1, r3, #29
 8007872:	d505      	bpl.n	8007880 <__sflush_r+0x44>
 8007874:	6863      	ldr	r3, [r4, #4]
 8007876:	1ad2      	subs	r2, r2, r3
 8007878:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800787a:	b10b      	cbz	r3, 8007880 <__sflush_r+0x44>
 800787c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	2300      	movs	r3, #0
 8007882:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007884:	6a21      	ldr	r1, [r4, #32]
 8007886:	4628      	mov	r0, r5
 8007888:	47b0      	blx	r6
 800788a:	1c43      	adds	r3, r0, #1
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	d106      	bne.n	800789e <__sflush_r+0x62>
 8007890:	6829      	ldr	r1, [r5, #0]
 8007892:	291d      	cmp	r1, #29
 8007894:	d82b      	bhi.n	80078ee <__sflush_r+0xb2>
 8007896:	4a2a      	ldr	r2, [pc, #168]	@ (8007940 <__sflush_r+0x104>)
 8007898:	410a      	asrs	r2, r1
 800789a:	07d6      	lsls	r6, r2, #31
 800789c:	d427      	bmi.n	80078ee <__sflush_r+0xb2>
 800789e:	2200      	movs	r2, #0
 80078a0:	6062      	str	r2, [r4, #4]
 80078a2:	04d9      	lsls	r1, r3, #19
 80078a4:	6922      	ldr	r2, [r4, #16]
 80078a6:	6022      	str	r2, [r4, #0]
 80078a8:	d504      	bpl.n	80078b4 <__sflush_r+0x78>
 80078aa:	1c42      	adds	r2, r0, #1
 80078ac:	d101      	bne.n	80078b2 <__sflush_r+0x76>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b903      	cbnz	r3, 80078b4 <__sflush_r+0x78>
 80078b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80078b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078b6:	602f      	str	r7, [r5, #0]
 80078b8:	b1b9      	cbz	r1, 80078ea <__sflush_r+0xae>
 80078ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078be:	4299      	cmp	r1, r3
 80078c0:	d002      	beq.n	80078c8 <__sflush_r+0x8c>
 80078c2:	4628      	mov	r0, r5
 80078c4:	f7ff fbf2 	bl	80070ac <_free_r>
 80078c8:	2300      	movs	r3, #0
 80078ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80078cc:	e00d      	b.n	80078ea <__sflush_r+0xae>
 80078ce:	2301      	movs	r3, #1
 80078d0:	4628      	mov	r0, r5
 80078d2:	47b0      	blx	r6
 80078d4:	4602      	mov	r2, r0
 80078d6:	1c50      	adds	r0, r2, #1
 80078d8:	d1c9      	bne.n	800786e <__sflush_r+0x32>
 80078da:	682b      	ldr	r3, [r5, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d0c6      	beq.n	800786e <__sflush_r+0x32>
 80078e0:	2b1d      	cmp	r3, #29
 80078e2:	d001      	beq.n	80078e8 <__sflush_r+0xac>
 80078e4:	2b16      	cmp	r3, #22
 80078e6:	d11e      	bne.n	8007926 <__sflush_r+0xea>
 80078e8:	602f      	str	r7, [r5, #0]
 80078ea:	2000      	movs	r0, #0
 80078ec:	e022      	b.n	8007934 <__sflush_r+0xf8>
 80078ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078f2:	b21b      	sxth	r3, r3
 80078f4:	e01b      	b.n	800792e <__sflush_r+0xf2>
 80078f6:	690f      	ldr	r7, [r1, #16]
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	d0f6      	beq.n	80078ea <__sflush_r+0xae>
 80078fc:	0793      	lsls	r3, r2, #30
 80078fe:	680e      	ldr	r6, [r1, #0]
 8007900:	bf08      	it	eq
 8007902:	694b      	ldreq	r3, [r1, #20]
 8007904:	600f      	str	r7, [r1, #0]
 8007906:	bf18      	it	ne
 8007908:	2300      	movne	r3, #0
 800790a:	eba6 0807 	sub.w	r8, r6, r7
 800790e:	608b      	str	r3, [r1, #8]
 8007910:	f1b8 0f00 	cmp.w	r8, #0
 8007914:	dde9      	ble.n	80078ea <__sflush_r+0xae>
 8007916:	6a21      	ldr	r1, [r4, #32]
 8007918:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800791a:	4643      	mov	r3, r8
 800791c:	463a      	mov	r2, r7
 800791e:	4628      	mov	r0, r5
 8007920:	47b0      	blx	r6
 8007922:	2800      	cmp	r0, #0
 8007924:	dc08      	bgt.n	8007938 <__sflush_r+0xfc>
 8007926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800792a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800792e:	81a3      	strh	r3, [r4, #12]
 8007930:	f04f 30ff 	mov.w	r0, #4294967295
 8007934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007938:	4407      	add	r7, r0
 800793a:	eba8 0800 	sub.w	r8, r8, r0
 800793e:	e7e7      	b.n	8007910 <__sflush_r+0xd4>
 8007940:	dfbffffe 	.word	0xdfbffffe

08007944 <_fflush_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	690b      	ldr	r3, [r1, #16]
 8007948:	4605      	mov	r5, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b913      	cbnz	r3, 8007954 <_fflush_r+0x10>
 800794e:	2500      	movs	r5, #0
 8007950:	4628      	mov	r0, r5
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	b118      	cbz	r0, 800795e <_fflush_r+0x1a>
 8007956:	6a03      	ldr	r3, [r0, #32]
 8007958:	b90b      	cbnz	r3, 800795e <_fflush_r+0x1a>
 800795a:	f7ff fa97 	bl	8006e8c <__sinit>
 800795e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f3      	beq.n	800794e <_fflush_r+0xa>
 8007966:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007968:	07d0      	lsls	r0, r2, #31
 800796a:	d404      	bmi.n	8007976 <_fflush_r+0x32>
 800796c:	0599      	lsls	r1, r3, #22
 800796e:	d402      	bmi.n	8007976 <_fflush_r+0x32>
 8007970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007972:	f7ff fb98 	bl	80070a6 <__retarget_lock_acquire_recursive>
 8007976:	4628      	mov	r0, r5
 8007978:	4621      	mov	r1, r4
 800797a:	f7ff ff5f 	bl	800783c <__sflush_r>
 800797e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007980:	07da      	lsls	r2, r3, #31
 8007982:	4605      	mov	r5, r0
 8007984:	d4e4      	bmi.n	8007950 <_fflush_r+0xc>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	059b      	lsls	r3, r3, #22
 800798a:	d4e1      	bmi.n	8007950 <_fflush_r+0xc>
 800798c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800798e:	f7ff fb8b 	bl	80070a8 <__retarget_lock_release_recursive>
 8007992:	e7dd      	b.n	8007950 <_fflush_r+0xc>

08007994 <_putc_r>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	460d      	mov	r5, r1
 8007998:	4614      	mov	r4, r2
 800799a:	4606      	mov	r6, r0
 800799c:	b118      	cbz	r0, 80079a6 <_putc_r+0x12>
 800799e:	6a03      	ldr	r3, [r0, #32]
 80079a0:	b90b      	cbnz	r3, 80079a6 <_putc_r+0x12>
 80079a2:	f7ff fa73 	bl	8006e8c <__sinit>
 80079a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079a8:	07d8      	lsls	r0, r3, #31
 80079aa:	d405      	bmi.n	80079b8 <_putc_r+0x24>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	0599      	lsls	r1, r3, #22
 80079b0:	d402      	bmi.n	80079b8 <_putc_r+0x24>
 80079b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079b4:	f7ff fb77 	bl	80070a6 <__retarget_lock_acquire_recursive>
 80079b8:	68a3      	ldr	r3, [r4, #8]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	60a3      	str	r3, [r4, #8]
 80079c0:	da05      	bge.n	80079ce <_putc_r+0x3a>
 80079c2:	69a2      	ldr	r2, [r4, #24]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	db12      	blt.n	80079ee <_putc_r+0x5a>
 80079c8:	b2eb      	uxtb	r3, r5
 80079ca:	2b0a      	cmp	r3, #10
 80079cc:	d00f      	beq.n	80079ee <_putc_r+0x5a>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	6022      	str	r2, [r4, #0]
 80079d4:	701d      	strb	r5, [r3, #0]
 80079d6:	b2ed      	uxtb	r5, r5
 80079d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079da:	07da      	lsls	r2, r3, #31
 80079dc:	d405      	bmi.n	80079ea <_putc_r+0x56>
 80079de:	89a3      	ldrh	r3, [r4, #12]
 80079e0:	059b      	lsls	r3, r3, #22
 80079e2:	d402      	bmi.n	80079ea <_putc_r+0x56>
 80079e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079e6:	f7ff fb5f 	bl	80070a8 <__retarget_lock_release_recursive>
 80079ea:	4628      	mov	r0, r5
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
 80079ee:	4629      	mov	r1, r5
 80079f0:	4622      	mov	r2, r4
 80079f2:	4630      	mov	r0, r6
 80079f4:	f000 f802 	bl	80079fc <__swbuf_r>
 80079f8:	4605      	mov	r5, r0
 80079fa:	e7ed      	b.n	80079d8 <_putc_r+0x44>

080079fc <__swbuf_r>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	460e      	mov	r6, r1
 8007a00:	4614      	mov	r4, r2
 8007a02:	4605      	mov	r5, r0
 8007a04:	b118      	cbz	r0, 8007a0e <__swbuf_r+0x12>
 8007a06:	6a03      	ldr	r3, [r0, #32]
 8007a08:	b90b      	cbnz	r3, 8007a0e <__swbuf_r+0x12>
 8007a0a:	f7ff fa3f 	bl	8006e8c <__sinit>
 8007a0e:	69a3      	ldr	r3, [r4, #24]
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	071a      	lsls	r2, r3, #28
 8007a16:	d501      	bpl.n	8007a1c <__swbuf_r+0x20>
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	b943      	cbnz	r3, 8007a2e <__swbuf_r+0x32>
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f000 f82a 	bl	8007a78 <__swsetup_r>
 8007a24:	b118      	cbz	r0, 8007a2e <__swbuf_r+0x32>
 8007a26:	f04f 37ff 	mov.w	r7, #4294967295
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	6922      	ldr	r2, [r4, #16]
 8007a32:	1a98      	subs	r0, r3, r2
 8007a34:	6963      	ldr	r3, [r4, #20]
 8007a36:	b2f6      	uxtb	r6, r6
 8007a38:	4283      	cmp	r3, r0
 8007a3a:	4637      	mov	r7, r6
 8007a3c:	dc05      	bgt.n	8007a4a <__swbuf_r+0x4e>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f7ff ff7f 	bl	8007944 <_fflush_r>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d1ed      	bne.n	8007a26 <__swbuf_r+0x2a>
 8007a4a:	68a3      	ldr	r3, [r4, #8]
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	60a3      	str	r3, [r4, #8]
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	6022      	str	r2, [r4, #0]
 8007a56:	701e      	strb	r6, [r3, #0]
 8007a58:	6962      	ldr	r2, [r4, #20]
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d004      	beq.n	8007a6a <__swbuf_r+0x6e>
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	07db      	lsls	r3, r3, #31
 8007a64:	d5e1      	bpl.n	8007a2a <__swbuf_r+0x2e>
 8007a66:	2e0a      	cmp	r6, #10
 8007a68:	d1df      	bne.n	8007a2a <__swbuf_r+0x2e>
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f7ff ff69 	bl	8007944 <_fflush_r>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d0d9      	beq.n	8007a2a <__swbuf_r+0x2e>
 8007a76:	e7d6      	b.n	8007a26 <__swbuf_r+0x2a>

08007a78 <__swsetup_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4b29      	ldr	r3, [pc, #164]	@ (8007b20 <__swsetup_r+0xa8>)
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	6818      	ldr	r0, [r3, #0]
 8007a80:	460c      	mov	r4, r1
 8007a82:	b118      	cbz	r0, 8007a8c <__swsetup_r+0x14>
 8007a84:	6a03      	ldr	r3, [r0, #32]
 8007a86:	b90b      	cbnz	r3, 8007a8c <__swsetup_r+0x14>
 8007a88:	f7ff fa00 	bl	8006e8c <__sinit>
 8007a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a90:	0719      	lsls	r1, r3, #28
 8007a92:	d422      	bmi.n	8007ada <__swsetup_r+0x62>
 8007a94:	06da      	lsls	r2, r3, #27
 8007a96:	d407      	bmi.n	8007aa8 <__swsetup_r+0x30>
 8007a98:	2209      	movs	r2, #9
 8007a9a:	602a      	str	r2, [r5, #0]
 8007a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa0:	81a3      	strh	r3, [r4, #12]
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	e033      	b.n	8007b10 <__swsetup_r+0x98>
 8007aa8:	0758      	lsls	r0, r3, #29
 8007aaa:	d512      	bpl.n	8007ad2 <__swsetup_r+0x5a>
 8007aac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aae:	b141      	cbz	r1, 8007ac2 <__swsetup_r+0x4a>
 8007ab0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ab4:	4299      	cmp	r1, r3
 8007ab6:	d002      	beq.n	8007abe <__swsetup_r+0x46>
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f7ff faf7 	bl	80070ac <_free_r>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	2300      	movs	r3, #0
 8007acc:	6063      	str	r3, [r4, #4]
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f043 0308 	orr.w	r3, r3, #8
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	b94b      	cbnz	r3, 8007af2 <__swsetup_r+0x7a>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ae8:	d003      	beq.n	8007af2 <__swsetup_r+0x7a>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4628      	mov	r0, r5
 8007aee:	f000 f84f 	bl	8007b90 <__smakebuf_r>
 8007af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007af6:	f013 0201 	ands.w	r2, r3, #1
 8007afa:	d00a      	beq.n	8007b12 <__swsetup_r+0x9a>
 8007afc:	2200      	movs	r2, #0
 8007afe:	60a2      	str	r2, [r4, #8]
 8007b00:	6962      	ldr	r2, [r4, #20]
 8007b02:	4252      	negs	r2, r2
 8007b04:	61a2      	str	r2, [r4, #24]
 8007b06:	6922      	ldr	r2, [r4, #16]
 8007b08:	b942      	cbnz	r2, 8007b1c <__swsetup_r+0xa4>
 8007b0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b0e:	d1c5      	bne.n	8007a9c <__swsetup_r+0x24>
 8007b10:	bd38      	pop	{r3, r4, r5, pc}
 8007b12:	0799      	lsls	r1, r3, #30
 8007b14:	bf58      	it	pl
 8007b16:	6962      	ldrpl	r2, [r4, #20]
 8007b18:	60a2      	str	r2, [r4, #8]
 8007b1a:	e7f4      	b.n	8007b06 <__swsetup_r+0x8e>
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e7f7      	b.n	8007b10 <__swsetup_r+0x98>
 8007b20:	20000054 	.word	0x20000054

08007b24 <_sbrk_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4d06      	ldr	r5, [pc, #24]	@ (8007b40 <_sbrk_r+0x1c>)
 8007b28:	2300      	movs	r3, #0
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	602b      	str	r3, [r5, #0]
 8007b30:	f7f9 fa3a 	bl	8000fa8 <_sbrk>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_sbrk_r+0x1a>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_sbrk_r+0x1a>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	20000560 	.word	0x20000560

08007b44 <__swhatbuf_r>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	460c      	mov	r4, r1
 8007b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	b096      	sub	sp, #88	@ 0x58
 8007b50:	4615      	mov	r5, r2
 8007b52:	461e      	mov	r6, r3
 8007b54:	da0d      	bge.n	8007b72 <__swhatbuf_r+0x2e>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b5c:	f04f 0100 	mov.w	r1, #0
 8007b60:	bf14      	ite	ne
 8007b62:	2340      	movne	r3, #64	@ 0x40
 8007b64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b68:	2000      	movs	r0, #0
 8007b6a:	6031      	str	r1, [r6, #0]
 8007b6c:	602b      	str	r3, [r5, #0]
 8007b6e:	b016      	add	sp, #88	@ 0x58
 8007b70:	bd70      	pop	{r4, r5, r6, pc}
 8007b72:	466a      	mov	r2, sp
 8007b74:	f000 f848 	bl	8007c08 <_fstat_r>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	dbec      	blt.n	8007b56 <__swhatbuf_r+0x12>
 8007b7c:	9901      	ldr	r1, [sp, #4]
 8007b7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b86:	4259      	negs	r1, r3
 8007b88:	4159      	adcs	r1, r3
 8007b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b8e:	e7eb      	b.n	8007b68 <__swhatbuf_r+0x24>

08007b90 <__smakebuf_r>:
 8007b90:	898b      	ldrh	r3, [r1, #12]
 8007b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b94:	079d      	lsls	r5, r3, #30
 8007b96:	4606      	mov	r6, r0
 8007b98:	460c      	mov	r4, r1
 8007b9a:	d507      	bpl.n	8007bac <__smakebuf_r+0x1c>
 8007b9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ba0:	6023      	str	r3, [r4, #0]
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	6163      	str	r3, [r4, #20]
 8007ba8:	b003      	add	sp, #12
 8007baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bac:	ab01      	add	r3, sp, #4
 8007bae:	466a      	mov	r2, sp
 8007bb0:	f7ff ffc8 	bl	8007b44 <__swhatbuf_r>
 8007bb4:	9f00      	ldr	r7, [sp, #0]
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	4639      	mov	r1, r7
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7ff fae2 	bl	8007184 <_malloc_r>
 8007bc0:	b948      	cbnz	r0, 8007bd6 <__smakebuf_r+0x46>
 8007bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc6:	059a      	lsls	r2, r3, #22
 8007bc8:	d4ee      	bmi.n	8007ba8 <__smakebuf_r+0x18>
 8007bca:	f023 0303 	bic.w	r3, r3, #3
 8007bce:	f043 0302 	orr.w	r3, r3, #2
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	e7e2      	b.n	8007b9c <__smakebuf_r+0xc>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	6020      	str	r0, [r4, #0]
 8007bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	9b01      	ldr	r3, [sp, #4]
 8007be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007be6:	b15b      	cbz	r3, 8007c00 <__smakebuf_r+0x70>
 8007be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bec:	4630      	mov	r0, r6
 8007bee:	f000 f81d 	bl	8007c2c <_isatty_r>
 8007bf2:	b128      	cbz	r0, 8007c00 <__smakebuf_r+0x70>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	431d      	orrs	r5, r3
 8007c04:	81a5      	strh	r5, [r4, #12]
 8007c06:	e7cf      	b.n	8007ba8 <__smakebuf_r+0x18>

08007c08 <_fstat_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d07      	ldr	r5, [pc, #28]	@ (8007c28 <_fstat_r+0x20>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	4611      	mov	r1, r2
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	f7f9 f99e 	bl	8000f56 <_fstat>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	d102      	bne.n	8007c24 <_fstat_r+0x1c>
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	b103      	cbz	r3, 8007c24 <_fstat_r+0x1c>
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	20000560 	.word	0x20000560

08007c2c <_isatty_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d06      	ldr	r5, [pc, #24]	@ (8007c48 <_isatty_r+0x1c>)
 8007c30:	2300      	movs	r3, #0
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7f9 f99d 	bl	8000f76 <_isatty>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_isatty_r+0x1a>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_isatty_r+0x1a>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20000560 	.word	0x20000560

08007c4c <_init>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr

08007c58 <_fini>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	bf00      	nop
 8007c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	469e      	mov	lr, r3
 8007c62:	4770      	bx	lr
